// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.200703.9

#ifndef WINRT_Microsoft_UI_Xaml_Controls_0_H
#define WINRT_Microsoft_UI_Xaml_Controls_0_H
WINRT_EXPORT namespace winrt::Windows::ApplicationModel::Contacts
{
    struct Contact;
}
WINRT_EXPORT namespace winrt::Windows::ApplicationModel::DataTransfer
{
    struct DataPackage;
    enum class DataPackageOperation : uint32_t;
}
WINRT_EXPORT namespace winrt::Windows::Foundation
{
    struct Deferral;
    struct EventRegistrationToken;
    struct IAsyncAction;
    template <typename T> struct __declspec(empty_bases) IReference;
    struct Point;
    struct Rect;
    struct Size;
    template <typename TSender, typename TResult> struct __declspec(empty_bases) TypedEventHandler;
    struct Uri;
}
WINRT_EXPORT namespace winrt::Windows::Foundation::Collections
{
    template <typename T> struct __declspec(empty_bases) IObservableVector;
    struct IVectorChangedEventArgs;
    template <typename T> struct __declspec(empty_bases) IVectorView;
    template <typename T> struct __declspec(empty_bases) IVector;
}
WINRT_EXPORT namespace winrt::Windows::Foundation::Numerics
{
}
WINRT_EXPORT namespace winrt::Windows::Globalization::NumberFormatting
{
    struct INumberFormatter2;
}
WINRT_EXPORT namespace winrt::Windows::UI
{
    struct Color;
}
WINRT_EXPORT namespace winrt::Windows::UI::Composition
{
    struct CompositionObject;
    struct Compositor;
    struct Visual;
}
WINRT_EXPORT namespace winrt::Windows::UI::Text
{
    enum class FontStyle : int32_t;
    struct FontWeight;
}
WINRT_EXPORT namespace winrt::Windows::UI::Xaml
{
    struct DataTemplate;
    struct DependencyObject;
    struct DependencyProperty;
    struct DragEventHandler;
    struct FrameworkElement;
    struct GridLength;
    struct Style;
    enum class TextReadingOrder : int32_t;
    struct Thickness;
    struct UIElement;
    enum class Visibility : int32_t;
}
WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Controls
{
    struct AutoSuggestBox;
    struct DataTemplateSelector;
    struct ICommandBarElement;
    struct IconElement;
    struct MenuFlyoutItemBase;
    enum class Orientation : int32_t;
    struct ScrollViewer;
    struct SelectionChangedEventHandler;
    struct StyleSelector;
    enum class Symbol : int32_t;
}
WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Controls::Primitives
{
    struct FlyoutBase;
}
WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Input
{
    struct ICommand;
}
WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Interop
{
    struct NotifyCollectionChangedEventArgs;
}
WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Media
{
    struct Brush;
    struct FontFamily;
    struct Geometry;
    struct ImageBrush;
    struct ImageSource;
    struct RectangleGeometry;
    struct SolidColorBrush;
    enum class Stretch : int32_t;
}
WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Media::Animation
{
    struct NavigationTransitionInfo;
    struct TransitionCollection;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Xaml::Controls
{
    enum class ColorPickerHsvChannel : int32_t
    {
        Hue = 0,
        Saturation = 1,
        Value = 2,
        Alpha = 3,
    };
    enum class ColorSpectrumComponents : int32_t
    {
        HueValue = 0,
        ValueHue = 1,
        HueSaturation = 2,
        SaturationHue = 3,
        SaturationValue = 4,
        ValueSaturation = 5,
    };
    enum class ColorSpectrumShape : int32_t
    {
        Box = 0,
        Ring = 1,
    };
    enum class ElementRealizationOptions : uint32_t
    {
        None = 0,
        ForceCreate = 0x1,
        SuppressAutoRecycle = 0x2,
    };
    enum class NavigationViewBackButtonVisible : int32_t
    {
        Collapsed = 0,
        Visible = 1,
        Auto = 2,
    };
    enum class NavigationViewDisplayMode : int32_t
    {
        Minimal = 0,
        Compact = 1,
        Expanded = 2,
    };
    enum class NavigationViewOverflowLabelMode : int32_t
    {
        MoreLabel = 0,
        NoLabel = 1,
    };
    enum class NavigationViewPaneDisplayMode : int32_t
    {
        Auto = 0,
        Left = 1,
        Top = 2,
        LeftCompact = 3,
        LeftMinimal = 4,
    };
    enum class NavigationViewSelectionFollowsFocus : int32_t
    {
        Disabled = 0,
        Enabled = 1,
    };
    enum class NavigationViewShoulderNavigationEnabled : int32_t
    {
        WhenSelectionFollowsFocus = 0,
        Always = 1,
        Never = 2,
    };
    enum class NumberBoxSpinButtonPlacementMode : int32_t
    {
        Hidden = 0,
        Compact = 1,
        Inline = 2,
    };
    enum class NumberBoxValidationMode : int32_t
    {
        InvalidInputOverwritten = 0,
        Disabled = 1,
    };
    enum class ParallaxSourceOffsetKind : int32_t
    {
        Absolute = 0,
        Relative = 1,
    };
    enum class RefreshPullDirection : int32_t
    {
        LeftToRight = 0,
        TopToBottom = 1,
        RightToLeft = 2,
        BottomToTop = 3,
    };
    enum class RefreshVisualizerOrientation : int32_t
    {
        Auto = 0,
        Normal = 1,
        Rotate90DegreesCounterclockwise = 2,
        Rotate270DegreesCounterclockwise = 3,
    };
    enum class RefreshVisualizerState : int32_t
    {
        Idle = 0,
        Peeking = 1,
        Interacting = 2,
        Pending = 3,
        Refreshing = 4,
    };
    enum class SwipeBehaviorOnInvoked : int32_t
    {
        Auto = 0,
        Close = 1,
        RemainOpen = 2,
    };
    enum class SwipeMode : int32_t
    {
        Reveal = 0,
        Execute = 1,
    };
    enum class TabViewCloseButtonOverlayMode : int32_t
    {
        Auto = 0,
        OnPointerOver = 1,
        Always = 2,
    };
    enum class TabViewWidthMode : int32_t
    {
        Equal = 0,
        SizeToContent = 1,
        Compact = 2,
    };
    enum class TeachingTipCloseReason : int32_t
    {
        CloseButton = 0,
        LightDismiss = 1,
        Programmatic = 2,
    };
    enum class TeachingTipHeroContentPlacementMode : int32_t
    {
        Auto = 0,
        Top = 1,
        Bottom = 2,
    };
    enum class TeachingTipPlacementMode : int32_t
    {
        Auto = 0,
        Top = 1,
        Bottom = 2,
        Left = 3,
        Right = 4,
        TopRight = 5,
        TopLeft = 6,
        BottomRight = 7,
        BottomLeft = 8,
        LeftTop = 9,
        LeftBottom = 10,
        RightTop = 11,
        RightBottom = 12,
        Center = 13,
    };
    enum class TeachingTipTailVisibility : int32_t
    {
        Auto = 0,
        Visible = 1,
        Collapsed = 2,
    };
    enum class TreeViewSelectionMode : int32_t
    {
        None = 0,
        Single = 1,
        Multiple = 2,
    };
    enum class TwoPaneViewMode : int32_t
    {
        SinglePane = 0,
        Wide = 1,
        Tall = 2,
    };
    enum class TwoPaneViewPriority : int32_t
    {
        Pane1 = 0,
        Pane2 = 1,
    };
    enum class TwoPaneViewTallModeConfiguration : int32_t
    {
        SinglePane = 0,
        TopBottom = 1,
        BottomTop = 2,
    };
    enum class TwoPaneViewWideModeConfiguration : int32_t
    {
        SinglePane = 0,
        LeftRight = 1,
        RightLeft = 2,
    };
    enum class UniformGridLayoutItemsJustification : int32_t
    {
        Start = 0,
        Center = 1,
        End = 2,
        SpaceAround = 3,
        SpaceBetween = 4,
        SpaceEvenly = 5,
    };
    enum class UniformGridLayoutItemsStretch : int32_t
    {
        None = 0,
        Fill = 1,
        Uniform = 2,
    };
    struct IAnimatedVisual;
    struct IAnimatedVisualPlayer;
    struct IAnimatedVisualPlayerFactory;
    struct IAnimatedVisualPlayerStatics;
    struct IAnimatedVisualSource;
    struct IBitmapIconSource;
    struct IBitmapIconSourceFactory;
    struct IBitmapIconSourceStatics;
    struct IColorChangedEventArgs;
    struct IColorPicker;
    struct IColorPickerFactory;
    struct IColorPickerStatics;
    struct ICommandBarFlyout;
    struct ICommandBarFlyoutFactory;
    struct IDropDownButton;
    struct IDropDownButtonFactory;
    struct IDynamicAnimatedVisualSource;
    struct IElementFactoryGetArgs;
    struct IElementFactoryRecycleArgs;
    struct IFontIconSource;
    struct IFontIconSourceFactory;
    struct IFontIconSourceStatics;
    struct IIconSource;
    struct IIconSourceFactory;
    struct IIconSourceStatics;
    struct IItemsRepeater;
    struct IItemsRepeaterElementClearingEventArgs;
    struct IItemsRepeaterElementIndexChangedEventArgs;
    struct IItemsRepeaterElementPreparedEventArgs;
    struct IItemsRepeaterFactory;
    struct IItemsRepeaterScrollHost;
    struct IItemsRepeaterStatics;
    struct IItemsSourceView;
    struct IItemsSourceViewFactory;
    struct IKeyIndexMapping;
    struct ILayout;
    struct ILayoutContext;
    struct ILayoutContextFactory;
    struct ILayoutContextOverrides;
    struct ILayoutFactory;
    struct ILayoutProtected;
    struct IMenuBar;
    struct IMenuBarFactory;
    struct IMenuBarItem;
    struct IMenuBarItemFactory;
    struct IMenuBarItemFlyout;
    struct IMenuBarItemFlyoutFactory;
    struct IMenuBarItemStatics;
    struct IMenuBarStatics;
    struct INavigationView;
    struct INavigationViewBackRequestedEventArgs;
    struct INavigationViewDisplayModeChangedEventArgs;
    struct INavigationViewFactory;
    struct INavigationViewItem;
    struct INavigationViewItemBase;
    struct INavigationViewItemBaseFactory;
    struct INavigationViewItemBaseStatics;
    struct INavigationViewItemCollapsedEventArgs;
    struct INavigationViewItemExpandingEventArgs;
    struct INavigationViewItemFactory;
    struct INavigationViewItemHeader;
    struct INavigationViewItemHeaderFactory;
    struct INavigationViewItemInvokedEventArgs;
    struct INavigationViewItemSeparator;
    struct INavigationViewItemSeparatorFactory;
    struct INavigationViewItemStatics;
    struct INavigationViewPaneClosingEventArgs;
    struct INavigationViewSelectionChangedEventArgs;
    struct INavigationViewStatics;
    struct INavigationViewTemplateSettings;
    struct INavigationViewTemplateSettingsFactory;
    struct INavigationViewTemplateSettingsStatics;
    struct INonVirtualizingLayout;
    struct INonVirtualizingLayoutContext;
    struct INonVirtualizingLayoutContextFactory;
    struct INonVirtualizingLayoutContextOverrides;
    struct INonVirtualizingLayoutFactory;
    struct INonVirtualizingLayoutOverrides;
    struct INumberBox;
    struct INumberBoxFactory;
    struct INumberBoxStatics;
    struct INumberBoxValueChangedEventArgs;
    struct IParallaxView;
    struct IParallaxViewFactory;
    struct IParallaxViewStatics;
    struct IPathIconSource;
    struct IPathIconSourceFactory;
    struct IPathIconSourceStatics;
    struct IPersonPicture;
    struct IPersonPictureFactory;
    struct IPersonPictureStatics;
    struct IPersonPictureTemplateSettings;
    struct IProgressBar;
    struct IProgressBarFactory;
    struct IProgressBarStatics;
    struct IProgressBarTemplateSettings;
    struct IProgressRing;
    struct IProgressRingFactory;
    struct IProgressRingStatics;
    struct IProgressRingTemplateSettings;
    struct IRadioButtons;
    struct IRadioButtonsFactory;
    struct IRadioButtonsStatics;
    struct IRadioMenuFlyoutItem;
    struct IRadioMenuFlyoutItemFactory;
    struct IRadioMenuFlyoutItemStatics;
    struct IRatingControl;
    struct IRatingControlFactory;
    struct IRatingControlStatics;
    struct IRatingItemFontInfo;
    struct IRatingItemFontInfoFactory;
    struct IRatingItemFontInfoStatics;
    struct IRatingItemImageInfo;
    struct IRatingItemImageInfoFactory;
    struct IRatingItemImageInfoStatics;
    struct IRatingItemInfo;
    struct IRatingItemInfoFactory;
    struct IRefreshContainer;
    struct IRefreshContainerFactory;
    struct IRefreshContainerStatics;
    struct IRefreshInteractionRatioChangedEventArgs;
    struct IRefreshRequestedEventArgs;
    struct IRefreshStateChangedEventArgs;
    struct IRefreshVisualizer;
    struct IRefreshVisualizerFactory;
    struct IRefreshVisualizerStatics;
    struct IRevealListViewItemPresenter;
    struct IRevealListViewItemPresenterFactory;
    struct ISplitButton;
    struct ISplitButtonClickEventArgs;
    struct ISplitButtonFactory;
    struct ISplitButtonStatics;
    struct IStackLayout;
    struct IStackLayoutFactory;
    struct IStackLayoutStatics;
    struct ISwipeControl;
    struct ISwipeControlFactory;
    struct ISwipeControlStatics;
    struct ISwipeItem;
    struct ISwipeItemFactory;
    struct ISwipeItemInvokedEventArgs;
    struct ISwipeItemStatics;
    struct ISwipeItems;
    struct ISwipeItemsFactory;
    struct ISwipeItemsStatics;
    struct ISymbolIconSource;
    struct ISymbolIconSourceFactory;
    struct ISymbolIconSourceStatics;
    struct ITabView;
    struct ITabViewFactory;
    struct ITabViewItem;
    struct ITabViewItemFactory;
    struct ITabViewItemStatics;
    struct ITabViewItemTemplateSettings;
    struct ITabViewItemTemplateSettingsFactory;
    struct ITabViewItemTemplateSettingsStatics;
    struct ITabViewStatics;
    struct ITabViewTabCloseRequestedEventArgs;
    struct ITabViewTabDragCompletedEventArgs;
    struct ITabViewTabDragStartingEventArgs;
    struct ITabViewTabDroppedOutsideEventArgs;
    struct ITeachingTip;
    struct ITeachingTipClosedEventArgs;
    struct ITeachingTipClosingEventArgs;
    struct ITeachingTipFactory;
    struct ITeachingTipStatics;
    struct ITeachingTipTemplateSettings;
    struct ITeachingTipTemplateSettingsFactory;
    struct ITeachingTipTemplateSettingsStatics;
    struct ITextCommandBarFlyout;
    struct ITextCommandBarFlyoutFactory;
    struct IToggleSplitButton;
    struct IToggleSplitButtonFactory;
    struct IToggleSplitButtonIsCheckedChangedEventArgs;
    struct IToggleSplitButtonStatics;
    struct ITreeView;
    struct ITreeViewCollapsedEventArgs;
    struct ITreeViewDragItemsCompletedEventArgs;
    struct ITreeViewDragItemsStartingEventArgs;
    struct ITreeViewExpandingEventArgs;
    struct ITreeViewFactory;
    struct ITreeViewItem;
    struct ITreeViewItemFactory;
    struct ITreeViewItemInvokedEventArgs;
    struct ITreeViewItemStatics;
    struct ITreeViewItemTemplateSettings;
    struct ITreeViewItemTemplateSettingsFactory;
    struct ITreeViewItemTemplateSettingsStatics;
    struct ITreeViewList;
    struct ITreeViewListFactory;
    struct ITreeViewNode;
    struct ITreeViewNodeFactory;
    struct ITreeViewNodeStatics;
    struct ITreeViewStatics;
    struct ITwoPaneView;
    struct ITwoPaneViewFactory;
    struct ITwoPaneViewStatics;
    struct IUniformGridLayout;
    struct IUniformGridLayoutFactory;
    struct IUniformGridLayoutStatics;
    struct IVirtualizingLayout;
    struct IVirtualizingLayoutContext;
    struct IVirtualizingLayoutContextFactory;
    struct IVirtualizingLayoutContextOverrides;
    struct IVirtualizingLayoutFactory;
    struct IVirtualizingLayoutOverrides;
    struct IXamlControlsResources;
    struct IXamlControlsResourcesStatics;
    struct AnimatedVisualPlayer;
    struct BitmapIconSource;
    struct ColorChangedEventArgs;
    struct ColorPicker;
    struct CommandBarFlyout;
    struct DropDownButton;
    struct ElementFactoryGetArgs;
    struct ElementFactoryRecycleArgs;
    struct FontIconSource;
    struct IconSource;
    struct ItemsRepeater;
    struct ItemsRepeaterElementClearingEventArgs;
    struct ItemsRepeaterElementIndexChangedEventArgs;
    struct ItemsRepeaterElementPreparedEventArgs;
    struct ItemsRepeaterScrollHost;
    struct ItemsSourceView;
    struct Layout;
    struct LayoutContext;
    struct MenuBar;
    struct MenuBarItem;
    struct MenuBarItemFlyout;
    struct NavigationView;
    struct NavigationViewBackRequestedEventArgs;
    struct NavigationViewDisplayModeChangedEventArgs;
    struct NavigationViewItem;
    struct NavigationViewItemBase;
    struct NavigationViewItemCollapsedEventArgs;
    struct NavigationViewItemExpandingEventArgs;
    struct NavigationViewItemHeader;
    struct NavigationViewItemInvokedEventArgs;
    struct NavigationViewItemSeparator;
    struct NavigationViewPaneClosingEventArgs;
    struct NavigationViewSelectionChangedEventArgs;
    struct NavigationViewTemplateSettings;
    struct NonVirtualizingLayout;
    struct NonVirtualizingLayoutContext;
    struct NumberBox;
    struct NumberBoxValueChangedEventArgs;
    struct ParallaxView;
    struct PathIconSource;
    struct PersonPicture;
    struct PersonPictureTemplateSettings;
    struct ProgressBar;
    struct ProgressBarTemplateSettings;
    struct ProgressRing;
    struct ProgressRingTemplateSettings;
    struct RadioButtons;
    struct RadioMenuFlyoutItem;
    struct RatingControl;
    struct RatingItemFontInfo;
    struct RatingItemImageInfo;
    struct RatingItemInfo;
    struct RefreshContainer;
    struct RefreshInteractionRatioChangedEventArgs;
    struct RefreshRequestedEventArgs;
    struct RefreshStateChangedEventArgs;
    struct RefreshVisualizer;
    struct RevealListViewItemPresenter;
    struct SplitButton;
    struct SplitButtonClickEventArgs;
    struct StackLayout;
    struct SwipeControl;
    struct SwipeItem;
    struct SwipeItemInvokedEventArgs;
    struct SwipeItems;
    struct SymbolIconSource;
    struct TabView;
    struct TabViewItem;
    struct TabViewItemTemplateSettings;
    struct TabViewTabCloseRequestedEventArgs;
    struct TabViewTabDragCompletedEventArgs;
    struct TabViewTabDragStartingEventArgs;
    struct TabViewTabDroppedOutsideEventArgs;
    struct TeachingTip;
    struct TeachingTipClosedEventArgs;
    struct TeachingTipClosingEventArgs;
    struct TeachingTipTemplateSettings;
    struct TextCommandBarFlyout;
    struct ToggleSplitButton;
    struct ToggleSplitButtonIsCheckedChangedEventArgs;
    struct TreeView;
    struct TreeViewCollapsedEventArgs;
    struct TreeViewDragItemsCompletedEventArgs;
    struct TreeViewDragItemsStartingEventArgs;
    struct TreeViewExpandingEventArgs;
    struct TreeViewItem;
    struct TreeViewItemInvokedEventArgs;
    struct TreeViewItemTemplateSettings;
    struct TreeViewList;
    struct TreeViewNode;
    struct TwoPaneView;
    struct UniformGridLayout;
    struct VirtualizingLayout;
    struct VirtualizingLayoutContext;
    struct XamlControlsResources;
}
namespace winrt::impl
{
    template <> struct category<Microsoft::UI::Xaml::Controls::IAnimatedVisual>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayer>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerStatics>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IAnimatedVisualSource>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IBitmapIconSource>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IBitmapIconSourceFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IBitmapIconSourceStatics>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IColorChangedEventArgs>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IColorPicker>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IColorPickerFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IColorPickerStatics>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ICommandBarFlyout>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ICommandBarFlyoutFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IDropDownButton>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IDropDownButtonFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IDynamicAnimatedVisualSource>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IElementFactoryGetArgs>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IElementFactoryRecycleArgs>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IFontIconSource>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IFontIconSourceFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IFontIconSourceStatics>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IIconSource>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IIconSourceFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IIconSourceStatics>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IItemsRepeater>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IItemsRepeaterElementClearingEventArgs>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IItemsRepeaterElementIndexChangedEventArgs>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IItemsRepeaterElementPreparedEventArgs>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IItemsRepeaterFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IItemsRepeaterScrollHost>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IItemsRepeaterStatics>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IItemsSourceView>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IItemsSourceViewFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IKeyIndexMapping>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ILayout>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ILayoutContext>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ILayoutContextFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ILayoutContextOverrides>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ILayoutFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ILayoutProtected>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IMenuBar>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IMenuBarFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IMenuBarItem>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IMenuBarItemFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IMenuBarItemFlyout>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IMenuBarItemFlyoutFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IMenuBarItemStatics>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IMenuBarStatics>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::INavigationView>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::INavigationViewBackRequestedEventArgs>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::INavigationViewDisplayModeChangedEventArgs>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::INavigationViewFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::INavigationViewItem>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::INavigationViewItemBase>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::INavigationViewItemBaseFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::INavigationViewItemBaseStatics>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::INavigationViewItemCollapsedEventArgs>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::INavigationViewItemExpandingEventArgs>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::INavigationViewItemFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::INavigationViewItemHeader>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::INavigationViewItemHeaderFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::INavigationViewItemInvokedEventArgs>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::INavigationViewItemSeparator>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::INavigationViewItemSeparatorFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::INavigationViewItemStatics>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::INavigationViewPaneClosingEventArgs>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::INavigationViewSelectionChangedEventArgs>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::INavigationViewStatics>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettings>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsStatics>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::INonVirtualizingLayout>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContext>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContextFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContextOverrides>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutOverrides>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::INumberBox>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::INumberBoxFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::INumberBoxStatics>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::INumberBoxValueChangedEventArgs>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IParallaxView>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IParallaxViewFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IParallaxViewStatics>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IPathIconSource>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IPathIconSourceFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IPathIconSourceStatics>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IPersonPicture>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IPersonPictureFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IPersonPictureStatics>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IPersonPictureTemplateSettings>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IProgressBar>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IProgressBarFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IProgressBarStatics>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IProgressBarTemplateSettings>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IProgressRing>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IProgressRingFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IProgressRingStatics>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IProgressRingTemplateSettings>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IRadioButtons>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IRadioButtonsFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IRadioButtonsStatics>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItem>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItemFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItemStatics>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IRatingControl>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IRatingControlFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IRatingControlStatics>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IRatingItemFontInfo>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IRatingItemFontInfoFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IRatingItemFontInfoStatics>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IRatingItemImageInfo>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IRatingItemImageInfoFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IRatingItemImageInfoStatics>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IRatingItemInfo>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IRatingItemInfoFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IRefreshContainer>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IRefreshContainerFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IRefreshContainerStatics>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IRefreshInteractionRatioChangedEventArgs>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IRefreshRequestedEventArgs>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IRefreshStateChangedEventArgs>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IRefreshVisualizer>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IRefreshVisualizerFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IRefreshVisualizerStatics>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IRevealListViewItemPresenter>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IRevealListViewItemPresenterFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ISplitButton>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ISplitButtonClickEventArgs>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ISplitButtonFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ISplitButtonStatics>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IStackLayout>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IStackLayoutFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IStackLayoutStatics>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ISwipeControl>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ISwipeControlFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ISwipeControlStatics>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ISwipeItem>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ISwipeItemFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ISwipeItemInvokedEventArgs>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ISwipeItemStatics>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ISwipeItems>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ISwipeItemsFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ISwipeItemsStatics>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ISymbolIconSource>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ISymbolIconSourceFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ISymbolIconSourceStatics>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ITabView>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ITabViewFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ITabViewItem>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ITabViewItemFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ITabViewItemStatics>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ITabViewItemTemplateSettings>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ITabViewItemTemplateSettingsFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ITabViewItemTemplateSettingsStatics>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ITabViewStatics>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ITabViewTabCloseRequestedEventArgs>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ITabViewTabDragCompletedEventArgs>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ITabViewTabDragStartingEventArgs>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ITabViewTabDroppedOutsideEventArgs>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ITeachingTip>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ITeachingTipClosedEventArgs>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ITeachingTipClosingEventArgs>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ITeachingTipFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ITeachingTipStatics>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettings>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettingsFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettingsStatics>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ITextCommandBarFlyout>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ITextCommandBarFlyoutFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IToggleSplitButton>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IToggleSplitButtonFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IToggleSplitButtonIsCheckedChangedEventArgs>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IToggleSplitButtonStatics>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ITreeView>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ITreeViewCollapsedEventArgs>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ITreeViewDragItemsCompletedEventArgs>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ITreeViewDragItemsStartingEventArgs>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ITreeViewExpandingEventArgs>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ITreeViewFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ITreeViewItem>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ITreeViewItemFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ITreeViewItemInvokedEventArgs>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ITreeViewItemStatics>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettings>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettingsFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettingsStatics>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ITreeViewList>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ITreeViewListFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ITreeViewNode>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ITreeViewNodeFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ITreeViewNodeStatics>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ITreeViewStatics>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ITwoPaneView>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ITwoPaneViewFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ITwoPaneViewStatics>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IUniformGridLayout>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IUniformGridLayoutFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IUniformGridLayoutStatics>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IVirtualizingLayout>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContext>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextOverrides>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IVirtualizingLayoutFactory>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IVirtualizingLayoutOverrides>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IXamlControlsResources>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IXamlControlsResourcesStatics>{ using type = interface_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::AnimatedVisualPlayer>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::BitmapIconSource>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ColorChangedEventArgs>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ColorPicker>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::CommandBarFlyout>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::DropDownButton>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ElementFactoryGetArgs>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ElementFactoryRecycleArgs>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::FontIconSource>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::IconSource>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ItemsRepeater>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ItemsRepeaterElementClearingEventArgs>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ItemsRepeaterElementIndexChangedEventArgs>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ItemsRepeaterElementPreparedEventArgs>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ItemsRepeaterScrollHost>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ItemsSourceView>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::Layout>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::LayoutContext>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::MenuBar>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::MenuBarItem>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::MenuBarItemFlyout>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::NavigationView>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::NavigationViewBackRequestedEventArgs>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::NavigationViewDisplayModeChangedEventArgs>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::NavigationViewItem>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::NavigationViewItemBase>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::NavigationViewItemCollapsedEventArgs>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::NavigationViewItemExpandingEventArgs>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::NavigationViewItemHeader>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::NavigationViewItemInvokedEventArgs>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::NavigationViewItemSeparator>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::NavigationViewPaneClosingEventArgs>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::NavigationViewSelectionChangedEventArgs>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::NavigationViewTemplateSettings>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::NonVirtualizingLayout>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::NonVirtualizingLayoutContext>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::NumberBox>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::NumberBoxValueChangedEventArgs>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ParallaxView>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::PathIconSource>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::PersonPicture>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::PersonPictureTemplateSettings>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ProgressBar>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ProgressBarTemplateSettings>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ProgressRing>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ProgressRingTemplateSettings>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::RadioButtons>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::RadioMenuFlyoutItem>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::RatingControl>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::RatingItemFontInfo>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::RatingItemImageInfo>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::RatingItemInfo>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::RefreshContainer>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::RefreshInteractionRatioChangedEventArgs>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::RefreshRequestedEventArgs>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::RefreshStateChangedEventArgs>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::RefreshVisualizer>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::RevealListViewItemPresenter>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::SplitButton>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::SplitButtonClickEventArgs>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::StackLayout>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::SwipeControl>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::SwipeItem>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::SwipeItemInvokedEventArgs>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::SwipeItems>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::SymbolIconSource>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::TabView>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::TabViewItem>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::TabViewItemTemplateSettings>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::TabViewTabCloseRequestedEventArgs>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::TabViewTabDragCompletedEventArgs>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::TabViewTabDragStartingEventArgs>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::TabViewTabDroppedOutsideEventArgs>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::TeachingTip>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::TeachingTipClosedEventArgs>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::TeachingTipClosingEventArgs>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::TeachingTipTemplateSettings>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::TextCommandBarFlyout>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ToggleSplitButton>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ToggleSplitButtonIsCheckedChangedEventArgs>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::TreeView>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::TreeViewCollapsedEventArgs>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::TreeViewDragItemsCompletedEventArgs>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::TreeViewDragItemsStartingEventArgs>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::TreeViewExpandingEventArgs>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::TreeViewItem>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::TreeViewItemInvokedEventArgs>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::TreeViewItemTemplateSettings>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::TreeViewList>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::TreeViewNode>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::TwoPaneView>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::UniformGridLayout>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::VirtualizingLayout>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::XamlControlsResources>{ using type = class_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ColorPickerHsvChannel>{ using type = enum_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ColorSpectrumComponents>{ using type = enum_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ColorSpectrumShape>{ using type = enum_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ElementRealizationOptions>{ using type = enum_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::NavigationViewBackButtonVisible>{ using type = enum_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::NavigationViewDisplayMode>{ using type = enum_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::NavigationViewOverflowLabelMode>{ using type = enum_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::NavigationViewPaneDisplayMode>{ using type = enum_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::NavigationViewSelectionFollowsFocus>{ using type = enum_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::NavigationViewShoulderNavigationEnabled>{ using type = enum_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::NumberBoxSpinButtonPlacementMode>{ using type = enum_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::NumberBoxValidationMode>{ using type = enum_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::ParallaxSourceOffsetKind>{ using type = enum_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::RefreshPullDirection>{ using type = enum_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::RefreshVisualizerOrientation>{ using type = enum_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::RefreshVisualizerState>{ using type = enum_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::SwipeBehaviorOnInvoked>{ using type = enum_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::SwipeMode>{ using type = enum_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::TabViewCloseButtonOverlayMode>{ using type = enum_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::TabViewWidthMode>{ using type = enum_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::TeachingTipCloseReason>{ using type = enum_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::TeachingTipHeroContentPlacementMode>{ using type = enum_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::TeachingTipPlacementMode>{ using type = enum_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::TeachingTipTailVisibility>{ using type = enum_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::TreeViewSelectionMode>{ using type = enum_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::TwoPaneViewMode>{ using type = enum_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::TwoPaneViewPriority>{ using type = enum_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::TwoPaneViewTallModeConfiguration>{ using type = enum_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::TwoPaneViewWideModeConfiguration>{ using type = enum_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::UniformGridLayoutItemsJustification>{ using type = enum_category; };
    template <> struct category<Microsoft::UI::Xaml::Controls::UniformGridLayoutItemsStretch>{ using type = enum_category; };
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::AnimatedVisualPlayer> = L"Microsoft.UI.Xaml.Controls.AnimatedVisualPlayer";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::BitmapIconSource> = L"Microsoft.UI.Xaml.Controls.BitmapIconSource";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ColorChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.ColorChangedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ColorPicker> = L"Microsoft.UI.Xaml.Controls.ColorPicker";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::CommandBarFlyout> = L"Microsoft.UI.Xaml.Controls.CommandBarFlyout";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::DropDownButton> = L"Microsoft.UI.Xaml.Controls.DropDownButton";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ElementFactoryGetArgs> = L"Microsoft.UI.Xaml.Controls.ElementFactoryGetArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ElementFactoryRecycleArgs> = L"Microsoft.UI.Xaml.Controls.ElementFactoryRecycleArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::FontIconSource> = L"Microsoft.UI.Xaml.Controls.FontIconSource";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IconSource> = L"Microsoft.UI.Xaml.Controls.IconSource";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ItemsRepeater> = L"Microsoft.UI.Xaml.Controls.ItemsRepeater";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ItemsRepeaterElementClearingEventArgs> = L"Microsoft.UI.Xaml.Controls.ItemsRepeaterElementClearingEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ItemsRepeaterElementIndexChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.ItemsRepeaterElementIndexChangedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ItemsRepeaterElementPreparedEventArgs> = L"Microsoft.UI.Xaml.Controls.ItemsRepeaterElementPreparedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ItemsRepeaterScrollHost> = L"Microsoft.UI.Xaml.Controls.ItemsRepeaterScrollHost";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ItemsSourceView> = L"Microsoft.UI.Xaml.Controls.ItemsSourceView";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::Layout> = L"Microsoft.UI.Xaml.Controls.Layout";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::LayoutContext> = L"Microsoft.UI.Xaml.Controls.LayoutContext";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::MenuBar> = L"Microsoft.UI.Xaml.Controls.MenuBar";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::MenuBarItem> = L"Microsoft.UI.Xaml.Controls.MenuBarItem";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::MenuBarItemFlyout> = L"Microsoft.UI.Xaml.Controls.MenuBarItemFlyout";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::NavigationView> = L"Microsoft.UI.Xaml.Controls.NavigationView";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::NavigationViewBackRequestedEventArgs> = L"Microsoft.UI.Xaml.Controls.NavigationViewBackRequestedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::NavigationViewDisplayModeChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.NavigationViewDisplayModeChangedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::NavigationViewItem> = L"Microsoft.UI.Xaml.Controls.NavigationViewItem";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::NavigationViewItemBase> = L"Microsoft.UI.Xaml.Controls.NavigationViewItemBase";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::NavigationViewItemCollapsedEventArgs> = L"Microsoft.UI.Xaml.Controls.NavigationViewItemCollapsedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::NavigationViewItemExpandingEventArgs> = L"Microsoft.UI.Xaml.Controls.NavigationViewItemExpandingEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::NavigationViewItemHeader> = L"Microsoft.UI.Xaml.Controls.NavigationViewItemHeader";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::NavigationViewItemInvokedEventArgs> = L"Microsoft.UI.Xaml.Controls.NavigationViewItemInvokedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::NavigationViewItemSeparator> = L"Microsoft.UI.Xaml.Controls.NavigationViewItemSeparator";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::NavigationViewPaneClosingEventArgs> = L"Microsoft.UI.Xaml.Controls.NavigationViewPaneClosingEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::NavigationViewSelectionChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.NavigationViewSelectionChangedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::NavigationViewTemplateSettings> = L"Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::NonVirtualizingLayout> = L"Microsoft.UI.Xaml.Controls.NonVirtualizingLayout";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::NonVirtualizingLayoutContext> = L"Microsoft.UI.Xaml.Controls.NonVirtualizingLayoutContext";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::NumberBox> = L"Microsoft.UI.Xaml.Controls.NumberBox";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::NumberBoxValueChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.NumberBoxValueChangedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ParallaxView> = L"Microsoft.UI.Xaml.Controls.ParallaxView";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::PathIconSource> = L"Microsoft.UI.Xaml.Controls.PathIconSource";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::PersonPicture> = L"Microsoft.UI.Xaml.Controls.PersonPicture";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::PersonPictureTemplateSettings> = L"Microsoft.UI.Xaml.Controls.PersonPictureTemplateSettings";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ProgressBar> = L"Microsoft.UI.Xaml.Controls.ProgressBar";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ProgressBarTemplateSettings> = L"Microsoft.UI.Xaml.Controls.ProgressBarTemplateSettings";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ProgressRing> = L"Microsoft.UI.Xaml.Controls.ProgressRing";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ProgressRingTemplateSettings> = L"Microsoft.UI.Xaml.Controls.ProgressRingTemplateSettings";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::RadioButtons> = L"Microsoft.UI.Xaml.Controls.RadioButtons";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::RadioMenuFlyoutItem> = L"Microsoft.UI.Xaml.Controls.RadioMenuFlyoutItem";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::RatingControl> = L"Microsoft.UI.Xaml.Controls.RatingControl";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::RatingItemFontInfo> = L"Microsoft.UI.Xaml.Controls.RatingItemFontInfo";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::RatingItemImageInfo> = L"Microsoft.UI.Xaml.Controls.RatingItemImageInfo";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::RatingItemInfo> = L"Microsoft.UI.Xaml.Controls.RatingItemInfo";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::RefreshContainer> = L"Microsoft.UI.Xaml.Controls.RefreshContainer";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::RefreshInteractionRatioChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.RefreshInteractionRatioChangedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::RefreshRequestedEventArgs> = L"Microsoft.UI.Xaml.Controls.RefreshRequestedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::RefreshStateChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.RefreshStateChangedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::RefreshVisualizer> = L"Microsoft.UI.Xaml.Controls.RefreshVisualizer";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::RevealListViewItemPresenter> = L"Microsoft.UI.Xaml.Controls.RevealListViewItemPresenter";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::SplitButton> = L"Microsoft.UI.Xaml.Controls.SplitButton";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::SplitButtonClickEventArgs> = L"Microsoft.UI.Xaml.Controls.SplitButtonClickEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::StackLayout> = L"Microsoft.UI.Xaml.Controls.StackLayout";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::SwipeControl> = L"Microsoft.UI.Xaml.Controls.SwipeControl";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::SwipeItem> = L"Microsoft.UI.Xaml.Controls.SwipeItem";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::SwipeItemInvokedEventArgs> = L"Microsoft.UI.Xaml.Controls.SwipeItemInvokedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::SwipeItems> = L"Microsoft.UI.Xaml.Controls.SwipeItems";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::SymbolIconSource> = L"Microsoft.UI.Xaml.Controls.SymbolIconSource";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::TabView> = L"Microsoft.UI.Xaml.Controls.TabView";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::TabViewItem> = L"Microsoft.UI.Xaml.Controls.TabViewItem";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::TabViewItemTemplateSettings> = L"Microsoft.UI.Xaml.Controls.TabViewItemTemplateSettings";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::TabViewTabCloseRequestedEventArgs> = L"Microsoft.UI.Xaml.Controls.TabViewTabCloseRequestedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::TabViewTabDragCompletedEventArgs> = L"Microsoft.UI.Xaml.Controls.TabViewTabDragCompletedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::TabViewTabDragStartingEventArgs> = L"Microsoft.UI.Xaml.Controls.TabViewTabDragStartingEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::TabViewTabDroppedOutsideEventArgs> = L"Microsoft.UI.Xaml.Controls.TabViewTabDroppedOutsideEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::TeachingTip> = L"Microsoft.UI.Xaml.Controls.TeachingTip";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::TeachingTipClosedEventArgs> = L"Microsoft.UI.Xaml.Controls.TeachingTipClosedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::TeachingTipClosingEventArgs> = L"Microsoft.UI.Xaml.Controls.TeachingTipClosingEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::TeachingTipTemplateSettings> = L"Microsoft.UI.Xaml.Controls.TeachingTipTemplateSettings";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::TextCommandBarFlyout> = L"Microsoft.UI.Xaml.Controls.TextCommandBarFlyout";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ToggleSplitButton> = L"Microsoft.UI.Xaml.Controls.ToggleSplitButton";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ToggleSplitButtonIsCheckedChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.ToggleSplitButtonIsCheckedChangedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::TreeView> = L"Microsoft.UI.Xaml.Controls.TreeView";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::TreeViewCollapsedEventArgs> = L"Microsoft.UI.Xaml.Controls.TreeViewCollapsedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::TreeViewDragItemsCompletedEventArgs> = L"Microsoft.UI.Xaml.Controls.TreeViewDragItemsCompletedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::TreeViewDragItemsStartingEventArgs> = L"Microsoft.UI.Xaml.Controls.TreeViewDragItemsStartingEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::TreeViewExpandingEventArgs> = L"Microsoft.UI.Xaml.Controls.TreeViewExpandingEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::TreeViewItem> = L"Microsoft.UI.Xaml.Controls.TreeViewItem";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::TreeViewItemInvokedEventArgs> = L"Microsoft.UI.Xaml.Controls.TreeViewItemInvokedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::TreeViewItemTemplateSettings> = L"Microsoft.UI.Xaml.Controls.TreeViewItemTemplateSettings";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::TreeViewList> = L"Microsoft.UI.Xaml.Controls.TreeViewList";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::TreeViewNode> = L"Microsoft.UI.Xaml.Controls.TreeViewNode";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::TwoPaneView> = L"Microsoft.UI.Xaml.Controls.TwoPaneView";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::UniformGridLayout> = L"Microsoft.UI.Xaml.Controls.UniformGridLayout";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::VirtualizingLayout> = L"Microsoft.UI.Xaml.Controls.VirtualizingLayout";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext> = L"Microsoft.UI.Xaml.Controls.VirtualizingLayoutContext";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::XamlControlsResources> = L"Microsoft.UI.Xaml.Controls.XamlControlsResources";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ColorPickerHsvChannel> = L"Microsoft.UI.Xaml.Controls.ColorPickerHsvChannel";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ColorSpectrumComponents> = L"Microsoft.UI.Xaml.Controls.ColorSpectrumComponents";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ColorSpectrumShape> = L"Microsoft.UI.Xaml.Controls.ColorSpectrumShape";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ElementRealizationOptions> = L"Microsoft.UI.Xaml.Controls.ElementRealizationOptions";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::NavigationViewBackButtonVisible> = L"Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::NavigationViewDisplayMode> = L"Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::NavigationViewOverflowLabelMode> = L"Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::NavigationViewPaneDisplayMode> = L"Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::NavigationViewSelectionFollowsFocus> = L"Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::NavigationViewShoulderNavigationEnabled> = L"Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::NumberBoxSpinButtonPlacementMode> = L"Microsoft.UI.Xaml.Controls.NumberBoxSpinButtonPlacementMode";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::NumberBoxValidationMode> = L"Microsoft.UI.Xaml.Controls.NumberBoxValidationMode";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ParallaxSourceOffsetKind> = L"Microsoft.UI.Xaml.Controls.ParallaxSourceOffsetKind";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::RefreshPullDirection> = L"Microsoft.UI.Xaml.Controls.RefreshPullDirection";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::RefreshVisualizerOrientation> = L"Microsoft.UI.Xaml.Controls.RefreshVisualizerOrientation";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::RefreshVisualizerState> = L"Microsoft.UI.Xaml.Controls.RefreshVisualizerState";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::SwipeBehaviorOnInvoked> = L"Microsoft.UI.Xaml.Controls.SwipeBehaviorOnInvoked";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::SwipeMode> = L"Microsoft.UI.Xaml.Controls.SwipeMode";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::TabViewCloseButtonOverlayMode> = L"Microsoft.UI.Xaml.Controls.TabViewCloseButtonOverlayMode";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::TabViewWidthMode> = L"Microsoft.UI.Xaml.Controls.TabViewWidthMode";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::TeachingTipCloseReason> = L"Microsoft.UI.Xaml.Controls.TeachingTipCloseReason";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::TeachingTipHeroContentPlacementMode> = L"Microsoft.UI.Xaml.Controls.TeachingTipHeroContentPlacementMode";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::TeachingTipPlacementMode> = L"Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::TeachingTipTailVisibility> = L"Microsoft.UI.Xaml.Controls.TeachingTipTailVisibility";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::TreeViewSelectionMode> = L"Microsoft.UI.Xaml.Controls.TreeViewSelectionMode";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::TwoPaneViewMode> = L"Microsoft.UI.Xaml.Controls.TwoPaneViewMode";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::TwoPaneViewPriority> = L"Microsoft.UI.Xaml.Controls.TwoPaneViewPriority";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::TwoPaneViewTallModeConfiguration> = L"Microsoft.UI.Xaml.Controls.TwoPaneViewTallModeConfiguration";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::TwoPaneViewWideModeConfiguration> = L"Microsoft.UI.Xaml.Controls.TwoPaneViewWideModeConfiguration";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::UniformGridLayoutItemsJustification> = L"Microsoft.UI.Xaml.Controls.UniformGridLayoutItemsJustification";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::UniformGridLayoutItemsStretch> = L"Microsoft.UI.Xaml.Controls.UniformGridLayoutItemsStretch";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IAnimatedVisual> = L"Microsoft.UI.Xaml.Controls.IAnimatedVisual";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayer> = L"Microsoft.UI.Xaml.Controls.IAnimatedVisualPlayer";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerFactory> = L"Microsoft.UI.Xaml.Controls.IAnimatedVisualPlayerFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerStatics> = L"Microsoft.UI.Xaml.Controls.IAnimatedVisualPlayerStatics";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IAnimatedVisualSource> = L"Microsoft.UI.Xaml.Controls.IAnimatedVisualSource";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IBitmapIconSource> = L"Microsoft.UI.Xaml.Controls.IBitmapIconSource";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IBitmapIconSourceFactory> = L"Microsoft.UI.Xaml.Controls.IBitmapIconSourceFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IBitmapIconSourceStatics> = L"Microsoft.UI.Xaml.Controls.IBitmapIconSourceStatics";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IColorChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.IColorChangedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IColorPicker> = L"Microsoft.UI.Xaml.Controls.IColorPicker";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IColorPickerFactory> = L"Microsoft.UI.Xaml.Controls.IColorPickerFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IColorPickerStatics> = L"Microsoft.UI.Xaml.Controls.IColorPickerStatics";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ICommandBarFlyout> = L"Microsoft.UI.Xaml.Controls.ICommandBarFlyout";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ICommandBarFlyoutFactory> = L"Microsoft.UI.Xaml.Controls.ICommandBarFlyoutFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IDropDownButton> = L"Microsoft.UI.Xaml.Controls.IDropDownButton";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IDropDownButtonFactory> = L"Microsoft.UI.Xaml.Controls.IDropDownButtonFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IDynamicAnimatedVisualSource> = L"Microsoft.UI.Xaml.Controls.IDynamicAnimatedVisualSource";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IElementFactoryGetArgs> = L"Microsoft.UI.Xaml.Controls.IElementFactoryGetArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IElementFactoryRecycleArgs> = L"Microsoft.UI.Xaml.Controls.IElementFactoryRecycleArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IFontIconSource> = L"Microsoft.UI.Xaml.Controls.IFontIconSource";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IFontIconSourceFactory> = L"Microsoft.UI.Xaml.Controls.IFontIconSourceFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IFontIconSourceStatics> = L"Microsoft.UI.Xaml.Controls.IFontIconSourceStatics";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IIconSource> = L"Microsoft.UI.Xaml.Controls.IIconSource";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IIconSourceFactory> = L"Microsoft.UI.Xaml.Controls.IIconSourceFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IIconSourceStatics> = L"Microsoft.UI.Xaml.Controls.IIconSourceStatics";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IItemsRepeater> = L"Microsoft.UI.Xaml.Controls.IItemsRepeater";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IItemsRepeaterElementClearingEventArgs> = L"Microsoft.UI.Xaml.Controls.IItemsRepeaterElementClearingEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IItemsRepeaterElementIndexChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.IItemsRepeaterElementIndexChangedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IItemsRepeaterElementPreparedEventArgs> = L"Microsoft.UI.Xaml.Controls.IItemsRepeaterElementPreparedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IItemsRepeaterFactory> = L"Microsoft.UI.Xaml.Controls.IItemsRepeaterFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IItemsRepeaterScrollHost> = L"Microsoft.UI.Xaml.Controls.IItemsRepeaterScrollHost";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IItemsRepeaterStatics> = L"Microsoft.UI.Xaml.Controls.IItemsRepeaterStatics";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IItemsSourceView> = L"Microsoft.UI.Xaml.Controls.IItemsSourceView";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IItemsSourceViewFactory> = L"Microsoft.UI.Xaml.Controls.IItemsSourceViewFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IKeyIndexMapping> = L"Microsoft.UI.Xaml.Controls.IKeyIndexMapping";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ILayout> = L"Microsoft.UI.Xaml.Controls.ILayout";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ILayoutContext> = L"Microsoft.UI.Xaml.Controls.ILayoutContext";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ILayoutContextFactory> = L"Microsoft.UI.Xaml.Controls.ILayoutContextFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ILayoutContextOverrides> = L"Microsoft.UI.Xaml.Controls.ILayoutContextOverrides";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ILayoutFactory> = L"Microsoft.UI.Xaml.Controls.ILayoutFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ILayoutProtected> = L"Microsoft.UI.Xaml.Controls.ILayoutProtected";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IMenuBar> = L"Microsoft.UI.Xaml.Controls.IMenuBar";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IMenuBarFactory> = L"Microsoft.UI.Xaml.Controls.IMenuBarFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IMenuBarItem> = L"Microsoft.UI.Xaml.Controls.IMenuBarItem";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IMenuBarItemFactory> = L"Microsoft.UI.Xaml.Controls.IMenuBarItemFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IMenuBarItemFlyout> = L"Microsoft.UI.Xaml.Controls.IMenuBarItemFlyout";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IMenuBarItemFlyoutFactory> = L"Microsoft.UI.Xaml.Controls.IMenuBarItemFlyoutFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IMenuBarItemStatics> = L"Microsoft.UI.Xaml.Controls.IMenuBarItemStatics";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IMenuBarStatics> = L"Microsoft.UI.Xaml.Controls.IMenuBarStatics";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::INavigationView> = L"Microsoft.UI.Xaml.Controls.INavigationView";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::INavigationViewBackRequestedEventArgs> = L"Microsoft.UI.Xaml.Controls.INavigationViewBackRequestedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::INavigationViewDisplayModeChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.INavigationViewDisplayModeChangedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::INavigationViewFactory> = L"Microsoft.UI.Xaml.Controls.INavigationViewFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::INavigationViewItem> = L"Microsoft.UI.Xaml.Controls.INavigationViewItem";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::INavigationViewItemBase> = L"Microsoft.UI.Xaml.Controls.INavigationViewItemBase";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::INavigationViewItemBaseFactory> = L"Microsoft.UI.Xaml.Controls.INavigationViewItemBaseFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::INavigationViewItemBaseStatics> = L"Microsoft.UI.Xaml.Controls.INavigationViewItemBaseStatics";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::INavigationViewItemCollapsedEventArgs> = L"Microsoft.UI.Xaml.Controls.INavigationViewItemCollapsedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::INavigationViewItemExpandingEventArgs> = L"Microsoft.UI.Xaml.Controls.INavigationViewItemExpandingEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::INavigationViewItemFactory> = L"Microsoft.UI.Xaml.Controls.INavigationViewItemFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::INavigationViewItemHeader> = L"Microsoft.UI.Xaml.Controls.INavigationViewItemHeader";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::INavigationViewItemHeaderFactory> = L"Microsoft.UI.Xaml.Controls.INavigationViewItemHeaderFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::INavigationViewItemInvokedEventArgs> = L"Microsoft.UI.Xaml.Controls.INavigationViewItemInvokedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::INavigationViewItemSeparator> = L"Microsoft.UI.Xaml.Controls.INavigationViewItemSeparator";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::INavigationViewItemSeparatorFactory> = L"Microsoft.UI.Xaml.Controls.INavigationViewItemSeparatorFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::INavigationViewItemStatics> = L"Microsoft.UI.Xaml.Controls.INavigationViewItemStatics";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::INavigationViewPaneClosingEventArgs> = L"Microsoft.UI.Xaml.Controls.INavigationViewPaneClosingEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::INavigationViewSelectionChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.INavigationViewSelectionChangedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::INavigationViewStatics> = L"Microsoft.UI.Xaml.Controls.INavigationViewStatics";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettings> = L"Microsoft.UI.Xaml.Controls.INavigationViewTemplateSettings";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsFactory> = L"Microsoft.UI.Xaml.Controls.INavigationViewTemplateSettingsFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsStatics> = L"Microsoft.UI.Xaml.Controls.INavigationViewTemplateSettingsStatics";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::INonVirtualizingLayout> = L"Microsoft.UI.Xaml.Controls.INonVirtualizingLayout";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContext> = L"Microsoft.UI.Xaml.Controls.INonVirtualizingLayoutContext";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContextFactory> = L"Microsoft.UI.Xaml.Controls.INonVirtualizingLayoutContextFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContextOverrides> = L"Microsoft.UI.Xaml.Controls.INonVirtualizingLayoutContextOverrides";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutFactory> = L"Microsoft.UI.Xaml.Controls.INonVirtualizingLayoutFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutOverrides> = L"Microsoft.UI.Xaml.Controls.INonVirtualizingLayoutOverrides";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::INumberBox> = L"Microsoft.UI.Xaml.Controls.INumberBox";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::INumberBoxFactory> = L"Microsoft.UI.Xaml.Controls.INumberBoxFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::INumberBoxStatics> = L"Microsoft.UI.Xaml.Controls.INumberBoxStatics";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::INumberBoxValueChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.INumberBoxValueChangedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IParallaxView> = L"Microsoft.UI.Xaml.Controls.IParallaxView";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IParallaxViewFactory> = L"Microsoft.UI.Xaml.Controls.IParallaxViewFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IParallaxViewStatics> = L"Microsoft.UI.Xaml.Controls.IParallaxViewStatics";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IPathIconSource> = L"Microsoft.UI.Xaml.Controls.IPathIconSource";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IPathIconSourceFactory> = L"Microsoft.UI.Xaml.Controls.IPathIconSourceFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IPathIconSourceStatics> = L"Microsoft.UI.Xaml.Controls.IPathIconSourceStatics";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IPersonPicture> = L"Microsoft.UI.Xaml.Controls.IPersonPicture";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IPersonPictureFactory> = L"Microsoft.UI.Xaml.Controls.IPersonPictureFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IPersonPictureStatics> = L"Microsoft.UI.Xaml.Controls.IPersonPictureStatics";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IPersonPictureTemplateSettings> = L"Microsoft.UI.Xaml.Controls.IPersonPictureTemplateSettings";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IProgressBar> = L"Microsoft.UI.Xaml.Controls.IProgressBar";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IProgressBarFactory> = L"Microsoft.UI.Xaml.Controls.IProgressBarFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IProgressBarStatics> = L"Microsoft.UI.Xaml.Controls.IProgressBarStatics";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IProgressBarTemplateSettings> = L"Microsoft.UI.Xaml.Controls.IProgressBarTemplateSettings";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IProgressRing> = L"Microsoft.UI.Xaml.Controls.IProgressRing";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IProgressRingFactory> = L"Microsoft.UI.Xaml.Controls.IProgressRingFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IProgressRingStatics> = L"Microsoft.UI.Xaml.Controls.IProgressRingStatics";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IProgressRingTemplateSettings> = L"Microsoft.UI.Xaml.Controls.IProgressRingTemplateSettings";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IRadioButtons> = L"Microsoft.UI.Xaml.Controls.IRadioButtons";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IRadioButtonsFactory> = L"Microsoft.UI.Xaml.Controls.IRadioButtonsFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IRadioButtonsStatics> = L"Microsoft.UI.Xaml.Controls.IRadioButtonsStatics";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItem> = L"Microsoft.UI.Xaml.Controls.IRadioMenuFlyoutItem";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItemFactory> = L"Microsoft.UI.Xaml.Controls.IRadioMenuFlyoutItemFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItemStatics> = L"Microsoft.UI.Xaml.Controls.IRadioMenuFlyoutItemStatics";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IRatingControl> = L"Microsoft.UI.Xaml.Controls.IRatingControl";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IRatingControlFactory> = L"Microsoft.UI.Xaml.Controls.IRatingControlFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IRatingControlStatics> = L"Microsoft.UI.Xaml.Controls.IRatingControlStatics";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IRatingItemFontInfo> = L"Microsoft.UI.Xaml.Controls.IRatingItemFontInfo";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IRatingItemFontInfoFactory> = L"Microsoft.UI.Xaml.Controls.IRatingItemFontInfoFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IRatingItemFontInfoStatics> = L"Microsoft.UI.Xaml.Controls.IRatingItemFontInfoStatics";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IRatingItemImageInfo> = L"Microsoft.UI.Xaml.Controls.IRatingItemImageInfo";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IRatingItemImageInfoFactory> = L"Microsoft.UI.Xaml.Controls.IRatingItemImageInfoFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IRatingItemImageInfoStatics> = L"Microsoft.UI.Xaml.Controls.IRatingItemImageInfoStatics";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IRatingItemInfo> = L"Microsoft.UI.Xaml.Controls.IRatingItemInfo";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IRatingItemInfoFactory> = L"Microsoft.UI.Xaml.Controls.IRatingItemInfoFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IRefreshContainer> = L"Microsoft.UI.Xaml.Controls.IRefreshContainer";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IRefreshContainerFactory> = L"Microsoft.UI.Xaml.Controls.IRefreshContainerFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IRefreshContainerStatics> = L"Microsoft.UI.Xaml.Controls.IRefreshContainerStatics";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IRefreshInteractionRatioChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.IRefreshInteractionRatioChangedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IRefreshRequestedEventArgs> = L"Microsoft.UI.Xaml.Controls.IRefreshRequestedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IRefreshStateChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.IRefreshStateChangedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IRefreshVisualizer> = L"Microsoft.UI.Xaml.Controls.IRefreshVisualizer";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IRefreshVisualizerFactory> = L"Microsoft.UI.Xaml.Controls.IRefreshVisualizerFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IRefreshVisualizerStatics> = L"Microsoft.UI.Xaml.Controls.IRefreshVisualizerStatics";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IRevealListViewItemPresenter> = L"Microsoft.UI.Xaml.Controls.IRevealListViewItemPresenter";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IRevealListViewItemPresenterFactory> = L"Microsoft.UI.Xaml.Controls.IRevealListViewItemPresenterFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ISplitButton> = L"Microsoft.UI.Xaml.Controls.ISplitButton";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ISplitButtonClickEventArgs> = L"Microsoft.UI.Xaml.Controls.ISplitButtonClickEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ISplitButtonFactory> = L"Microsoft.UI.Xaml.Controls.ISplitButtonFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ISplitButtonStatics> = L"Microsoft.UI.Xaml.Controls.ISplitButtonStatics";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IStackLayout> = L"Microsoft.UI.Xaml.Controls.IStackLayout";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IStackLayoutFactory> = L"Microsoft.UI.Xaml.Controls.IStackLayoutFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IStackLayoutStatics> = L"Microsoft.UI.Xaml.Controls.IStackLayoutStatics";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ISwipeControl> = L"Microsoft.UI.Xaml.Controls.ISwipeControl";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ISwipeControlFactory> = L"Microsoft.UI.Xaml.Controls.ISwipeControlFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ISwipeControlStatics> = L"Microsoft.UI.Xaml.Controls.ISwipeControlStatics";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ISwipeItem> = L"Microsoft.UI.Xaml.Controls.ISwipeItem";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ISwipeItemFactory> = L"Microsoft.UI.Xaml.Controls.ISwipeItemFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ISwipeItemInvokedEventArgs> = L"Microsoft.UI.Xaml.Controls.ISwipeItemInvokedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ISwipeItemStatics> = L"Microsoft.UI.Xaml.Controls.ISwipeItemStatics";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ISwipeItems> = L"Microsoft.UI.Xaml.Controls.ISwipeItems";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ISwipeItemsFactory> = L"Microsoft.UI.Xaml.Controls.ISwipeItemsFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ISwipeItemsStatics> = L"Microsoft.UI.Xaml.Controls.ISwipeItemsStatics";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ISymbolIconSource> = L"Microsoft.UI.Xaml.Controls.ISymbolIconSource";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ISymbolIconSourceFactory> = L"Microsoft.UI.Xaml.Controls.ISymbolIconSourceFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ISymbolIconSourceStatics> = L"Microsoft.UI.Xaml.Controls.ISymbolIconSourceStatics";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ITabView> = L"Microsoft.UI.Xaml.Controls.ITabView";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ITabViewFactory> = L"Microsoft.UI.Xaml.Controls.ITabViewFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ITabViewItem> = L"Microsoft.UI.Xaml.Controls.ITabViewItem";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ITabViewItemFactory> = L"Microsoft.UI.Xaml.Controls.ITabViewItemFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ITabViewItemStatics> = L"Microsoft.UI.Xaml.Controls.ITabViewItemStatics";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ITabViewItemTemplateSettings> = L"Microsoft.UI.Xaml.Controls.ITabViewItemTemplateSettings";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ITabViewItemTemplateSettingsFactory> = L"Microsoft.UI.Xaml.Controls.ITabViewItemTemplateSettingsFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ITabViewItemTemplateSettingsStatics> = L"Microsoft.UI.Xaml.Controls.ITabViewItemTemplateSettingsStatics";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ITabViewStatics> = L"Microsoft.UI.Xaml.Controls.ITabViewStatics";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ITabViewTabCloseRequestedEventArgs> = L"Microsoft.UI.Xaml.Controls.ITabViewTabCloseRequestedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ITabViewTabDragCompletedEventArgs> = L"Microsoft.UI.Xaml.Controls.ITabViewTabDragCompletedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ITabViewTabDragStartingEventArgs> = L"Microsoft.UI.Xaml.Controls.ITabViewTabDragStartingEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ITabViewTabDroppedOutsideEventArgs> = L"Microsoft.UI.Xaml.Controls.ITabViewTabDroppedOutsideEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ITeachingTip> = L"Microsoft.UI.Xaml.Controls.ITeachingTip";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ITeachingTipClosedEventArgs> = L"Microsoft.UI.Xaml.Controls.ITeachingTipClosedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ITeachingTipClosingEventArgs> = L"Microsoft.UI.Xaml.Controls.ITeachingTipClosingEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ITeachingTipFactory> = L"Microsoft.UI.Xaml.Controls.ITeachingTipFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ITeachingTipStatics> = L"Microsoft.UI.Xaml.Controls.ITeachingTipStatics";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettings> = L"Microsoft.UI.Xaml.Controls.ITeachingTipTemplateSettings";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettingsFactory> = L"Microsoft.UI.Xaml.Controls.ITeachingTipTemplateSettingsFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettingsStatics> = L"Microsoft.UI.Xaml.Controls.ITeachingTipTemplateSettingsStatics";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ITextCommandBarFlyout> = L"Microsoft.UI.Xaml.Controls.ITextCommandBarFlyout";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ITextCommandBarFlyoutFactory> = L"Microsoft.UI.Xaml.Controls.ITextCommandBarFlyoutFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IToggleSplitButton> = L"Microsoft.UI.Xaml.Controls.IToggleSplitButton";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IToggleSplitButtonFactory> = L"Microsoft.UI.Xaml.Controls.IToggleSplitButtonFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IToggleSplitButtonIsCheckedChangedEventArgs> = L"Microsoft.UI.Xaml.Controls.IToggleSplitButtonIsCheckedChangedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IToggleSplitButtonStatics> = L"Microsoft.UI.Xaml.Controls.IToggleSplitButtonStatics";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ITreeView> = L"Microsoft.UI.Xaml.Controls.ITreeView";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ITreeViewCollapsedEventArgs> = L"Microsoft.UI.Xaml.Controls.ITreeViewCollapsedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ITreeViewDragItemsCompletedEventArgs> = L"Microsoft.UI.Xaml.Controls.ITreeViewDragItemsCompletedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ITreeViewDragItemsStartingEventArgs> = L"Microsoft.UI.Xaml.Controls.ITreeViewDragItemsStartingEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ITreeViewExpandingEventArgs> = L"Microsoft.UI.Xaml.Controls.ITreeViewExpandingEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ITreeViewFactory> = L"Microsoft.UI.Xaml.Controls.ITreeViewFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ITreeViewItem> = L"Microsoft.UI.Xaml.Controls.ITreeViewItem";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ITreeViewItemFactory> = L"Microsoft.UI.Xaml.Controls.ITreeViewItemFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ITreeViewItemInvokedEventArgs> = L"Microsoft.UI.Xaml.Controls.ITreeViewItemInvokedEventArgs";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ITreeViewItemStatics> = L"Microsoft.UI.Xaml.Controls.ITreeViewItemStatics";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettings> = L"Microsoft.UI.Xaml.Controls.ITreeViewItemTemplateSettings";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettingsFactory> = L"Microsoft.UI.Xaml.Controls.ITreeViewItemTemplateSettingsFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettingsStatics> = L"Microsoft.UI.Xaml.Controls.ITreeViewItemTemplateSettingsStatics";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ITreeViewList> = L"Microsoft.UI.Xaml.Controls.ITreeViewList";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ITreeViewListFactory> = L"Microsoft.UI.Xaml.Controls.ITreeViewListFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ITreeViewNode> = L"Microsoft.UI.Xaml.Controls.ITreeViewNode";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ITreeViewNodeFactory> = L"Microsoft.UI.Xaml.Controls.ITreeViewNodeFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ITreeViewNodeStatics> = L"Microsoft.UI.Xaml.Controls.ITreeViewNodeStatics";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ITreeViewStatics> = L"Microsoft.UI.Xaml.Controls.ITreeViewStatics";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ITwoPaneView> = L"Microsoft.UI.Xaml.Controls.ITwoPaneView";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ITwoPaneViewFactory> = L"Microsoft.UI.Xaml.Controls.ITwoPaneViewFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::ITwoPaneViewStatics> = L"Microsoft.UI.Xaml.Controls.ITwoPaneViewStatics";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IUniformGridLayout> = L"Microsoft.UI.Xaml.Controls.IUniformGridLayout";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IUniformGridLayoutFactory> = L"Microsoft.UI.Xaml.Controls.IUniformGridLayoutFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IUniformGridLayoutStatics> = L"Microsoft.UI.Xaml.Controls.IUniformGridLayoutStatics";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IVirtualizingLayout> = L"Microsoft.UI.Xaml.Controls.IVirtualizingLayout";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContext> = L"Microsoft.UI.Xaml.Controls.IVirtualizingLayoutContext";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextFactory> = L"Microsoft.UI.Xaml.Controls.IVirtualizingLayoutContextFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextOverrides> = L"Microsoft.UI.Xaml.Controls.IVirtualizingLayoutContextOverrides";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IVirtualizingLayoutFactory> = L"Microsoft.UI.Xaml.Controls.IVirtualizingLayoutFactory";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IVirtualizingLayoutOverrides> = L"Microsoft.UI.Xaml.Controls.IVirtualizingLayoutOverrides";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IXamlControlsResources> = L"Microsoft.UI.Xaml.Controls.IXamlControlsResources";
    template <> inline constexpr auto& name_v<Microsoft::UI::Xaml::Controls::IXamlControlsResourcesStatics> = L"Microsoft.UI.Xaml.Controls.IXamlControlsResourcesStatics";
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IAnimatedVisual>{ 0x84100919,0x9E15,0x5106,{ 0x96,0x47,0x96,0x54,0xED,0xE3,0x35,0xDE } }; // 84100919-9E15-5106-9647-9654EDE335DE
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayer>{ 0xBF7F8865,0x7B79,0x5354,{ 0x97,0x88,0xC2,0x1E,0x52,0x35,0x91,0xEA } }; // BF7F8865-7B79-5354-9788-C21E523591EA
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerFactory>{ 0xEBC0C6E6,0xC91A,0x5025,{ 0xB4,0xA4,0xE7,0x86,0xD8,0x3B,0xE1,0xD8 } }; // EBC0C6E6-C91A-5025-B4A4-E786D83BE1D8
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerStatics>{ 0xA4ADBA25,0xA34C,0x5D7A,{ 0xBD,0x40,0x61,0xE0,0xDD,0xCA,0x12,0x98 } }; // A4ADBA25-A34C-5D7A-BD40-61E0DDCA1298
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IAnimatedVisualSource>{ 0x57AF690E,0xB331,0x5462,{ 0x8C,0xC6,0xC5,0x29,0xA5,0xDA,0x41,0x23 } }; // 57AF690E-B331-5462-8CC6-C529A5DA4123
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IBitmapIconSource>{ 0xA6B6CCCC,0xEA8F,0x53CA,{ 0x83,0x1F,0x2A,0xBE,0x85,0xCD,0x6D,0x8C } }; // A6B6CCCC-EA8F-53CA-831F-2ABE85CD6D8C
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IBitmapIconSourceFactory>{ 0x7D484C14,0xF5F6,0x5E39,{ 0xB4,0xE4,0xB6,0x10,0x8D,0x2E,0xE0,0x95 } }; // 7D484C14-F5F6-5E39-B4E4-B6108D2EE095
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IBitmapIconSourceStatics>{ 0x7E603B56,0x5580,0x5A9B,{ 0x90,0x0D,0x05,0x64,0x16,0x2A,0x5F,0x37 } }; // 7E603B56-5580-5A9B-900D-0564162A5F37
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IColorChangedEventArgs>{ 0x148D57A2,0xB1CB,0x5F5D,{ 0xB6,0xB5,0x51,0x28,0x05,0xD7,0x17,0x61 } }; // 148D57A2-B1CB-5F5D-B6B5-512805D71761
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IColorPicker>{ 0xAE72B24B,0xF93F,0x5A19,{ 0x8C,0xE4,0xA1,0x8B,0x73,0xC3,0x35,0x6D } }; // AE72B24B-F93F-5A19-8CE4-A18B73C3356D
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IColorPickerFactory>{ 0x72C350E2,0x0A20,0x5B9B,{ 0xAC,0x54,0x63,0x3B,0x97,0xD7,0xFF,0xDE } }; // 72C350E2-0A20-5B9B-AC54-633B97D7FFDE
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IColorPickerStatics>{ 0xAF1E1848,0x98DE,0x569E,{ 0xA8,0x4B,0x1C,0x88,0xBB,0xD0,0xD4,0x79 } }; // AF1E1848-98DE-569E-A84B-1C88BBD0D479
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ICommandBarFlyout>{ 0xF8F5B8BC,0x8D67,0x5FA9,{ 0x8F,0xB0,0xC2,0xC3,0x31,0x1E,0x1B,0x7C } }; // F8F5B8BC-8D67-5FA9-8FB0-C2C3311E1B7C
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ICommandBarFlyoutFactory>{ 0xA194DBE6,0x4311,0x5BD2,{ 0xA8,0xEB,0xB4,0x9C,0x47,0x33,0xA3,0x3C } }; // A194DBE6-4311-5BD2-A8EB-B49C4733A33C
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IDropDownButton>{ 0xC1E9FA91,0x4F95,0x5796,{ 0x8A,0x7B,0x3B,0x75,0x94,0xA1,0x2C,0x69 } }; // C1E9FA91-4F95-5796-8A7B-3B7594A12C69
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IDropDownButtonFactory>{ 0x7CF3E13B,0x668D,0x57E7,{ 0xB5,0xD6,0xF5,0xCA,0x3D,0xBC,0x80,0xBD } }; // 7CF3E13B-668D-57E7-B5D6-F5CA3DBC80BD
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IDynamicAnimatedVisualSource>{ 0xAB00E5CF,0x1BE6,0x559C,{ 0xAD,0x5B,0x02,0x53,0xBB,0x17,0xC0,0xF7 } }; // AB00E5CF-1BE6-559C-AD5B-0253BB17C0F7
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IElementFactoryGetArgs>{ 0x909791CE,0x213D,0x5075,{ 0xA2,0x3C,0xBF,0xE4,0x6C,0x16,0xB3,0x4D } }; // 909791CE-213D-5075-A23C-BFE46C16B34D
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IElementFactoryRecycleArgs>{ 0xC7386123,0x7139,0x509C,{ 0x88,0x6B,0x9D,0x74,0xCB,0xA9,0x56,0xDE } }; // C7386123-7139-509C-886B-9D74CBA956DE
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IFontIconSource>{ 0xDDF34704,0xC53D,0x571C,{ 0x89,0x0F,0x3B,0x5E,0x30,0x5D,0xDC,0x69 } }; // DDF34704-C53D-571C-890F-3B5E305DDC69
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IFontIconSourceFactory>{ 0xBB40EEEE,0x64D1,0x5133,{ 0xB1,0xD6,0xAE,0x13,0xC2,0x1B,0x66,0x78 } }; // BB40EEEE-64D1-5133-B1D6-AE13C21B6678
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IFontIconSourceStatics>{ 0x12C4716A,0x31C1,0x510A,{ 0x95,0x26,0x01,0xAB,0x3E,0x2B,0x07,0x38 } }; // 12C4716A-31C1-510A-9526-01AB3E2B0738
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IIconSource>{ 0x2A5D0830,0x2080,0x5272,{ 0xA7,0x4A,0x2B,0x53,0x50,0xC5,0x2A,0x33 } }; // 2A5D0830-2080-5272-A74A-2B5350C52A33
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IIconSourceFactory>{ 0xE8BC19C6,0x9A64,0x5C54,{ 0x93,0x38,0xE1,0x8E,0x07,0x68,0x75,0xBF } }; // E8BC19C6-9A64-5C54-9338-E18E076875BF
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IIconSourceStatics>{ 0x4DA53AB6,0x8945,0x562B,{ 0xA1,0xA5,0xFA,0xB5,0xE2,0xE8,0xD5,0x75 } }; // 4DA53AB6-8945-562B-A1A5-FAB5E2E8D575
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IItemsRepeater>{ 0x0BD894F2,0xEDFC,0x5DDF,{ 0xA1,0x66,0x2D,0xB1,0x4B,0xBF,0xDF,0x35 } }; // 0BD894F2-EDFC-5DDF-A166-2DB14BBFDF35
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IItemsRepeaterElementClearingEventArgs>{ 0x1E30B4C7,0xF1BC,0x5A6F,{ 0x8A,0x5B,0x8C,0x54,0xAD,0xAC,0x5F,0x80 } }; // 1E30B4C7-F1BC-5A6F-8A5B-8C54ADAC5F80
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IItemsRepeaterElementIndexChangedEventArgs>{ 0x995EE1FD,0xE2C3,0x5FE3,{ 0x94,0x43,0xA9,0x5A,0x3F,0xAD,0x5A,0x9F } }; // 995EE1FD-E2C3-5FE3-9443-A95A3FAD5A9F
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IItemsRepeaterElementPreparedEventArgs>{ 0xA56D3912,0xEE00,0x560E,{ 0x8D,0x3E,0x0E,0xDF,0xD8,0xD5,0x66,0x91 } }; // A56D3912-EE00-560E-8D3E-0EDFD8D56691
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IItemsRepeaterFactory>{ 0xC3C1F244,0x67A8,0x568F,{ 0xA6,0xF7,0x5D,0xA8,0xB0,0xEA,0xDD,0x49 } }; // C3C1F244-67A8-568F-A6F7-5DA8B0EADD49
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IItemsRepeaterScrollHost>{ 0xA29B4785,0x8210,0x5E6E,{ 0xA4,0x0C,0x36,0xA8,0x2B,0x78,0x7B,0x4F } }; // A29B4785-8210-5E6E-A40C-36A82B787B4F
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IItemsRepeaterStatics>{ 0xBBD50585,0xE533,0x5CA5,{ 0x8D,0xB9,0x13,0x7A,0x9C,0x32,0x76,0x35 } }; // BBD50585-E533-5CA5-8DB9-137A9C327635
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IItemsSourceView>{ 0xF7F802DE,0xE79C,0x5C5F,{ 0xAB,0xF8,0xCC,0xBD,0x48,0x6B,0x89,0xD6 } }; // F7F802DE-E79C-5C5F-ABF8-CCBD486B89D6
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IItemsSourceViewFactory>{ 0xAADC6FDD,0xEB00,0x5E58,{ 0xB9,0x5D,0x12,0x0F,0x89,0x1D,0x73,0x3F } }; // AADC6FDD-EB00-5E58-B95D-120F891D733F
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IKeyIndexMapping>{ 0xB1F3BBA0,0x108E,0x560D,{ 0x96,0x81,0x26,0x39,0x1B,0x4B,0xC3,0x0D } }; // B1F3BBA0-108E-560D-9681-26391B4BC30D
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ILayout>{ 0x24E50C1C,0x9C51,0x5144,{ 0x9D,0xDC,0x3F,0x50,0x01,0x91,0xC2,0x62 } }; // 24E50C1C-9C51-5144-9DDC-3F500191C262
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ILayoutContext>{ 0xB45A2E55,0x2ECC,0x5462,{ 0xBB,0x26,0xD4,0x7C,0x45,0x5B,0xB4,0x8E } }; // B45A2E55-2ECC-5462-BB26-D47C455BB48E
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ILayoutContextFactory>{ 0xF7664771,0x9242,0x599E,{ 0xA7,0xDD,0x07,0x05,0x56,0x5D,0xEF,0x98 } }; // F7664771-9242-599E-A7DD-0705565DEF98
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ILayoutContextOverrides>{ 0xFDA70E44,0x6526,0x5535,{ 0xBE,0x2B,0xEC,0x27,0x43,0x67,0x0A,0xE2 } }; // FDA70E44-6526-5535-BE2B-EC2743670AE2
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ILayoutFactory>{ 0xEAF956B4,0x59C9,0x5E13,{ 0xA4,0x9D,0xF3,0x5B,0x17,0x1D,0x8F,0xC9 } }; // EAF956B4-59C9-5E13-A49D-F35B171D8FC9
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ILayoutProtected>{ 0xE46FF416,0x741E,0x5176,{ 0xA1,0xD4,0x57,0x18,0xD2,0x34,0x22,0x43 } }; // E46FF416-741E-5176-A1D4-5718D2342243
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IMenuBar>{ 0xBA97F337,0x8F1E,0x5141,{ 0xB5,0x3F,0xE7,0x7A,0x8B,0xA3,0xEB,0xBD } }; // BA97F337-8F1E-5141-B53F-E77A8BA3EBBD
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IMenuBarFactory>{ 0x76AA8759,0x04EE,0x5A4C,{ 0xB9,0x8C,0xD0,0x37,0x42,0xD4,0x7C,0xDB } }; // 76AA8759-04EE-5A4C-B98C-D03742D47CDB
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IMenuBarItem>{ 0x9CAA4261,0x3A0C,0x5A59,{ 0x8C,0xFE,0x39,0x17,0x44,0xC3,0xF8,0x15 } }; // 9CAA4261-3A0C-5A59-8CFE-391744C3F815
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IMenuBarItemFactory>{ 0x87D02172,0x83CB,0x5459,{ 0x94,0x0F,0x17,0x3F,0x75,0x01,0xB3,0x00 } }; // 87D02172-83CB-5459-940F-173F7501B300
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IMenuBarItemFlyout>{ 0xA412AE4F,0xC3BC,0x5679,{ 0x8D,0x5F,0x86,0x5E,0xB9,0x7E,0x83,0xCD } }; // A412AE4F-C3BC-5679-8D5F-865EB97E83CD
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IMenuBarItemFlyoutFactory>{ 0xF895123E,0xED54,0x5A96,{ 0x84,0x18,0xF3,0x5E,0x48,0x50,0x5D,0x43 } }; // F895123E-ED54-5A96-8418-F35E48505D43
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IMenuBarItemStatics>{ 0x6282E536,0x1CFC,0x5D26,{ 0x9F,0x6D,0x8F,0x33,0x4D,0xAF,0x99,0x7E } }; // 6282E536-1CFC-5D26-9F6D-8F334DAF997E
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IMenuBarStatics>{ 0x10CB12F4,0xDCE0,0x514F,{ 0xAC,0xD1,0x0D,0x53,0xFA,0x02,0x75,0xD1 } }; // 10CB12F4-DCE0-514F-ACD1-0D53FA0275D1
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::INavigationView>{ 0x4B260744,0x8D4C,0x5853,{ 0x8A,0xD5,0x26,0x3E,0x78,0x0C,0xCD,0x48 } }; // 4B260744-8D4C-5853-8AD5-263E780CCD48
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::INavigationViewBackRequestedEventArgs>{ 0xAE752207,0xBD1B,0x5AFA,{ 0xA8,0x72,0xE9,0xBB,0xAE,0xEA,0x0E,0xDE } }; // AE752207-BD1B-5AFA-A872-E9BBAEEA0EDE
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::INavigationViewDisplayModeChangedEventArgs>{ 0x58DCF1EA,0x9E56,0x522C,{ 0xB3,0xF8,0x34,0xBD,0x55,0xEC,0xAC,0xA4 } }; // 58DCF1EA-9E56-522C-B3F8-34BD55ECACA4
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::INavigationViewFactory>{ 0xFFEA1ADA,0x9232,0x5507,{ 0xA3,0x20,0xED,0x2F,0xAD,0xBE,0x61,0x27 } }; // FFEA1ADA-9232-5507-A320-ED2FADBE6127
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::INavigationViewItem>{ 0x78ADBA9E,0xEC1B,0x508D,{ 0xB0,0xCF,0x91,0x57,0x8C,0x16,0x9D,0x44 } }; // 78ADBA9E-EC1B-508D-B0CF-91578C169D44
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::INavigationViewItemBase>{ 0x656833E8,0x4BDE,0x537D,{ 0x99,0x8D,0xCC,0x68,0x8E,0x91,0xDA,0x4C } }; // 656833E8-4BDE-537D-998D-CC688E91DA4C
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::INavigationViewItemBaseFactory>{ 0x31B9D7B1,0x7C38,0x5916,{ 0x99,0xC6,0xC7,0x1F,0x6B,0x01,0x2B,0x1B } }; // 31B9D7B1-7C38-5916-99C6-C71F6B012B1B
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::INavigationViewItemBaseStatics>{ 0x02B75190,0xE038,0x5233,{ 0x9D,0x7D,0xA6,0x00,0x99,0xDE,0xB5,0x8B } }; // 02B75190-E038-5233-9D7D-A60099DEB58B
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::INavigationViewItemCollapsedEventArgs>{ 0xB546F6A1,0xC66F,0x5DED,{ 0xB5,0xD7,0xBE,0xD0,0xA2,0x61,0x97,0xE3 } }; // B546F6A1-C66F-5DED-B5D7-BED0A26197E3
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::INavigationViewItemExpandingEventArgs>{ 0x6F0941BE,0xE991,0x52F8,{ 0x83,0x15,0xF0,0x83,0x89,0x49,0x79,0x76 } }; // 6F0941BE-E991-52F8-8315-F08389497976
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::INavigationViewItemFactory>{ 0xDE60A001,0x9385,0x5535,{ 0x80,0xE1,0x2B,0x68,0xF4,0xBF,0xDE,0x26 } }; // DE60A001-9385-5535-80E1-2B68F4BFDE26
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::INavigationViewItemHeader>{ 0x432BC062,0x45BC,0x57EF,{ 0xA2,0xD3,0x11,0x85,0x1A,0x56,0xA8,0x82 } }; // 432BC062-45BC-57EF-A2D3-11851A56A882
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::INavigationViewItemHeaderFactory>{ 0x6A5447CD,0x2918,0x5FE3,{ 0x89,0x9B,0x93,0xD6,0x96,0x12,0x85,0xE6 } }; // 6A5447CD-2918-5FE3-899B-93D6961285E6
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::INavigationViewItemInvokedEventArgs>{ 0x6D5E3674,0xA3E7,0x5FEB,{ 0x85,0x48,0x6F,0x10,0xD9,0x25,0x6D,0x2A } }; // 6D5E3674-A3E7-5FEB-8548-6F10D9256D2A
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::INavigationViewItemSeparator>{ 0xE3C35630,0x1D5F,0x5689,{ 0xA0,0xCB,0x87,0x94,0x48,0x5C,0xAA,0xCF } }; // E3C35630-1D5F-5689-A0CB-8794485CAACF
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::INavigationViewItemSeparatorFactory>{ 0x181266A1,0xD4F8,0x5AF7,{ 0x81,0x0B,0xAE,0xE8,0xA1,0xD4,0x52,0xED } }; // 181266A1-D4F8-5AF7-810B-AEE8A1D452ED
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::INavigationViewItemStatics>{ 0x47AB1335,0x0811,0x501D,{ 0xAE,0x64,0x2F,0xB4,0x07,0x6E,0x45,0x19 } }; // 47AB1335-0811-501D-AE64-2FB4076E4519
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::INavigationViewPaneClosingEventArgs>{ 0xE8643304,0x6DB4,0x5AF5,{ 0xBA,0xC2,0x62,0x73,0x3C,0xA0,0x37,0xDA } }; // E8643304-6DB4-5AF5-BAC2-62733CA037DA
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::INavigationViewSelectionChangedEventArgs>{ 0x1D0863EE,0xCB87,0x5BA2,{ 0xAA,0x8F,0x98,0x1A,0x93,0xDD,0x48,0xB2 } }; // 1D0863EE-CB87-5BA2-AA8F-981A93DD48B2
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::INavigationViewStatics>{ 0x605154EF,0x70D8,0x5067,{ 0xB8,0x21,0xC2,0xF1,0x91,0xB4,0xD0,0xD9 } }; // 605154EF-70D8-5067-B821-C2F191B4D0D9
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettings>{ 0xCE777BA7,0x5036,0x5DC5,{ 0x8A,0x1F,0x95,0x34,0x24,0xF2,0x8E,0x40 } }; // CE777BA7-5036-5DC5-8A1F-953424F28E40
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsFactory>{ 0x34FF6C94,0x6465,0x5F3E,{ 0xB0,0xA5,0x4F,0x1E,0xEA,0x48,0xE7,0x43 } }; // 34FF6C94-6465-5F3E-B0A5-4F1EEA48E743
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsStatics>{ 0x450DF7FB,0x2E2F,0x5917,{ 0x89,0x3B,0x67,0xE3,0x66,0xF4,0x6F,0xAD } }; // 450DF7FB-2E2F-5917-893B-67E366F46FAD
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::INonVirtualizingLayout>{ 0x0C24DEFD,0xF68F,0x51D9,{ 0x99,0x8E,0x4C,0xBA,0xD4,0x8B,0xE0,0x12 } }; // 0C24DEFD-F68F-51D9-998E-4CBAD48BE012
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContext>{ 0x0BA9C1BB,0x651C,0x5F63,{ 0xBC,0xBB,0x7B,0xDF,0xE7,0x4B,0x7B,0x38 } }; // 0BA9C1BB-651C-5F63-BCBB-7BDFE74B7B38
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContextFactory>{ 0xDABAC020,0x189C,0x5BBF,{ 0xA4,0xDC,0x97,0xDA,0x11,0x99,0xF5,0x77 } }; // DABAC020-189C-5BBF-A4DC-97DA1199F577
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContextOverrides>{ 0xF8D4589F,0xB38B,0x5C09,{ 0x83,0x56,0xC7,0x3E,0xCF,0xB6,0xEE,0xD8 } }; // F8D4589F-B38B-5C09-8356-C73ECFB6EED8
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutFactory>{ 0xA16D2D12,0xDBAC,0x5CE0,{ 0xAE,0xF5,0x09,0x17,0x1A,0x4D,0x35,0x71 } }; // A16D2D12-DBAC-5CE0-AEF5-09171A4D3571
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutOverrides>{ 0x3C28B831,0x35C1,0x5182,{ 0xA8,0x43,0xA4,0x3F,0x33,0x9B,0x66,0x87 } }; // 3C28B831-35C1-5182-A843-A43F339B6687
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::INumberBox>{ 0x22C43A67,0xD393,0x56A9,{ 0x80,0x1A,0x2D,0xEA,0x91,0x87,0x7D,0xE6 } }; // 22C43A67-D393-56A9-801A-2DEA91877DE6
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::INumberBoxFactory>{ 0x6B81F3CB,0x45A4,0x5D19,{ 0x9B,0xBB,0xA9,0xFE,0x46,0x56,0xAC,0x4D } }; // 6B81F3CB-45A4-5D19-9BBB-A9FE4656AC4D
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::INumberBoxStatics>{ 0x7C58A821,0x453D,0x556D,{ 0xA2,0x25,0x57,0x50,0x51,0x3F,0x71,0x79 } }; // 7C58A821-453D-556D-A225-5750513F7179
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::INumberBoxValueChangedEventArgs>{ 0xC66CF16E,0x7C8A,0x532E,{ 0x9D,0x23,0x05,0x8C,0x1C,0x98,0xDD,0x50 } }; // C66CF16E-7C8A-532E-9D23-058C1C98DD50
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IParallaxView>{ 0x692E1E53,0x4231,0x5DE0,{ 0xAC,0xB4,0x85,0x9E,0x49,0x4D,0xAB,0x73 } }; // 692E1E53-4231-5DE0-ACB4-859E494DAB73
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IParallaxViewFactory>{ 0x61DC973D,0xC595,0x5261,{ 0xA9,0xB7,0x35,0xF4,0x10,0x42,0xEB,0x00 } }; // 61DC973D-C595-5261-A9B7-35F41042EB00
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IParallaxViewStatics>{ 0xB17A0882,0xE92E,0x5AA0,{ 0x92,0xD5,0x3D,0xE6,0x9F,0x0E,0x6A,0xA8 } }; // B17A0882-E92E-5AA0-92D5-3DE69F0E6AA8
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IPathIconSource>{ 0x3C89356E,0x0A21,0x5E5E,{ 0xA2,0xBA,0xD8,0x83,0x73,0x65,0x14,0x3B } }; // 3C89356E-0A21-5E5E-A2BA-D8837365143B
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IPathIconSourceFactory>{ 0x9FEFE31E,0x5AB6,0x5394,{ 0xA6,0xEF,0x67,0x2F,0x17,0x4D,0x33,0x3B } }; // 9FEFE31E-5AB6-5394-A6EF-672F174D333B
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IPathIconSourceStatics>{ 0x1CA1C9F2,0x2E93,0x5877,{ 0xB6,0x40,0x83,0x61,0x42,0xC2,0xFA,0xC0 } }; // 1CA1C9F2-2E93-5877-B640-836142C2FAC0
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IPersonPicture>{ 0x976B210A,0xDDFF,0x5E30,{ 0x9F,0xBD,0x95,0x12,0x3B,0xE9,0xAA,0xAC } }; // 976B210A-DDFF-5E30-9FBD-95123BE9AAAC
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IPersonPictureFactory>{ 0x7EC0794C,0xF2CC,0x5282,{ 0xA8,0x9D,0xCD,0x3B,0xB7,0x65,0xB7,0x1A } }; // 7EC0794C-F2CC-5282-A89D-CD3BB765B71A
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IPersonPictureStatics>{ 0xD1AFCF40,0xB7BB,0x5873,{ 0x9A,0xB5,0x9E,0xE6,0xF0,0x65,0xDD,0x1E } }; // D1AFCF40-B7BB-5873-9AB5-9EE6F065DD1E
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IPersonPictureTemplateSettings>{ 0x9FB4BA10,0xCBF8,0x5DBF,{ 0x91,0x8A,0x83,0x23,0xDA,0xA4,0xF7,0xE4 } }; // 9FB4BA10-CBF8-5DBF-918A-8323DAA4F7E4
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IProgressBar>{ 0x87555C8C,0x0AAF,0x52C1,{ 0x83,0x90,0x0D,0xB1,0x7F,0x40,0x43,0x8E } }; // 87555C8C-0AAF-52C1-8390-0DB17F40438E
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IProgressBarFactory>{ 0x189826AD,0xF6F2,0x533E,{ 0x9D,0xDB,0xB6,0x60,0x0E,0x88,0x67,0x5B } }; // 189826AD-F6F2-533E-9DDB-B6600E88675B
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IProgressBarStatics>{ 0x72A634C1,0xB22D,0x55FA,{ 0x90,0x9D,0x7B,0x74,0x58,0xAB,0x14,0xE2 } }; // 72A634C1-B22D-55FA-909D-7B7458AB14E2
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IProgressBarTemplateSettings>{ 0x20D22A89,0x59F1,0x5E47,{ 0x8C,0x88,0xF0,0x6F,0x95,0x92,0x9E,0xEC } }; // 20D22A89-59F1-5E47-8C88-F06F95929EEC
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IProgressRing>{ 0x2952B4A6,0x6FA2,0x5457,{ 0xA8,0x1E,0xD8,0xB4,0x87,0x1E,0xE2,0x35 } }; // 2952B4A6-6FA2-5457-A81E-D8B4871EE235
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IProgressRingFactory>{ 0x092FA98C,0x62A7,0x5DBC,{ 0x9A,0x85,0x3E,0x55,0x6B,0xA8,0x1F,0x79 } }; // 092FA98C-62A7-5DBC-9A85-3E556BA81F79
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IProgressRingStatics>{ 0x053405FF,0x9E17,0x513D,{ 0x92,0xA7,0x3A,0xD9,0x63,0xCB,0x35,0x7A } }; // 053405FF-9E17-513D-92A7-3AD963CB357A
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IProgressRingTemplateSettings>{ 0xD1B7AACA,0x07A0,0x55EF,{ 0xA9,0xC5,0x8E,0x44,0xED,0xAD,0x74,0x99 } }; // D1B7AACA-07A0-55EF-A9C5-8E44EDAD7499
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IRadioButtons>{ 0xDD372D64,0xB740,0x5739,{ 0x8D,0x24,0xB6,0xDE,0xCC,0x91,0xF4,0x08 } }; // DD372D64-B740-5739-8D24-B6DECC91F408
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IRadioButtonsFactory>{ 0x2CF95EFB,0xA7A2,0x5D85,{ 0x8E,0xAD,0xEA,0x22,0x2B,0xAA,0x3C,0x55 } }; // 2CF95EFB-A7A2-5D85-8EAD-EA222BAA3C55
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IRadioButtonsStatics>{ 0x106FBFBD,0x4304,0x5D4D,{ 0x8E,0x6A,0xC4,0xC1,0x5A,0xBB,0xBB,0xEF } }; // 106FBFBD-4304-5D4D-8E6A-C4C15ABBBBEF
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItem>{ 0x9D6F45F5,0x5532,0x5669,{ 0x8F,0x02,0x05,0x73,0x59,0x53,0x02,0x6A } }; // 9D6F45F5-5532-5669-8F02-05735953026A
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItemFactory>{ 0x113822D2,0x35A3,0x5B0D,{ 0x9D,0x0D,0xC3,0x83,0x0E,0xC1,0x97,0x3B } }; // 113822D2-35A3-5B0D-9D0D-C3830EC1973B
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItemStatics>{ 0x2C8FD4AA,0xB8D8,0x543C,{ 0xA1,0xBE,0x9E,0x00,0x87,0x27,0xC1,0x58 } }; // 2C8FD4AA-B8D8-543C-A1BE-9E008727C158
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IRatingControl>{ 0x5488193B,0xEA4B,0x52C6,{ 0x85,0x44,0xC0,0x63,0x21,0x9B,0xCD,0x90 } }; // 5488193B-EA4B-52C6-8544-C063219BCD90
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IRatingControlFactory>{ 0xA53B9B73,0xBFF9,0x548D,{ 0xA2,0x94,0xAC,0x63,0xD8,0x19,0xF7,0x8A } }; // A53B9B73-BFF9-548D-A294-AC63D819F78A
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IRatingControlStatics>{ 0x3752A048,0xF3F2,0x5EF6,{ 0x87,0x8D,0x49,0x95,0x72,0xF0,0x52,0x9B } }; // 3752A048-F3F2-5EF6-878D-499572F0529B
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IRatingItemFontInfo>{ 0x995A16DC,0x3A0F,0x5727,{ 0x9F,0x38,0x52,0xCF,0xC8,0x14,0x36,0x54 } }; // 995A16DC-3A0F-5727-9F38-52CFC8143654
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IRatingItemFontInfoFactory>{ 0x109C6541,0x706E,0x5FD7,{ 0xBA,0xAE,0x02,0x0B,0x24,0x89,0x9F,0x61 } }; // 109C6541-706E-5FD7-BAAE-020B24899F61
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IRatingItemFontInfoStatics>{ 0x7C626902,0xA13F,0x5470,{ 0xA5,0x22,0xBD,0x54,0x14,0xDF,0x8E,0xD3 } }; // 7C626902-A13F-5470-A522-BD5414DF8ED3
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IRatingItemImageInfo>{ 0x610268E4,0xAF6E,0x5C1C,{ 0x8D,0x0F,0xBB,0x46,0xC0,0x6D,0x67,0x82 } }; // 610268E4-AF6E-5C1C-8D0F-BB46C06D6782
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IRatingItemImageInfoFactory>{ 0x4ACC8CAC,0xBCA8,0x5380,{ 0x95,0xE4,0x34,0x5C,0x1B,0xE2,0x56,0xB2 } }; // 4ACC8CAC-BCA8-5380-95E4-345C1BE256B2
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IRatingItemImageInfoStatics>{ 0xB8E6F05B,0x0AF5,0x5AA8,{ 0x8E,0x85,0xFD,0x02,0x2D,0x4C,0x69,0x08 } }; // B8E6F05B-0AF5-5AA8-8E85-FD022D4C6908
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IRatingItemInfo>{ 0x801E924E,0x3613,0x55DD,{ 0x83,0x21,0x9E,0xBA,0xBB,0xED,0x0B,0x8A } }; // 801E924E-3613-55DD-8321-9EBABBED0B8A
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IRatingItemInfoFactory>{ 0x61F13480,0xCD0C,0x556A,{ 0xB5,0x32,0xA0,0xCF,0x53,0xE3,0xCD,0xA0 } }; // 61F13480-CD0C-556A-B532-A0CF53E3CDA0
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IRefreshContainer>{ 0x1C9778E8,0xA427,0x5F86,{ 0x9D,0x5E,0x02,0xDB,0x9B,0x2C,0x40,0x93 } }; // 1C9778E8-A427-5F86-9D5E-02DB9B2C4093
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IRefreshContainerFactory>{ 0x5F228FA1,0x2EA2,0x52B5,{ 0xB7,0x8A,0x0C,0x13,0x3F,0x86,0xF0,0x20 } }; // 5F228FA1-2EA2-52B5-B78A-0C133F86F020
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IRefreshContainerStatics>{ 0x1F2BC1C8,0x5C8F,0x5B46,{ 0x8B,0x0F,0xE0,0x06,0xDB,0x4E,0xC6,0xE1 } }; // 1F2BC1C8-5C8F-5B46-8B0F-E006DB4EC6E1
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IRefreshInteractionRatioChangedEventArgs>{ 0x790B70E0,0xF199,0x552B,{ 0xB1,0x26,0x6C,0xB4,0x5C,0x2D,0xE8,0xF9 } }; // 790B70E0-F199-552B-B126-6CB45C2DE8F9
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IRefreshRequestedEventArgs>{ 0xED97A956,0x6019,0x5329,{ 0x93,0x12,0xF8,0x85,0xB5,0xC7,0x74,0xCD } }; // ED97A956-6019-5329-9312-F885B5C774CD
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IRefreshStateChangedEventArgs>{ 0x7BE897CE,0x17C4,0x5FDF,{ 0xB4,0x41,0xC6,0xEF,0x33,0x01,0xE0,0xF6 } }; // 7BE897CE-17C4-5FDF-B441-C6EF3301E0F6
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IRefreshVisualizer>{ 0xA000AFD1,0xD2FC,0x5391,{ 0xB4,0x21,0xEE,0x5C,0x97,0x5A,0xC9,0x45 } }; // A000AFD1-D2FC-5391-B421-EE5C975AC945
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IRefreshVisualizerFactory>{ 0x9D6F2BF2,0x6628,0x582A,{ 0x89,0x2B,0x68,0xC2,0x77,0x0C,0x17,0x3C } }; // 9D6F2BF2-6628-582A-892B-68C2770C173C
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IRefreshVisualizerStatics>{ 0x7E9E32AB,0x3C39,0x58AC,{ 0x9D,0x0D,0x46,0x48,0xBE,0x22,0x0B,0xDC } }; // 7E9E32AB-3C39-58AC-9D0D-4648BE220BDC
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IRevealListViewItemPresenter>{ 0x365FDBAC,0x3989,0x559C,{ 0xBE,0xA9,0x76,0x45,0x61,0x88,0x1C,0x96 } }; // 365FDBAC-3989-559C-BEA9-764561881C96
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IRevealListViewItemPresenterFactory>{ 0xE730C53B,0x8F94,0x55B3,{ 0x8B,0xC1,0x98,0xF7,0x7C,0x57,0x66,0xBD } }; // E730C53B-8F94-55B3-8BC1-98F77C5766BD
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ISplitButton>{ 0x8B09006A,0x6241,0x594F,{ 0x93,0xE4,0x8B,0xF0,0x51,0xD7,0xBA,0x8F } }; // 8B09006A-6241-594F-93E4-8BF051D7BA8F
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ISplitButtonClickEventArgs>{ 0x6AF896C2,0xE65A,0x5998,{ 0x9C,0x82,0x2A,0xF8,0xF3,0xE0,0x74,0x1F } }; // 6AF896C2-E65A-5998-9C82-2AF8F3E0741F
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ISplitButtonFactory>{ 0x07510092,0x2612,0x55E7,{ 0x98,0x1C,0xA5,0x36,0xDD,0xD4,0x57,0x0E } }; // 07510092-2612-55E7-981C-A536DDD4570E
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ISplitButtonStatics>{ 0x7262C1E0,0x97CD,0x5561,{ 0xB6,0xE7,0x5E,0x2E,0xCE,0xA4,0x6A,0xC2 } }; // 7262C1E0-97CD-5561-B6E7-5E2ECEA46AC2
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IStackLayout>{ 0x6BF7F61B,0x0CEF,0x5D92,{ 0xA8,0x28,0x93,0xEF,0xBD,0x6D,0xF4,0xC1 } }; // 6BF7F61B-0CEF-5D92-A828-93EFBD6DF4C1
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IStackLayoutFactory>{ 0xEA606F86,0x21A1,0x5C35,{ 0x91,0x1E,0x4A,0x1D,0xE8,0xBC,0x69,0xD9 } }; // EA606F86-21A1-5C35-911E-4A1DE8BC69D9
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IStackLayoutStatics>{ 0xF69CAEFE,0x9D6F,0x5B90,{ 0x9D,0x3D,0xF4,0x7E,0xCE,0xB5,0x5D,0x20 } }; // F69CAEFE-9D6F-5B90-9D3D-F47ECEB55D20
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ISwipeControl>{ 0x337800FE,0xF51D,0x5F6B,{ 0x9D,0x35,0xE7,0xF5,0xDE,0x10,0xA9,0x7C } }; // 337800FE-F51D-5F6B-9D35-E7F5DE10A97C
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ISwipeControlFactory>{ 0x6E9213F4,0x30C1,0x56CA,{ 0x99,0x05,0x46,0xAA,0x1A,0x83,0xDF,0xC1 } }; // 6E9213F4-30C1-56CA-9905-46AA1A83DFC1
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ISwipeControlStatics>{ 0xBE0EB518,0x40B4,0x5CED,{ 0x8D,0xFB,0x6C,0xA0,0x18,0xF1,0xCA,0xCA } }; // BE0EB518-40B4-5CED-8DFB-6CA018F1CACA
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ISwipeItem>{ 0x560FE6C5,0x109F,0x5866,{ 0xB0,0x2E,0x31,0xE4,0xFA,0x93,0x0E,0xD0 } }; // 560FE6C5-109F-5866-B02E-31E4FA930ED0
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ISwipeItemFactory>{ 0x011513E1,0x1ADC,0x5A69,{ 0xA7,0x4F,0x62,0x3F,0xCC,0x18,0xA5,0x1C } }; // 011513E1-1ADC-5A69-A74F-623FCC18A51C
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ISwipeItemInvokedEventArgs>{ 0x7BF51C95,0x53A2,0x5A0D,{ 0xBB,0x32,0x2B,0x4B,0x1F,0x7D,0x2F,0x20 } }; // 7BF51C95-53A2-5A0D-BB32-2B4B1F7D2F20
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ISwipeItemStatics>{ 0x793256E1,0x27C7,0x5387,{ 0xBB,0x27,0x53,0xD0,0x72,0x72,0x36,0x25 } }; // 793256E1-27C7-5387-BB27-53D072723625
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ISwipeItems>{ 0x40D3022B,0xC82B,0x5565,{ 0xA4,0xE4,0xAD,0x9D,0x7A,0x66,0xB1,0xA9 } }; // 40D3022B-C82B-5565-A4E4-AD9D7A66B1A9
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ISwipeItemsFactory>{ 0x9A5D7D77,0x39BD,0x5B81,{ 0xAB,0x4E,0xF4,0x4A,0xCA,0x6E,0xDE,0x3F } }; // 9A5D7D77-39BD-5B81-AB4E-F44ACA6EDE3F
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ISwipeItemsStatics>{ 0x78D47697,0xEAF2,0x5652,{ 0x9A,0xFC,0xD7,0x13,0xCA,0x10,0x34,0x88 } }; // 78D47697-EAF2-5652-9AFC-D713CA103488
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ISymbolIconSource>{ 0x1F8098D4,0xF3EA,0x5360,{ 0xB0,0xAA,0x80,0x65,0xBB,0x72,0x26,0xAE } }; // 1F8098D4-F3EA-5360-B0AA-8065BB7226AE
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ISymbolIconSourceFactory>{ 0xAFBF55FA,0xFF79,0x552A,{ 0xA3,0xA1,0x48,0xE2,0xEF,0x17,0x15,0x2A } }; // AFBF55FA-FF79-552A-A3A1-48E2EF17152A
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ISymbolIconSourceStatics>{ 0x967C25AF,0x2A94,0x5E50,{ 0xA9,0x21,0x58,0x7D,0x8F,0xE8,0x11,0x43 } }; // 967C25AF-2A94-5E50-A921-587D8FE81143
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ITabView>{ 0x6AA787AB,0x5A30,0x5EA2,{ 0xBE,0x5B,0xAE,0xD8,0x68,0x38,0x17,0x56 } }; // 6AA787AB-5A30-5EA2-BE5B-AED868381756
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ITabViewFactory>{ 0xE7E83685,0xEEDF,0x5106,{ 0x94,0x29,0x88,0x44,0x35,0xAB,0x16,0x6B } }; // E7E83685-EEDF-5106-9429-884435AB166B
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ITabViewItem>{ 0x291F3E98,0x4F17,0x5021,{ 0x94,0xF0,0x6A,0x5B,0x30,0x43,0x12,0xB6 } }; // 291F3E98-4F17-5021-94F0-6A5B304312B6
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ITabViewItemFactory>{ 0xB64C2423,0x7E56,0x5D41,{ 0x8A,0x84,0x1E,0xE2,0x8F,0x98,0x26,0xA4 } }; // B64C2423-7E56-5D41-8A84-1EE28F9826A4
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ITabViewItemStatics>{ 0x0A4FA876,0xDC4A,0x5648,{ 0x91,0x14,0xC3,0xB3,0x92,0xDE,0x31,0x29 } }; // 0A4FA876-DC4A-5648-9114-C3B392DE3129
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ITabViewItemTemplateSettings>{ 0xD1B2D760,0xCC38,0x5A96,{ 0xBC,0x92,0x10,0xEE,0x3B,0x36,0x98,0x8C } }; // D1B2D760-CC38-5A96-BC92-10EE3B36988C
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ITabViewItemTemplateSettingsFactory>{ 0xCBA3E467,0x4C98,0x5885,{ 0xBA,0x24,0x6F,0xA6,0x99,0xCC,0x8E,0xDD } }; // CBA3E467-4C98-5885-BA24-6FA699CC8EDD
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ITabViewItemTemplateSettingsStatics>{ 0x40A40ABA,0x9EC2,0x5B55,{ 0xB6,0xE4,0x75,0x56,0xA5,0xA0,0x60,0x18 } }; // 40A40ABA-9EC2-5B55-B6E4-7556A5A06018
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ITabViewStatics>{ 0x3FCAB90C,0xDDAC,0x53E5,{ 0x83,0xAB,0x7A,0x8E,0x9E,0xE9,0x38,0x89 } }; // 3FCAB90C-DDAC-53E5-83AB-7A8E9EE93889
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ITabViewTabCloseRequestedEventArgs>{ 0xD56AB9B2,0xE264,0x5C7E,{ 0xA1,0xCB,0xE4,0x1A,0x16,0xA6,0xC6,0xC6 } }; // D56AB9B2-E264-5C7E-A1CB-E41A16A6C6C6
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ITabViewTabDragCompletedEventArgs>{ 0x791FC623,0xC8F6,0x5102,{ 0x81,0xBD,0x18,0x69,0xCD,0xE8,0x22,0x84 } }; // 791FC623-C8F6-5102-81BD-1869CDE82284
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ITabViewTabDragStartingEventArgs>{ 0x97682812,0x1A7B,0x53FD,{ 0x8B,0x4E,0xC2,0xF7,0x0D,0x2A,0xD2,0x50 } }; // 97682812-1A7B-53FD-8B4E-C2F70D2AD250
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ITabViewTabDroppedOutsideEventArgs>{ 0x1F1F4D5D,0x0FB1,0x51AB,{ 0xB6,0x6F,0xF7,0xA3,0x22,0xBF,0x2D,0x13 } }; // 1F1F4D5D-0FB1-51AB-B66F-F7A322BF2D13
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ITeachingTip>{ 0x5B200440,0x4FCC,0x5FDB,{ 0xB4,0x18,0xB5,0x79,0x7B,0x08,0x74,0xAD } }; // 5B200440-4FCC-5FDB-B418-B5797B0874AD
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ITeachingTipClosedEventArgs>{ 0x2536F506,0x4038,0x59DB,{ 0x9E,0x35,0xA9,0x25,0x2F,0xB5,0xAD,0xB2 } }; // 2536F506-4038-59DB-9E35-A9252FB5ADB2
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ITeachingTipClosingEventArgs>{ 0x16F53512,0x3C55,0x5636,{ 0xA8,0x56,0x22,0x9D,0x97,0x68,0xD6,0x4E } }; // 16F53512-3C55-5636-A856-229D9768D64E
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ITeachingTipFactory>{ 0xA3ECD47D,0x2972,0x5D19,{ 0xA6,0x2E,0xDD,0xFB,0xC5,0xE1,0xAD,0x57 } }; // A3ECD47D-2972-5D19-A62E-DDFBC5E1AD57
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ITeachingTipStatics>{ 0xC8723FEB,0xBDC8,0x566E,{ 0xAD,0x5C,0x6F,0x07,0x25,0x4A,0xF9,0x37 } }; // C8723FEB-BDC8-566E-AD5C-6F07254AF937
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettings>{ 0x677A43E5,0x8FF2,0x51CD,{ 0x97,0x42,0xA2,0x15,0x5E,0x20,0xD7,0x72 } }; // 677A43E5-8FF2-51CD-9742-A2155E20D772
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettingsFactory>{ 0x63210545,0xE195,0x56CD,{ 0xBC,0xCD,0x16,0x92,0x55,0xE1,0x34,0xE3 } }; // 63210545-E195-56CD-BCCD-169255E134E3
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettingsStatics>{ 0x6295DAC8,0x7102,0x5602,{ 0xB8,0xF9,0xE5,0x00,0xE5,0x98,0x44,0x8F } }; // 6295DAC8-7102-5602-B8F9-E500E598448F
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ITextCommandBarFlyout>{ 0x6D0F38A5,0x0EB3,0x5D73,{ 0x81,0x95,0xD2,0xD8,0x9B,0x76,0xB0,0xF7 } }; // 6D0F38A5-0EB3-5D73-8195-D2D89B76B0F7
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ITextCommandBarFlyoutFactory>{ 0x5C56A34F,0x621F,0x55F2,{ 0x8D,0x71,0x3E,0x3A,0x6E,0x69,0x06,0xBD } }; // 5C56A34F-621F-55F2-8D71-3E3A6E6906BD
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IToggleSplitButton>{ 0x5C0F247B,0xBD00,0x5509,{ 0x88,0xA8,0xB0,0x90,0x07,0xAE,0x22,0xB0 } }; // 5C0F247B-BD00-5509-88A8-B09007AE22B0
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IToggleSplitButtonFactory>{ 0x25459D02,0x0FFC,0x5C7C,{ 0xAF,0x56,0xF5,0x5A,0xAD,0x6D,0xB5,0xE7 } }; // 25459D02-0FFC-5C7C-AF56-F55AAD6DB5E7
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IToggleSplitButtonIsCheckedChangedEventArgs>{ 0x6CAB1E15,0xC017,0x5760,{ 0x82,0x8B,0xDA,0xFC,0x21,0xD5,0x4E,0xB2 } }; // 6CAB1E15-C017-5760-828B-DAFC21D54EB2
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IToggleSplitButtonStatics>{ 0xCEE1275D,0xF1DC,0x5CD5,{ 0xA3,0xD4,0xE5,0x6B,0xCE,0xEE,0xFA,0x88 } }; // CEE1275D-F1DC-5CD5-A3D4-E56BCEEEFA88
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ITreeView>{ 0xB19FE31A,0x69B0,0x55F3,{ 0x9F,0x00,0xEB,0x64,0xEE,0x78,0x43,0x35 } }; // B19FE31A-69B0-55F3-9F00-EB64EE784335
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ITreeViewCollapsedEventArgs>{ 0x8CF22168,0xD31E,0x5EE9,{ 0xA9,0x09,0xB7,0xE5,0x20,0x85,0xD3,0x5B } }; // 8CF22168-D31E-5EE9-A909-B7E52085D35B
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ITreeViewDragItemsCompletedEventArgs>{ 0x7B3B7853,0x440F,0x5497,{ 0xAE,0x43,0xCC,0x06,0x87,0x87,0x9D,0x95 } }; // 7B3B7853-440F-5497-AE43-CC0687879D95
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ITreeViewDragItemsStartingEventArgs>{ 0x1B6C4FFC,0xCD32,0x5E06,{ 0xB7,0x82,0xDF,0x9F,0x07,0x75,0x46,0xC7 } }; // 1B6C4FFC-CD32-5E06-B782-DF9F077546C7
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ITreeViewExpandingEventArgs>{ 0x165AF9D6,0xA4EB,0x577F,{ 0x8D,0x92,0x1A,0x37,0x49,0x26,0x69,0x1A } }; // 165AF9D6-A4EB-577F-8D92-1A374926691A
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ITreeViewFactory>{ 0x9C6220BE,0xF9EB,0x518A,{ 0xB3,0x0E,0x7E,0x41,0xDE,0x5E,0xFD,0xA9 } }; // 9C6220BE-F9EB-518A-B30E-7E41DE5EFDA9
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ITreeViewItem>{ 0xCBAE6B02,0x8044,0x50E1,{ 0xB6,0x7C,0x83,0x00,0x40,0xA5,0xEF,0xD8 } }; // CBAE6B02-8044-50E1-B67C-830040A5EFD8
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ITreeViewItemFactory>{ 0x878FD918,0xE77E,0x5BE8,{ 0x8C,0x8A,0xB7,0x9B,0x27,0xB0,0x8D,0x9B } }; // 878FD918-E77E-5BE8-8C8A-B79B27B08D9B
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ITreeViewItemInvokedEventArgs>{ 0x1A05853C,0xB101,0x542C,{ 0x9A,0x1E,0x77,0x5A,0x04,0x4C,0x46,0x52 } }; // 1A05853C-B101-542C-9A1E-775A044C4652
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ITreeViewItemStatics>{ 0xB304730A,0xAA4D,0x5BCB,{ 0xAE,0x9A,0x00,0xE3,0x6B,0x26,0x63,0xDA } }; // B304730A-AA4D-5BCB-AE9A-00E36B2663DA
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettings>{ 0x35B92371,0x3A10,0x5F55,{ 0x89,0xEA,0x59,0xDB,0x9A,0x1D,0x02,0xCD } }; // 35B92371-3A10-5F55-89EA-59DB9A1D02CD
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettingsFactory>{ 0x1D1A66E3,0xF56D,0x5D7F,{ 0x94,0x2C,0xF3,0xA8,0x7F,0x5C,0x55,0x2E } }; // 1D1A66E3-F56D-5D7F-942C-F3A87F5C552E
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettingsStatics>{ 0x1E4667C8,0x459A,0x5A36,{ 0xB1,0x31,0x21,0x59,0xCC,0x2F,0xE5,0x43 } }; // 1E4667C8-459A-5A36-B131-2159CC2FE543
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ITreeViewList>{ 0x94CEE57B,0x7085,0x5A6A,{ 0xAA,0xC3,0x18,0x45,0x09,0xB8,0xEC,0xE0 } }; // 94CEE57B-7085-5A6A-AAC3-184509B8ECE0
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ITreeViewListFactory>{ 0x461499A0,0x68CF,0x5B81,{ 0xB0,0xE4,0xB1,0xAF,0x92,0x9B,0x0B,0x12 } }; // 461499A0-68CF-5B81-B0E4-B1AF929B0B12
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ITreeViewNode>{ 0x00378A74,0x790B,0x5328,{ 0x8A,0xFA,0x7D,0x65,0xE2,0x2D,0xA4,0x26 } }; // 00378A74-790B-5328-8AFA-7D65E22DA426
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ITreeViewNodeFactory>{ 0xC105A5E5,0xCEA8,0x5EFD,{ 0x8B,0xE8,0x3D,0x89,0xB5,0x4C,0xBD,0x5F } }; // C105A5E5-CEA8-5EFD-8BE8-3D89B54CBD5F
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ITreeViewNodeStatics>{ 0x1FEF99A7,0x988F,0x503C,{ 0xA9,0x19,0x87,0xD5,0x5D,0xC9,0x0D,0xF8 } }; // 1FEF99A7-988F-503C-A919-87D55DC90DF8
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ITreeViewStatics>{ 0x3F241461,0x6852,0x5EA1,{ 0xBA,0xB7,0xD5,0x93,0x09,0xE0,0x3B,0xBE } }; // 3F241461-6852-5EA1-BAB7-D59309E03BBE
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ITwoPaneView>{ 0x85EDC585,0x1481,0x5477,{ 0xBB,0x12,0x2A,0x18,0xA3,0x2B,0x83,0x4E } }; // 85EDC585-1481-5477-BB12-2A18A32B834E
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ITwoPaneViewFactory>{ 0x0F1AF0CD,0xF3DC,0x52F6,{ 0xB6,0x32,0x39,0x67,0x42,0x53,0x32,0x31 } }; // 0F1AF0CD-F3DC-52F6-B632-396742533231
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::ITwoPaneViewStatics>{ 0x3275839B,0x59C2,0x5403,{ 0xA6,0xB7,0x8B,0x21,0xEC,0xD6,0xAB,0xA3 } }; // 3275839B-59C2-5403-A6B7-8B21ECD6ABA3
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IUniformGridLayout>{ 0x86B441FD,0x35EE,0x5164,{ 0x9E,0xC7,0xB9,0x25,0x42,0x64,0x8B,0x4B } }; // 86B441FD-35EE-5164-9EC7-B92542648B4B
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IUniformGridLayoutFactory>{ 0x0D9ED808,0xF3F9,0x5034,{ 0x96,0x27,0x15,0x2B,0x91,0xE9,0x1B,0x4B } }; // 0D9ED808-F3F9-5034-9627-152B91E91B4B
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IUniformGridLayoutStatics>{ 0xE1059BCE,0x59D9,0x52C9,{ 0x8C,0x0D,0xC5,0xFB,0x86,0xE8,0x33,0xA1 } }; // E1059BCE-59D9-52C9-8C0D-C5FB86E833A1
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IVirtualizingLayout>{ 0x54857CE0,0xB9E6,0x51A3,{ 0xBF,0xA8,0xDC,0xD8,0xEE,0x30,0x6D,0x5C } }; // 54857CE0-B9E6-51A3-BFA8-DCD8EE306D5C
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContext>{ 0x283143F4,0x3716,0x5001,{ 0x90,0xAD,0x10,0x79,0xF2,0x0D,0xF4,0xBA } }; // 283143F4-3716-5001-90AD-1079F20DF4BA
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextFactory>{ 0x3F790B67,0xFDFB,0x505A,{ 0x8B,0x85,0x62,0x10,0x50,0x6D,0xF3,0x11 } }; // 3F790B67-FDFB-505A-8B85-6210506DF311
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextOverrides>{ 0x99CFBBD0,0xAC69,0x54EC,{ 0x91,0xEE,0x27,0xD4,0x86,0x4D,0xE4,0x0F } }; // 99CFBBD0-AC69-54EC-91EE-27D4864DE40F
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IVirtualizingLayoutFactory>{ 0xC7C128E1,0x5DF7,0x5345,{ 0xB5,0xCD,0x43,0xAF,0xDF,0xA9,0x48,0xB4 } }; // C7C128E1-5DF7-5345-B5CD-43AFDFA948B4
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IVirtualizingLayoutOverrides>{ 0xD9996F1E,0x62BE,0x515E,{ 0x84,0x3D,0x08,0x35,0x06,0xDF,0x3E,0x7D } }; // D9996F1E-62BE-515E-843D-083506DF3E7D
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IXamlControlsResources>{ 0x0E35A094,0x868E,0x5FBE,{ 0xA9,0x2E,0x2E,0x22,0x4A,0x78,0x1D,0xD5 } }; // 0E35A094-868E-5FBE-A92E-2E224A781DD5
    template <> inline constexpr guid guid_v<Microsoft::UI::Xaml::Controls::IXamlControlsResourcesStatics>{ 0x8FB9EB9B,0x850A,0x5225,{ 0x96,0xCF,0xA7,0x20,0x36,0x04,0x33,0x42 } }; // 8FB9EB9B-850A-5225-96CF-A72036043342
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::AnimatedVisualPlayer>{ using type = Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayer; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::BitmapIconSource>{ using type = Microsoft::UI::Xaml::Controls::IBitmapIconSource; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::ColorChangedEventArgs>{ using type = Microsoft::UI::Xaml::Controls::IColorChangedEventArgs; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::ColorPicker>{ using type = Microsoft::UI::Xaml::Controls::IColorPicker; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::CommandBarFlyout>{ using type = Microsoft::UI::Xaml::Controls::ICommandBarFlyout; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::DropDownButton>{ using type = Microsoft::UI::Xaml::Controls::IDropDownButton; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::ElementFactoryGetArgs>{ using type = Microsoft::UI::Xaml::Controls::IElementFactoryGetArgs; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::ElementFactoryRecycleArgs>{ using type = Microsoft::UI::Xaml::Controls::IElementFactoryRecycleArgs; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::FontIconSource>{ using type = Microsoft::UI::Xaml::Controls::IFontIconSource; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::IconSource>{ using type = Microsoft::UI::Xaml::Controls::IIconSource; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::ItemsRepeater>{ using type = Microsoft::UI::Xaml::Controls::IItemsRepeater; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::ItemsRepeaterElementClearingEventArgs>{ using type = Microsoft::UI::Xaml::Controls::IItemsRepeaterElementClearingEventArgs; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::ItemsRepeaterElementIndexChangedEventArgs>{ using type = Microsoft::UI::Xaml::Controls::IItemsRepeaterElementIndexChangedEventArgs; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::ItemsRepeaterElementPreparedEventArgs>{ using type = Microsoft::UI::Xaml::Controls::IItemsRepeaterElementPreparedEventArgs; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::ItemsRepeaterScrollHost>{ using type = Microsoft::UI::Xaml::Controls::IItemsRepeaterScrollHost; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::ItemsSourceView>{ using type = Microsoft::UI::Xaml::Controls::IItemsSourceView; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::Layout>{ using type = Microsoft::UI::Xaml::Controls::ILayout; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::LayoutContext>{ using type = Microsoft::UI::Xaml::Controls::ILayoutContext; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::MenuBar>{ using type = Microsoft::UI::Xaml::Controls::IMenuBar; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::MenuBarItem>{ using type = Microsoft::UI::Xaml::Controls::IMenuBarItem; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::MenuBarItemFlyout>{ using type = Microsoft::UI::Xaml::Controls::IMenuBarItemFlyout; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::NavigationView>{ using type = Microsoft::UI::Xaml::Controls::INavigationView; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::NavigationViewBackRequestedEventArgs>{ using type = Microsoft::UI::Xaml::Controls::INavigationViewBackRequestedEventArgs; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::NavigationViewDisplayModeChangedEventArgs>{ using type = Microsoft::UI::Xaml::Controls::INavigationViewDisplayModeChangedEventArgs; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::NavigationViewItem>{ using type = Microsoft::UI::Xaml::Controls::INavigationViewItem; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::NavigationViewItemBase>{ using type = Microsoft::UI::Xaml::Controls::INavigationViewItemBase; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::NavigationViewItemCollapsedEventArgs>{ using type = Microsoft::UI::Xaml::Controls::INavigationViewItemCollapsedEventArgs; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::NavigationViewItemExpandingEventArgs>{ using type = Microsoft::UI::Xaml::Controls::INavigationViewItemExpandingEventArgs; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::NavigationViewItemHeader>{ using type = Microsoft::UI::Xaml::Controls::INavigationViewItemHeader; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::NavigationViewItemInvokedEventArgs>{ using type = Microsoft::UI::Xaml::Controls::INavigationViewItemInvokedEventArgs; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::NavigationViewItemSeparator>{ using type = Microsoft::UI::Xaml::Controls::INavigationViewItemSeparator; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::NavigationViewPaneClosingEventArgs>{ using type = Microsoft::UI::Xaml::Controls::INavigationViewPaneClosingEventArgs; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::NavigationViewSelectionChangedEventArgs>{ using type = Microsoft::UI::Xaml::Controls::INavigationViewSelectionChangedEventArgs; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::NavigationViewTemplateSettings>{ using type = Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettings; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::NonVirtualizingLayout>{ using type = Microsoft::UI::Xaml::Controls::INonVirtualizingLayout; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::NonVirtualizingLayoutContext>{ using type = Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContext; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::NumberBox>{ using type = Microsoft::UI::Xaml::Controls::INumberBox; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::NumberBoxValueChangedEventArgs>{ using type = Microsoft::UI::Xaml::Controls::INumberBoxValueChangedEventArgs; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::ParallaxView>{ using type = Microsoft::UI::Xaml::Controls::IParallaxView; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::PathIconSource>{ using type = Microsoft::UI::Xaml::Controls::IPathIconSource; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::PersonPicture>{ using type = Microsoft::UI::Xaml::Controls::IPersonPicture; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::PersonPictureTemplateSettings>{ using type = Microsoft::UI::Xaml::Controls::IPersonPictureTemplateSettings; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::ProgressBar>{ using type = Microsoft::UI::Xaml::Controls::IProgressBar; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::ProgressBarTemplateSettings>{ using type = Microsoft::UI::Xaml::Controls::IProgressBarTemplateSettings; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::ProgressRing>{ using type = Microsoft::UI::Xaml::Controls::IProgressRing; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::ProgressRingTemplateSettings>{ using type = Microsoft::UI::Xaml::Controls::IProgressRingTemplateSettings; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::RadioButtons>{ using type = Microsoft::UI::Xaml::Controls::IRadioButtons; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::RadioMenuFlyoutItem>{ using type = Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItem; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::RatingControl>{ using type = Microsoft::UI::Xaml::Controls::IRatingControl; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::RatingItemFontInfo>{ using type = Microsoft::UI::Xaml::Controls::IRatingItemFontInfo; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::RatingItemImageInfo>{ using type = Microsoft::UI::Xaml::Controls::IRatingItemImageInfo; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::RatingItemInfo>{ using type = Microsoft::UI::Xaml::Controls::IRatingItemInfo; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::RefreshContainer>{ using type = Microsoft::UI::Xaml::Controls::IRefreshContainer; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::RefreshInteractionRatioChangedEventArgs>{ using type = Microsoft::UI::Xaml::Controls::IRefreshInteractionRatioChangedEventArgs; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::RefreshRequestedEventArgs>{ using type = Microsoft::UI::Xaml::Controls::IRefreshRequestedEventArgs; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::RefreshStateChangedEventArgs>{ using type = Microsoft::UI::Xaml::Controls::IRefreshStateChangedEventArgs; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::RefreshVisualizer>{ using type = Microsoft::UI::Xaml::Controls::IRefreshVisualizer; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::RevealListViewItemPresenter>{ using type = Microsoft::UI::Xaml::Controls::IRevealListViewItemPresenter; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::SplitButton>{ using type = Microsoft::UI::Xaml::Controls::ISplitButton; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::SplitButtonClickEventArgs>{ using type = Microsoft::UI::Xaml::Controls::ISplitButtonClickEventArgs; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::StackLayout>{ using type = Microsoft::UI::Xaml::Controls::IStackLayout; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::SwipeControl>{ using type = Microsoft::UI::Xaml::Controls::ISwipeControl; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::SwipeItem>{ using type = Microsoft::UI::Xaml::Controls::ISwipeItem; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::SwipeItemInvokedEventArgs>{ using type = Microsoft::UI::Xaml::Controls::ISwipeItemInvokedEventArgs; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::SwipeItems>{ using type = Microsoft::UI::Xaml::Controls::ISwipeItems; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::SymbolIconSource>{ using type = Microsoft::UI::Xaml::Controls::ISymbolIconSource; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::TabView>{ using type = Microsoft::UI::Xaml::Controls::ITabView; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::TabViewItem>{ using type = Microsoft::UI::Xaml::Controls::ITabViewItem; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::TabViewItemTemplateSettings>{ using type = Microsoft::UI::Xaml::Controls::ITabViewItemTemplateSettings; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::TabViewTabCloseRequestedEventArgs>{ using type = Microsoft::UI::Xaml::Controls::ITabViewTabCloseRequestedEventArgs; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::TabViewTabDragCompletedEventArgs>{ using type = Microsoft::UI::Xaml::Controls::ITabViewTabDragCompletedEventArgs; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::TabViewTabDragStartingEventArgs>{ using type = Microsoft::UI::Xaml::Controls::ITabViewTabDragStartingEventArgs; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::TabViewTabDroppedOutsideEventArgs>{ using type = Microsoft::UI::Xaml::Controls::ITabViewTabDroppedOutsideEventArgs; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::TeachingTip>{ using type = Microsoft::UI::Xaml::Controls::ITeachingTip; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::TeachingTipClosedEventArgs>{ using type = Microsoft::UI::Xaml::Controls::ITeachingTipClosedEventArgs; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::TeachingTipClosingEventArgs>{ using type = Microsoft::UI::Xaml::Controls::ITeachingTipClosingEventArgs; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::TeachingTipTemplateSettings>{ using type = Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettings; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::TextCommandBarFlyout>{ using type = Microsoft::UI::Xaml::Controls::ITextCommandBarFlyout; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::ToggleSplitButton>{ using type = Microsoft::UI::Xaml::Controls::IToggleSplitButton; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::ToggleSplitButtonIsCheckedChangedEventArgs>{ using type = Microsoft::UI::Xaml::Controls::IToggleSplitButtonIsCheckedChangedEventArgs; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::TreeView>{ using type = Microsoft::UI::Xaml::Controls::ITreeView; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::TreeViewCollapsedEventArgs>{ using type = Microsoft::UI::Xaml::Controls::ITreeViewCollapsedEventArgs; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::TreeViewDragItemsCompletedEventArgs>{ using type = Microsoft::UI::Xaml::Controls::ITreeViewDragItemsCompletedEventArgs; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::TreeViewDragItemsStartingEventArgs>{ using type = Microsoft::UI::Xaml::Controls::ITreeViewDragItemsStartingEventArgs; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::TreeViewExpandingEventArgs>{ using type = Microsoft::UI::Xaml::Controls::ITreeViewExpandingEventArgs; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::TreeViewItem>{ using type = Microsoft::UI::Xaml::Controls::ITreeViewItem; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::TreeViewItemInvokedEventArgs>{ using type = Microsoft::UI::Xaml::Controls::ITreeViewItemInvokedEventArgs; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::TreeViewItemTemplateSettings>{ using type = Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettings; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::TreeViewList>{ using type = Microsoft::UI::Xaml::Controls::ITreeViewList; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::TreeViewNode>{ using type = Microsoft::UI::Xaml::Controls::ITreeViewNode; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::TwoPaneView>{ using type = Microsoft::UI::Xaml::Controls::ITwoPaneView; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::UniformGridLayout>{ using type = Microsoft::UI::Xaml::Controls::IUniformGridLayout; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::VirtualizingLayout>{ using type = Microsoft::UI::Xaml::Controls::IVirtualizingLayout; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext>{ using type = Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContext; };
    template <> struct default_interface<Microsoft::UI::Xaml::Controls::XamlControlsResources>{ using type = Microsoft::UI::Xaml::Controls::IXamlControlsResources; };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IAnimatedVisual>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_RootVisual(void**) noexcept = 0;
            virtual int32_t __stdcall get_Size(Windows::Foundation::Numerics::float2*) noexcept = 0;
            virtual int32_t __stdcall get_Duration(int64_t*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayer>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Diagnostics(void**) noexcept = 0;
            virtual int32_t __stdcall get_Duration(int64_t*) noexcept = 0;
            virtual int32_t __stdcall get_Source(void**) noexcept = 0;
            virtual int32_t __stdcall put_Source(void*) noexcept = 0;
            virtual int32_t __stdcall get_FallbackContent(void**) noexcept = 0;
            virtual int32_t __stdcall put_FallbackContent(void*) noexcept = 0;
            virtual int32_t __stdcall get_AutoPlay(bool*) noexcept = 0;
            virtual int32_t __stdcall put_AutoPlay(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsAnimatedVisualLoaded(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsPlaying(bool*) noexcept = 0;
            virtual int32_t __stdcall get_PlaybackRate(double*) noexcept = 0;
            virtual int32_t __stdcall put_PlaybackRate(double) noexcept = 0;
            virtual int32_t __stdcall get_ProgressObject(void**) noexcept = 0;
            virtual int32_t __stdcall get_Stretch(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Stretch(int32_t) noexcept = 0;
            virtual int32_t __stdcall Pause() noexcept = 0;
            virtual int32_t __stdcall PlayAsync(double, double, bool, void**) noexcept = 0;
            virtual int32_t __stdcall Resume() noexcept = 0;
            virtual int32_t __stdcall SetProgress(double) noexcept = 0;
            virtual int32_t __stdcall Stop() noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_AutoPlayProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DiagnosticsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DurationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FallbackContentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsAnimatedVisualLoadedProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsPlayingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PlaybackRateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_StretchProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IAnimatedVisualSource>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall TryCreateAnimatedVisual(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IBitmapIconSource>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_UriSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_UriSource(void*) noexcept = 0;
            virtual int32_t __stdcall get_ShowAsMonochrome(bool*) noexcept = 0;
            virtual int32_t __stdcall put_ShowAsMonochrome(bool) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IBitmapIconSourceFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IBitmapIconSourceStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_UriSourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ShowAsMonochromeProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IColorChangedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_OldColor(struct struct_Windows_UI_Color*) noexcept = 0;
            virtual int32_t __stdcall get_NewColor(struct struct_Windows_UI_Color*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IColorPicker>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Color(struct struct_Windows_UI_Color*) noexcept = 0;
            virtual int32_t __stdcall put_Color(struct struct_Windows_UI_Color) noexcept = 0;
            virtual int32_t __stdcall get_PreviousColor(void**) noexcept = 0;
            virtual int32_t __stdcall put_PreviousColor(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsAlphaEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsAlphaEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsColorSpectrumVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsColorSpectrumVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsColorPreviewVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsColorPreviewVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsColorSliderVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsColorSliderVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsAlphaSliderVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsAlphaSliderVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsMoreButtonVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsMoreButtonVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsColorChannelTextInputVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsColorChannelTextInputVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsAlphaTextInputVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsAlphaTextInputVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsHexInputVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsHexInputVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_MinHue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MinHue(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_MaxHue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaxHue(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_MinSaturation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MinSaturation(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_MaxSaturation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaxSaturation(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_MinValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MinValue(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_MaxValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaxValue(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ColorSpectrumShape(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ColorSpectrumShape(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ColorSpectrumComponents(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ColorSpectrumComponents(int32_t) noexcept = 0;
            virtual int32_t __stdcall add_ColorChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ColorChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IColorPickerFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IColorPickerStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ColorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PreviousColorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsAlphaEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsColorSpectrumVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsColorPreviewVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsColorSliderVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsAlphaSliderVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsMoreButtonVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsColorChannelTextInputVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsAlphaTextInputVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsHexInputVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinHueProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxHueProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinSaturationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxSaturationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinValueProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxValueProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ColorSpectrumShapeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ColorSpectrumComponentsProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ICommandBarFlyout>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_PrimaryCommands(void**) noexcept = 0;
            virtual int32_t __stdcall get_SecondaryCommands(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ICommandBarFlyoutFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IDropDownButton>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IDropDownButtonFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IDynamicAnimatedVisualSource>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall add_AnimatedVisualInvalidated(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_AnimatedVisualInvalidated(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IElementFactoryGetArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Data(void**) noexcept = 0;
            virtual int32_t __stdcall put_Data(void*) noexcept = 0;
            virtual int32_t __stdcall get_Parent(void**) noexcept = 0;
            virtual int32_t __stdcall put_Parent(void*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IElementFactoryRecycleArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Element(void**) noexcept = 0;
            virtual int32_t __stdcall put_Element(void*) noexcept = 0;
            virtual int32_t __stdcall get_Parent(void**) noexcept = 0;
            virtual int32_t __stdcall put_Parent(void*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IFontIconSource>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Glyph(void**) noexcept = 0;
            virtual int32_t __stdcall put_Glyph(void*) noexcept = 0;
            virtual int32_t __stdcall get_FontSize(double*) noexcept = 0;
            virtual int32_t __stdcall put_FontSize(double) noexcept = 0;
            virtual int32_t __stdcall get_FontFamily(void**) noexcept = 0;
            virtual int32_t __stdcall put_FontFamily(void*) noexcept = 0;
            virtual int32_t __stdcall get_FontWeight(struct struct_Windows_UI_Text_FontWeight*) noexcept = 0;
            virtual int32_t __stdcall put_FontWeight(struct struct_Windows_UI_Text_FontWeight) noexcept = 0;
            virtual int32_t __stdcall get_FontStyle(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_FontStyle(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsTextScaleFactorEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsTextScaleFactorEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_MirroredWhenRightToLeft(bool*) noexcept = 0;
            virtual int32_t __stdcall put_MirroredWhenRightToLeft(bool) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IFontIconSourceFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IFontIconSourceStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_GlyphProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontSizeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontFamilyProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontWeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_FontStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsTextScaleFactorEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MirroredWhenRightToLeftProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IIconSource>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Foreground(void**) noexcept = 0;
            virtual int32_t __stdcall put_Foreground(void*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IIconSourceFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IIconSourceStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ForegroundProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IItemsRepeater>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ItemsSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemsSource(void*) noexcept = 0;
            virtual int32_t __stdcall get_ItemsSourceView(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_Layout(void**) noexcept = 0;
            virtual int32_t __stdcall put_Layout(void*) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalCacheLength(double*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalCacheLength(double) noexcept = 0;
            virtual int32_t __stdcall get_VerticalCacheLength(double*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalCacheLength(double) noexcept = 0;
            virtual int32_t __stdcall get_Background(void**) noexcept = 0;
            virtual int32_t __stdcall put_Background(void*) noexcept = 0;
            virtual int32_t __stdcall GetElementIndex(void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall TryGetElement(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall GetOrCreateElement(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall add_ElementPrepared(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ElementPrepared(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ElementClearing(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ElementClearing(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ElementIndexChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ElementIndexChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IItemsRepeaterElementClearingEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Element(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IItemsRepeaterElementIndexChangedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Element(void**) noexcept = 0;
            virtual int32_t __stdcall get_OldIndex(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_NewIndex(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IItemsRepeaterElementPreparedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Element(void**) noexcept = 0;
            virtual int32_t __stdcall get_Index(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IItemsRepeaterFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IItemsRepeaterScrollHost>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ScrollViewer(void**) noexcept = 0;
            virtual int32_t __stdcall put_ScrollViewer(void*) noexcept = 0;
            virtual int32_t __stdcall get_CurrentAnchor(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalAnchorRatio(double*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalAnchorRatio(double) noexcept = 0;
            virtual int32_t __stdcall get_VerticalAnchorRatio(double*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalAnchorRatio(double) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IItemsRepeaterStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ItemsSourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_LayoutProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_AnimatorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalCacheLengthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalCacheLengthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BackgroundProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IItemsSourceView>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Count(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetAt(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall get_HasKeyIndexMapping(bool*) noexcept = 0;
            virtual int32_t __stdcall KeyFromIndex(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall IndexFromKey(void*, int32_t*) noexcept = 0;
            virtual int32_t __stdcall IndexOf(void*, int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IItemsSourceViewFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IKeyIndexMapping>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall KeyFromIndex(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall IndexFromKey(void*, int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ILayout>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall InitializeForContext(void*) noexcept = 0;
            virtual int32_t __stdcall UninitializeForContext(void*) noexcept = 0;
            virtual int32_t __stdcall Measure(void*, Windows::Foundation::Size, Windows::Foundation::Size*) noexcept = 0;
            virtual int32_t __stdcall Arrange(void*, Windows::Foundation::Size, Windows::Foundation::Size*) noexcept = 0;
            virtual int32_t __stdcall add_MeasureInvalidated(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_MeasureInvalidated(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ArrangeInvalidated(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ArrangeInvalidated(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ILayoutContext>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_LayoutState(void**) noexcept = 0;
            virtual int32_t __stdcall put_LayoutState(void*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ILayoutContextFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ILayoutContextOverrides>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_LayoutStateCore(void**) noexcept = 0;
            virtual int32_t __stdcall put_LayoutStateCore(void*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ILayoutFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ILayoutProtected>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall InvalidateMeasure() noexcept = 0;
            virtual int32_t __stdcall InvalidateArrange() noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IMenuBar>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Items(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IMenuBarFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IMenuBarItem>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Title(void**) noexcept = 0;
            virtual int32_t __stdcall put_Title(void*) noexcept = 0;
            virtual int32_t __stdcall get_Items(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IMenuBarItemFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IMenuBarItemFlyout>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IMenuBarItemFlyoutFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IMenuBarItemStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_TitleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemsProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IMenuBarStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ItemsProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::INavigationView>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsPaneOpen(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsPaneOpen(bool) noexcept = 0;
            virtual int32_t __stdcall get_CompactModeThresholdWidth(double*) noexcept = 0;
            virtual int32_t __stdcall put_CompactModeThresholdWidth(double) noexcept = 0;
            virtual int32_t __stdcall get_ExpandedModeThresholdWidth(double*) noexcept = 0;
            virtual int32_t __stdcall put_ExpandedModeThresholdWidth(double) noexcept = 0;
            virtual int32_t __stdcall get_PaneFooter(void**) noexcept = 0;
            virtual int32_t __stdcall put_PaneFooter(void*) noexcept = 0;
            virtual int32_t __stdcall get_Header(void**) noexcept = 0;
            virtual int32_t __stdcall put_Header(void*) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeaderTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_DisplayMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_IsSettingsVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsSettingsVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsPaneToggleButtonVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsPaneToggleButtonVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_AlwaysShowHeader(bool*) noexcept = 0;
            virtual int32_t __stdcall put_AlwaysShowHeader(bool) noexcept = 0;
            virtual int32_t __stdcall get_CompactPaneLength(double*) noexcept = 0;
            virtual int32_t __stdcall put_CompactPaneLength(double) noexcept = 0;
            virtual int32_t __stdcall get_OpenPaneLength(double*) noexcept = 0;
            virtual int32_t __stdcall put_OpenPaneLength(double) noexcept = 0;
            virtual int32_t __stdcall get_PaneToggleButtonStyle(void**) noexcept = 0;
            virtual int32_t __stdcall put_PaneToggleButtonStyle(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedItem(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedItem(void*) noexcept = 0;
            virtual int32_t __stdcall get_MenuItems(void**) noexcept = 0;
            virtual int32_t __stdcall get_MenuItemsSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_MenuItemsSource(void*) noexcept = 0;
            virtual int32_t __stdcall get_SettingsItem(void**) noexcept = 0;
            virtual int32_t __stdcall get_AutoSuggestBox(void**) noexcept = 0;
            virtual int32_t __stdcall put_AutoSuggestBox(void*) noexcept = 0;
            virtual int32_t __stdcall get_MenuItemTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_MenuItemTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_MenuItemTemplateSelector(void**) noexcept = 0;
            virtual int32_t __stdcall put_MenuItemTemplateSelector(void*) noexcept = 0;
            virtual int32_t __stdcall get_MenuItemContainerStyle(void**) noexcept = 0;
            virtual int32_t __stdcall put_MenuItemContainerStyle(void*) noexcept = 0;
            virtual int32_t __stdcall get_MenuItemContainerStyleSelector(void**) noexcept = 0;
            virtual int32_t __stdcall put_MenuItemContainerStyleSelector(void*) noexcept = 0;
            virtual int32_t __stdcall MenuItemFromContainer(void*, void**) noexcept = 0;
            virtual int32_t __stdcall ContainerFromMenuItem(void*, void**) noexcept = 0;
            virtual int32_t __stdcall add_SelectionChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_SelectionChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ItemInvoked(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ItemInvoked(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_DisplayModeChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_DisplayModeChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall get_IsBackButtonVisible(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_IsBackButtonVisible(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsBackEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsBackEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_PaneTitle(void**) noexcept = 0;
            virtual int32_t __stdcall put_PaneTitle(void*) noexcept = 0;
            virtual int32_t __stdcall add_BackRequested(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_BackRequested(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_PaneClosed(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PaneClosed(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_PaneClosing(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PaneClosing(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_PaneOpened(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PaneOpened(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_PaneOpening(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PaneOpening(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall get_PaneDisplayMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_PaneDisplayMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_PaneHeader(void**) noexcept = 0;
            virtual int32_t __stdcall put_PaneHeader(void*) noexcept = 0;
            virtual int32_t __stdcall get_PaneCustomContent(void**) noexcept = 0;
            virtual int32_t __stdcall put_PaneCustomContent(void*) noexcept = 0;
            virtual int32_t __stdcall get_ContentOverlay(void**) noexcept = 0;
            virtual int32_t __stdcall put_ContentOverlay(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsPaneVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsPaneVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_SelectionFollowsFocus(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_SelectionFollowsFocus(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_TemplateSettings(void**) noexcept = 0;
            virtual int32_t __stdcall get_ShoulderNavigationEnabled(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ShoulderNavigationEnabled(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_OverflowLabelMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_OverflowLabelMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsTitleBarAutoPaddingEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsTitleBarAutoPaddingEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall add_Expanding(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Expanding(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Collapsed(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Collapsed(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall Expand(void*) noexcept = 0;
            virtual int32_t __stdcall Collapse(void*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::INavigationViewBackRequestedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::INavigationViewDisplayModeChangedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_DisplayMode(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::INavigationViewFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::INavigationViewItem>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Icon(void**) noexcept = 0;
            virtual int32_t __stdcall put_Icon(void*) noexcept = 0;
            virtual int32_t __stdcall get_CompactPaneLength(double*) noexcept = 0;
            virtual int32_t __stdcall get_SelectsOnInvoked(bool*) noexcept = 0;
            virtual int32_t __stdcall put_SelectsOnInvoked(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsExpanded(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsExpanded(bool) noexcept = 0;
            virtual int32_t __stdcall get_HasUnrealizedChildren(bool*) noexcept = 0;
            virtual int32_t __stdcall put_HasUnrealizedChildren(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsChildSelected(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsChildSelected(bool) noexcept = 0;
            virtual int32_t __stdcall get_MenuItems(void**) noexcept = 0;
            virtual int32_t __stdcall get_MenuItemsSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_MenuItemsSource(void*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::INavigationViewItemBase>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsSelected(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsSelected(bool) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::INavigationViewItemBaseFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::INavigationViewItemBaseStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsSelectedProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::INavigationViewItemCollapsedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_CollapsedItemContainer(void**) noexcept = 0;
            virtual int32_t __stdcall get_CollapsedItem(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::INavigationViewItemExpandingEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ExpandingItemContainer(void**) noexcept = 0;
            virtual int32_t __stdcall get_ExpandingItem(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::INavigationViewItemFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::INavigationViewItemHeader>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::INavigationViewItemHeaderFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::INavigationViewItemInvokedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_InvokedItem(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsSettingsInvoked(bool*) noexcept = 0;
            virtual int32_t __stdcall get_InvokedItemContainer(void**) noexcept = 0;
            virtual int32_t __stdcall get_RecommendedNavigationTransitionInfo(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::INavigationViewItemSeparator>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::INavigationViewItemSeparatorFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::INavigationViewItemStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IconProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CompactPaneLengthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectsOnInvokedProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsExpandedProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HasUnrealizedChildrenProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsChildSelectedProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MenuItemsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MenuItemsSourceProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::INavigationViewPaneClosingEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Cancel(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Cancel(bool) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::INavigationViewSelectionChangedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SelectedItem(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsSettingsSelected(bool*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedItemContainer(void**) noexcept = 0;
            virtual int32_t __stdcall get_RecommendedNavigationTransitionInfo(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::INavigationViewStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsPaneOpenProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CompactModeThresholdWidthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ExpandedModeThresholdWidthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PaneFooterProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DisplayModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsSettingsVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsPaneToggleButtonVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_AlwaysShowHeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CompactPaneLengthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OpenPaneLengthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PaneToggleButtonStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MenuItemsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MenuItemsSourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedItemProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SettingsItemProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_AutoSuggestBoxProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MenuItemTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MenuItemTemplateSelectorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MenuItemContainerStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MenuItemContainerStyleSelectorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsBackButtonVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsBackEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PaneTitleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PaneDisplayModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PaneHeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PaneCustomContentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContentOverlayProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsPaneVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionFollowsFocusProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TemplateSettingsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ShoulderNavigationEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OverflowLabelModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsTitleBarAutoPaddingEnabledProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettings>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_TopPadding(double*) noexcept = 0;
            virtual int32_t __stdcall get_OverflowButtonVisibility(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_PaneToggleButtonVisibility(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_BackButtonVisibility(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_TopPaneVisibility(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_LeftPaneVisibility(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_SingleSelectionFollowsFocus(bool*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_TopPaddingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OverflowButtonVisibilityProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PaneToggleButtonVisibilityProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BackButtonVisibilityProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TopPaneVisibilityProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_LeftPaneVisibilityProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SingleSelectionFollowsFocusProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::INonVirtualizingLayout>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContext>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Children(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContextFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContextOverrides>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ChildrenCore(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutOverrides>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall InitializeForContextCore(void*) noexcept = 0;
            virtual int32_t __stdcall UninitializeForContextCore(void*) noexcept = 0;
            virtual int32_t __stdcall MeasureOverride(void*, Windows::Foundation::Size, Windows::Foundation::Size*) noexcept = 0;
            virtual int32_t __stdcall ArrangeOverride(void*, Windows::Foundation::Size, Windows::Foundation::Size*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::INumberBox>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Minimum(double*) noexcept = 0;
            virtual int32_t __stdcall put_Minimum(double) noexcept = 0;
            virtual int32_t __stdcall get_Maximum(double*) noexcept = 0;
            virtual int32_t __stdcall put_Maximum(double) noexcept = 0;
            virtual int32_t __stdcall get_Value(double*) noexcept = 0;
            virtual int32_t __stdcall put_Value(double) noexcept = 0;
            virtual int32_t __stdcall get_SmallChange(double*) noexcept = 0;
            virtual int32_t __stdcall put_SmallChange(double) noexcept = 0;
            virtual int32_t __stdcall get_LargeChange(double*) noexcept = 0;
            virtual int32_t __stdcall put_LargeChange(double) noexcept = 0;
            virtual int32_t __stdcall get_Text(void**) noexcept = 0;
            virtual int32_t __stdcall put_Text(void*) noexcept = 0;
            virtual int32_t __stdcall get_Header(void**) noexcept = 0;
            virtual int32_t __stdcall put_Header(void*) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeaderTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderText(void**) noexcept = 0;
            virtual int32_t __stdcall put_PlaceholderText(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectionFlyout(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectionFlyout(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectionHighlightColor(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectionHighlightColor(void*) noexcept = 0;
            virtual int32_t __stdcall get_TextReadingOrder(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TextReadingOrder(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_PreventKeyboardDisplayOnProgrammaticFocus(bool*) noexcept = 0;
            virtual int32_t __stdcall put_PreventKeyboardDisplayOnProgrammaticFocus(bool) noexcept = 0;
            virtual int32_t __stdcall get_Description(void**) noexcept = 0;
            virtual int32_t __stdcall put_Description(void*) noexcept = 0;
            virtual int32_t __stdcall get_ValidationMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ValidationMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_SpinButtonPlacementMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_SpinButtonPlacementMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsWrapEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsWrapEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_AcceptsExpression(bool*) noexcept = 0;
            virtual int32_t __stdcall put_AcceptsExpression(bool) noexcept = 0;
            virtual int32_t __stdcall get_NumberFormatter(void**) noexcept = 0;
            virtual int32_t __stdcall put_NumberFormatter(void*) noexcept = 0;
            virtual int32_t __stdcall add_ValueChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ValueChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::INumberBoxFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::INumberBoxStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_MinimumProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaximumProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ValueProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SmallChangeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_LargeChangeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderTextProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionFlyoutProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionHighlightColorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextReadingOrderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PreventKeyboardDisplayOnProgrammaticFocusProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DescriptionProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ValidationModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SpinButtonPlacementModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsWrapEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_AcceptsExpressionProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_NumberFormatterProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::INumberBoxValueChangedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_OldValue(double*) noexcept = 0;
            virtual int32_t __stdcall get_NewValue(double*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IParallaxView>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Child(void**) noexcept = 0;
            virtual int32_t __stdcall put_Child(void*) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalShift(double*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalShift(double) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalSourceEndOffset(double*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalSourceEndOffset(double) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalSourceOffsetKind(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalSourceOffsetKind(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalSourceStartOffset(double*) noexcept = 0;
            virtual int32_t __stdcall put_HorizontalSourceStartOffset(double) noexcept = 0;
            virtual int32_t __stdcall get_IsHorizontalShiftClamped(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsHorizontalShiftClamped(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsVerticalShiftClamped(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsVerticalShiftClamped(bool) noexcept = 0;
            virtual int32_t __stdcall get_MaxHorizontalShiftRatio(double*) noexcept = 0;
            virtual int32_t __stdcall put_MaxHorizontalShiftRatio(double) noexcept = 0;
            virtual int32_t __stdcall get_MaxVerticalShiftRatio(double*) noexcept = 0;
            virtual int32_t __stdcall put_MaxVerticalShiftRatio(double) noexcept = 0;
            virtual int32_t __stdcall get_Source(void**) noexcept = 0;
            virtual int32_t __stdcall put_Source(void*) noexcept = 0;
            virtual int32_t __stdcall get_VerticalShift(double*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalShift(double) noexcept = 0;
            virtual int32_t __stdcall get_VerticalSourceEndOffset(double*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalSourceEndOffset(double) noexcept = 0;
            virtual int32_t __stdcall get_VerticalSourceOffsetKind(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalSourceOffsetKind(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_VerticalSourceStartOffset(double*) noexcept = 0;
            virtual int32_t __stdcall put_VerticalSourceStartOffset(double) noexcept = 0;
            virtual int32_t __stdcall RefreshAutomaticHorizontalOffsets() noexcept = 0;
            virtual int32_t __stdcall RefreshAutomaticVerticalOffsets() noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IParallaxViewFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IParallaxViewStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ChildProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalSourceEndOffsetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalSourceOffsetKindProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalSourceStartOffsetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxHorizontalShiftRatioProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HorizontalShiftProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsHorizontalShiftClampedProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsVerticalShiftClampedProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalSourceEndOffsetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalSourceOffsetKindProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalSourceStartOffsetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxVerticalShiftRatioProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_VerticalShiftProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IPathIconSource>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Data(void**) noexcept = 0;
            virtual int32_t __stdcall put_Data(void*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IPathIconSourceFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IPathIconSourceStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_DataProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IPersonPicture>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_BadgeNumber(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_BadgeNumber(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_BadgeGlyph(void**) noexcept = 0;
            virtual int32_t __stdcall put_BadgeGlyph(void*) noexcept = 0;
            virtual int32_t __stdcall get_BadgeImageSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_BadgeImageSource(void*) noexcept = 0;
            virtual int32_t __stdcall get_BadgeText(void**) noexcept = 0;
            virtual int32_t __stdcall put_BadgeText(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsGroup(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsGroup(bool) noexcept = 0;
            virtual int32_t __stdcall get_Contact(void**) noexcept = 0;
            virtual int32_t __stdcall put_Contact(void*) noexcept = 0;
            virtual int32_t __stdcall get_DisplayName(void**) noexcept = 0;
            virtual int32_t __stdcall put_DisplayName(void*) noexcept = 0;
            virtual int32_t __stdcall get_Initials(void**) noexcept = 0;
            virtual int32_t __stdcall put_Initials(void*) noexcept = 0;
            virtual int32_t __stdcall get_PreferSmallImage(bool*) noexcept = 0;
            virtual int32_t __stdcall put_PreferSmallImage(bool) noexcept = 0;
            virtual int32_t __stdcall get_ProfilePicture(void**) noexcept = 0;
            virtual int32_t __stdcall put_ProfilePicture(void*) noexcept = 0;
            virtual int32_t __stdcall get_TemplateSettings(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IPersonPictureFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IPersonPictureStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_BadgeNumberProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BadgeGlyphProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BadgeImageSourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BadgeTextProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsGroupProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContactProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DisplayNameProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_InitialsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PreferSmallImageProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ProfilePictureProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IPersonPictureTemplateSettings>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ActualInitials(void**) noexcept = 0;
            virtual int32_t __stdcall get_ActualImageBrush(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IProgressBar>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsIndeterminate(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsIndeterminate(bool) noexcept = 0;
            virtual int32_t __stdcall get_ShowError(bool*) noexcept = 0;
            virtual int32_t __stdcall put_ShowError(bool) noexcept = 0;
            virtual int32_t __stdcall get_ShowPaused(bool*) noexcept = 0;
            virtual int32_t __stdcall put_ShowPaused(bool) noexcept = 0;
            virtual int32_t __stdcall get_TemplateSettings(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IProgressBarFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IProgressBarStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsIndeterminateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ShowErrorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ShowPausedProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IProgressBarTemplateSettings>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ContainerAnimationStartPosition(double*) noexcept = 0;
            virtual int32_t __stdcall get_ContainerAnimationEndPosition(double*) noexcept = 0;
            virtual int32_t __stdcall get_Container2AnimationStartPosition(double*) noexcept = 0;
            virtual int32_t __stdcall get_Container2AnimationEndPosition(double*) noexcept = 0;
            virtual int32_t __stdcall get_ContainerAnimationMidPosition(double*) noexcept = 0;
            virtual int32_t __stdcall get_IndicatorLengthDelta(double*) noexcept = 0;
            virtual int32_t __stdcall get_ClipRect(void**) noexcept = 0;
            virtual int32_t __stdcall get_EllipseAnimationEndPosition(double*) noexcept = 0;
            virtual int32_t __stdcall get_EllipseAnimationWellPosition(double*) noexcept = 0;
            virtual int32_t __stdcall get_EllipseDiameter(double*) noexcept = 0;
            virtual int32_t __stdcall get_EllipseOffset(double*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IProgressRing>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsActive(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsActive(bool) noexcept = 0;
            virtual int32_t __stdcall get_TemplateSettings(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IProgressRingFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IProgressRingStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsActiveProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IProgressRingTemplateSettings>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_EllipseDiameter(double*) noexcept = 0;
            virtual int32_t __stdcall get_EllipseOffset(struct struct_Windows_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall get_MaxSideLength(double*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IRadioButtons>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ItemsSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemsSource(void*) noexcept = 0;
            virtual int32_t __stdcall get_Items(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall ContainerFromIndex(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedIndex(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_SelectedIndex(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_SelectedItem(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedItem(void*) noexcept = 0;
            virtual int32_t __stdcall add_SelectionChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_SelectionChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall get_MaxColumns(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaxColumns(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Header(void**) noexcept = 0;
            virtual int32_t __stdcall put_Header(void*) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeaderTemplate(void*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IRadioButtonsFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IRadioButtonsStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ItemsSourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedIndexProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedItemProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxColumnsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplateProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItem>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsChecked(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsChecked(bool) noexcept = 0;
            virtual int32_t __stdcall get_GroupName(void**) noexcept = 0;
            virtual int32_t __stdcall put_GroupName(void*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItemFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItemStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsCheckedProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_GroupNameProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IRatingControl>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Caption(void**) noexcept = 0;
            virtual int32_t __stdcall put_Caption(void*) noexcept = 0;
            virtual int32_t __stdcall get_InitialSetValue(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_InitialSetValue(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsClearEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsClearEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsReadOnly(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsReadOnly(bool) noexcept = 0;
            virtual int32_t __stdcall get_MaxRating(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaxRating(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderValue(double*) noexcept = 0;
            virtual int32_t __stdcall put_PlaceholderValue(double) noexcept = 0;
            virtual int32_t __stdcall get_ItemInfo(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemInfo(void*) noexcept = 0;
            virtual int32_t __stdcall get_Value(double*) noexcept = 0;
            virtual int32_t __stdcall put_Value(double) noexcept = 0;
            virtual int32_t __stdcall add_ValueChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ValueChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IRatingControlFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IRatingControlStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_CaptionProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_InitialSetValueProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsClearEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsReadOnlyProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaxRatingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderValueProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemInfoProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ValueProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IRatingItemFontInfo>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_DisabledGlyph(void**) noexcept = 0;
            virtual int32_t __stdcall put_DisabledGlyph(void*) noexcept = 0;
            virtual int32_t __stdcall get_Glyph(void**) noexcept = 0;
            virtual int32_t __stdcall put_Glyph(void*) noexcept = 0;
            virtual int32_t __stdcall get_PointerOverGlyph(void**) noexcept = 0;
            virtual int32_t __stdcall put_PointerOverGlyph(void*) noexcept = 0;
            virtual int32_t __stdcall get_PointerOverPlaceholderGlyph(void**) noexcept = 0;
            virtual int32_t __stdcall put_PointerOverPlaceholderGlyph(void*) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderGlyph(void**) noexcept = 0;
            virtual int32_t __stdcall put_PlaceholderGlyph(void*) noexcept = 0;
            virtual int32_t __stdcall get_UnsetGlyph(void**) noexcept = 0;
            virtual int32_t __stdcall put_UnsetGlyph(void*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IRatingItemFontInfoFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IRatingItemFontInfoStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_DisabledGlyphProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_GlyphProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderGlyphProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PointerOverGlyphProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PointerOverPlaceholderGlyphProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_UnsetGlyphProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IRatingItemImageInfo>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_DisabledImage(void**) noexcept = 0;
            virtual int32_t __stdcall put_DisabledImage(void*) noexcept = 0;
            virtual int32_t __stdcall get_Image(void**) noexcept = 0;
            virtual int32_t __stdcall put_Image(void*) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderImage(void**) noexcept = 0;
            virtual int32_t __stdcall put_PlaceholderImage(void*) noexcept = 0;
            virtual int32_t __stdcall get_PointerOverImage(void**) noexcept = 0;
            virtual int32_t __stdcall put_PointerOverImage(void*) noexcept = 0;
            virtual int32_t __stdcall get_PointerOverPlaceholderImage(void**) noexcept = 0;
            virtual int32_t __stdcall put_PointerOverPlaceholderImage(void*) noexcept = 0;
            virtual int32_t __stdcall get_UnsetImage(void**) noexcept = 0;
            virtual int32_t __stdcall put_UnsetImage(void*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IRatingItemImageInfoFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IRatingItemImageInfoStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_DisabledImageProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ImageProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PlaceholderImageProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PointerOverImageProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PointerOverPlaceholderImageProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_UnsetImageProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IRatingItemInfo>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IRatingItemInfoFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IRefreshContainer>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Visualizer(void**) noexcept = 0;
            virtual int32_t __stdcall put_Visualizer(void*) noexcept = 0;
            virtual int32_t __stdcall get_PullDirection(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_PullDirection(int32_t) noexcept = 0;
            virtual int32_t __stdcall add_RefreshRequested(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_RefreshRequested(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall RequestRefresh() noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IRefreshContainerFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IRefreshContainerStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_VisualizerProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PullDirectionProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IRefreshInteractionRatioChangedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_InteractionRatio(double*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IRefreshRequestedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall GetDeferral(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IRefreshStateChangedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_OldState(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_NewState(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IRefreshVisualizer>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall RequestRefresh() noexcept = 0;
            virtual int32_t __stdcall get_Orientation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Orientation(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Content(void**) noexcept = 0;
            virtual int32_t __stdcall put_Content(void*) noexcept = 0;
            virtual int32_t __stdcall get_State(int32_t*) noexcept = 0;
            virtual int32_t __stdcall add_RefreshRequested(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_RefreshRequested(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_RefreshStateChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_RefreshStateChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IRefreshVisualizerFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IRefreshVisualizerStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_InfoProviderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_OrientationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_StateProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IRevealListViewItemPresenter>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IRevealListViewItemPresenterFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ISplitButton>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Flyout(void**) noexcept = 0;
            virtual int32_t __stdcall put_Flyout(void*) noexcept = 0;
            virtual int32_t __stdcall get_Command(void**) noexcept = 0;
            virtual int32_t __stdcall put_Command(void*) noexcept = 0;
            virtual int32_t __stdcall get_CommandParameter(void**) noexcept = 0;
            virtual int32_t __stdcall put_CommandParameter(void*) noexcept = 0;
            virtual int32_t __stdcall add_Click(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Click(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ISplitButtonClickEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ISplitButtonFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ISplitButtonStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_FlyoutProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CommandProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CommandParameterProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IStackLayout>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Orientation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Orientation(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Spacing(double*) noexcept = 0;
            virtual int32_t __stdcall put_Spacing(double) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IStackLayoutFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IStackLayoutStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_OrientationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SpacingProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ISwipeControl>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_LeftItems(void**) noexcept = 0;
            virtual int32_t __stdcall put_LeftItems(void*) noexcept = 0;
            virtual int32_t __stdcall get_RightItems(void**) noexcept = 0;
            virtual int32_t __stdcall put_RightItems(void*) noexcept = 0;
            virtual int32_t __stdcall get_TopItems(void**) noexcept = 0;
            virtual int32_t __stdcall put_TopItems(void*) noexcept = 0;
            virtual int32_t __stdcall get_BottomItems(void**) noexcept = 0;
            virtual int32_t __stdcall put_BottomItems(void*) noexcept = 0;
            virtual int32_t __stdcall Close() noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ISwipeControlFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ISwipeControlStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_LeftItemsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_RightItemsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TopItemsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BottomItemsProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ISwipeItem>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Text(void**) noexcept = 0;
            virtual int32_t __stdcall put_Text(void*) noexcept = 0;
            virtual int32_t __stdcall get_IconSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_IconSource(void*) noexcept = 0;
            virtual int32_t __stdcall get_Background(void**) noexcept = 0;
            virtual int32_t __stdcall put_Background(void*) noexcept = 0;
            virtual int32_t __stdcall get_Foreground(void**) noexcept = 0;
            virtual int32_t __stdcall put_Foreground(void*) noexcept = 0;
            virtual int32_t __stdcall get_Command(void**) noexcept = 0;
            virtual int32_t __stdcall put_Command(void*) noexcept = 0;
            virtual int32_t __stdcall get_CommandParameter(void**) noexcept = 0;
            virtual int32_t __stdcall put_CommandParameter(void*) noexcept = 0;
            virtual int32_t __stdcall get_BehaviorOnInvoked(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_BehaviorOnInvoked(int32_t) noexcept = 0;
            virtual int32_t __stdcall add_Invoked(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Invoked(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ISwipeItemFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ISwipeItemInvokedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SwipeControl(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ISwipeItemStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IconSourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TextProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BackgroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ForegroundProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CommandProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CommandParameterProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_BehaviorOnInvokedProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ISwipeItems>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Mode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Mode(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ISwipeItemsFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ISwipeItemsStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ModeProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ISymbolIconSource>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Symbol(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Symbol(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ISymbolIconSourceFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ISymbolIconSourceStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SymbolProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ITabView>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_TabWidthMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TabWidthMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_CloseButtonOverlayMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_CloseButtonOverlayMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_TabStripHeader(void**) noexcept = 0;
            virtual int32_t __stdcall put_TabStripHeader(void*) noexcept = 0;
            virtual int32_t __stdcall get_TabStripHeaderTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_TabStripHeaderTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_TabStripFooter(void**) noexcept = 0;
            virtual int32_t __stdcall put_TabStripFooter(void*) noexcept = 0;
            virtual int32_t __stdcall get_TabStripFooterTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_TabStripFooterTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsAddTabButtonVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsAddTabButtonVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_AddTabButtonCommand(void**) noexcept = 0;
            virtual int32_t __stdcall put_AddTabButtonCommand(void*) noexcept = 0;
            virtual int32_t __stdcall get_AddTabButtonCommandParameter(void**) noexcept = 0;
            virtual int32_t __stdcall put_AddTabButtonCommandParameter(void*) noexcept = 0;
            virtual int32_t __stdcall add_TabCloseRequested(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_TabCloseRequested(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_TabDroppedOutside(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_TabDroppedOutside(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_AddTabButtonClick(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_AddTabButtonClick(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_TabItemsChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_TabItemsChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall get_TabItemsSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_TabItemsSource(void*) noexcept = 0;
            virtual int32_t __stdcall get_TabItems(void**) noexcept = 0;
            virtual int32_t __stdcall get_TabItemTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_TabItemTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_TabItemTemplateSelector(void**) noexcept = 0;
            virtual int32_t __stdcall put_TabItemTemplateSelector(void*) noexcept = 0;
            virtual int32_t __stdcall get_CanDragTabs(bool*) noexcept = 0;
            virtual int32_t __stdcall put_CanDragTabs(bool) noexcept = 0;
            virtual int32_t __stdcall get_CanReorderTabs(bool*) noexcept = 0;
            virtual int32_t __stdcall put_CanReorderTabs(bool) noexcept = 0;
            virtual int32_t __stdcall get_AllowDropTabs(bool*) noexcept = 0;
            virtual int32_t __stdcall put_AllowDropTabs(bool) noexcept = 0;
            virtual int32_t __stdcall get_SelectedIndex(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_SelectedIndex(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_SelectedItem(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedItem(void*) noexcept = 0;
            virtual int32_t __stdcall ContainerFromItem(void*, void**) noexcept = 0;
            virtual int32_t __stdcall ContainerFromIndex(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall add_SelectionChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_SelectionChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_TabDragStarting(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_TabDragStarting(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_TabDragCompleted(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_TabDragCompleted(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_TabStripDragOver(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_TabStripDragOver(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_TabStripDrop(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_TabStripDrop(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ITabViewFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ITabViewItem>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Header(void**) noexcept = 0;
            virtual int32_t __stdcall put_Header(void*) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeaderTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_IconSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_IconSource(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsClosable(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsClosable(bool) noexcept = 0;
            virtual int32_t __stdcall get_TabViewTemplateSettings(void**) noexcept = 0;
            virtual int32_t __stdcall add_CloseRequested(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_CloseRequested(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ITabViewItemFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ITabViewItemStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_HeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeaderTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IconSourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsClosableProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TabViewTemplateSettingsProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ITabViewItemTemplateSettings>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IconElement(void**) noexcept = 0;
            virtual int32_t __stdcall put_IconElement(void*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ITabViewItemTemplateSettingsFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ITabViewItemTemplateSettingsStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IconElementProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ITabViewStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_TabWidthModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TabStripHeaderProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TabStripHeaderTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TabStripFooterProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TabStripFooterTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsAddTabButtonVisibleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_AddTabButtonCommandProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_AddTabButtonCommandParameterProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TabItemsSourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TabItemsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TabItemTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TabItemTemplateSelectorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CloseButtonOverlayModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CanDragTabsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CanReorderTabsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_AllowDropTabsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedIndexProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectedItemProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ITabViewTabCloseRequestedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Item(void**) noexcept = 0;
            virtual int32_t __stdcall get_Tab(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ITabViewTabDragCompletedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_DropResult(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Item(void**) noexcept = 0;
            virtual int32_t __stdcall get_Tab(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ITabViewTabDragStartingEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Cancel(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Cancel(bool) noexcept = 0;
            virtual int32_t __stdcall get_Data(void**) noexcept = 0;
            virtual int32_t __stdcall get_Item(void**) noexcept = 0;
            virtual int32_t __stdcall get_Tab(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ITabViewTabDroppedOutsideEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Item(void**) noexcept = 0;
            virtual int32_t __stdcall get_Tab(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ITeachingTip>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Title(void**) noexcept = 0;
            virtual int32_t __stdcall put_Title(void*) noexcept = 0;
            virtual int32_t __stdcall get_Subtitle(void**) noexcept = 0;
            virtual int32_t __stdcall put_Subtitle(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsOpen(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsOpen(bool) noexcept = 0;
            virtual int32_t __stdcall get_Target(void**) noexcept = 0;
            virtual int32_t __stdcall put_Target(void*) noexcept = 0;
            virtual int32_t __stdcall get_TailVisibility(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TailVisibility(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ActionButtonContent(void**) noexcept = 0;
            virtual int32_t __stdcall put_ActionButtonContent(void*) noexcept = 0;
            virtual int32_t __stdcall get_ActionButtonStyle(void**) noexcept = 0;
            virtual int32_t __stdcall put_ActionButtonStyle(void*) noexcept = 0;
            virtual int32_t __stdcall get_ActionButtonCommand(void**) noexcept = 0;
            virtual int32_t __stdcall put_ActionButtonCommand(void*) noexcept = 0;
            virtual int32_t __stdcall get_ActionButtonCommandParameter(void**) noexcept = 0;
            virtual int32_t __stdcall put_ActionButtonCommandParameter(void*) noexcept = 0;
            virtual int32_t __stdcall get_CloseButtonContent(void**) noexcept = 0;
            virtual int32_t __stdcall put_CloseButtonContent(void*) noexcept = 0;
            virtual int32_t __stdcall get_CloseButtonStyle(void**) noexcept = 0;
            virtual int32_t __stdcall put_CloseButtonStyle(void*) noexcept = 0;
            virtual int32_t __stdcall get_CloseButtonCommand(void**) noexcept = 0;
            virtual int32_t __stdcall put_CloseButtonCommand(void*) noexcept = 0;
            virtual int32_t __stdcall get_CloseButtonCommandParameter(void**) noexcept = 0;
            virtual int32_t __stdcall put_CloseButtonCommandParameter(void*) noexcept = 0;
            virtual int32_t __stdcall get_PlacementMargin(struct struct_Windows_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_PlacementMargin(struct struct_Windows_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_ShouldConstrainToRootBounds(bool*) noexcept = 0;
            virtual int32_t __stdcall put_ShouldConstrainToRootBounds(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsLightDismissEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsLightDismissEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_PreferredPlacement(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_PreferredPlacement(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_HeroContentPlacement(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_HeroContentPlacement(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_HeroContent(void**) noexcept = 0;
            virtual int32_t __stdcall put_HeroContent(void*) noexcept = 0;
            virtual int32_t __stdcall get_IconSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_IconSource(void*) noexcept = 0;
            virtual int32_t __stdcall get_TemplateSettings(void**) noexcept = 0;
            virtual int32_t __stdcall add_ActionButtonClick(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ActionButtonClick(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_CloseButtonClick(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_CloseButtonClick(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Closing(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Closing(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Closed(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Closed(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ITeachingTipClosedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Reason(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ITeachingTipClosingEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Reason(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Cancel(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Cancel(bool) noexcept = 0;
            virtual int32_t __stdcall GetDeferral(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ITeachingTipFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ITeachingTipStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsOpenProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TargetProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TailVisibilityProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TitleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_SubtitleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ActionButtonContentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ActionButtonStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ActionButtonCommandProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ActionButtonCommandParameterProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CloseButtonContentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CloseButtonStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CloseButtonCommandProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CloseButtonCommandParameterProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PlacementMarginProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ShouldConstrainToRootBoundsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsLightDismissEnabledProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PreferredPlacementProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeroContentPlacementProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HeroContentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IconSourceProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TemplateSettingsProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettings>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_TopRightHighlightMargin(struct struct_Windows_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_TopRightHighlightMargin(struct struct_Windows_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_TopLeftHighlightMargin(struct struct_Windows_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall put_TopLeftHighlightMargin(struct struct_Windows_UI_Xaml_Thickness) noexcept = 0;
            virtual int32_t __stdcall get_IconElement(void**) noexcept = 0;
            virtual int32_t __stdcall put_IconElement(void*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettingsFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettingsStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_TopRightHighlightMarginProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TopLeftHighlightMarginProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IconElementProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ITextCommandBarFlyout>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ITextCommandBarFlyoutFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IToggleSplitButton>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsChecked(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsChecked(bool) noexcept = 0;
            virtual int32_t __stdcall add_IsCheckedChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_IsCheckedChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IToggleSplitButtonFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IToggleSplitButtonIsCheckedChangedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IToggleSplitButtonStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsCheckedProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ITreeView>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_RootNodes(void**) noexcept = 0;
            virtual int32_t __stdcall get_SelectionMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_SelectionMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_SelectedNodes(void**) noexcept = 0;
            virtual int32_t __stdcall Expand(void*) noexcept = 0;
            virtual int32_t __stdcall Collapse(void*) noexcept = 0;
            virtual int32_t __stdcall SelectAll() noexcept = 0;
            virtual int32_t __stdcall add_ItemInvoked(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ItemInvoked(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Expanding(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Expanding(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Collapsed(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Collapsed(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall NodeFromContainer(void*, void**) noexcept = 0;
            virtual int32_t __stdcall ContainerFromNode(void*, void**) noexcept = 0;
            virtual int32_t __stdcall ItemFromContainer(void*, void**) noexcept = 0;
            virtual int32_t __stdcall ContainerFromItem(void*, void**) noexcept = 0;
            virtual int32_t __stdcall get_CanDragItems(bool*) noexcept = 0;
            virtual int32_t __stdcall put_CanDragItems(bool) noexcept = 0;
            virtual int32_t __stdcall get_CanReorderItems(bool*) noexcept = 0;
            virtual int32_t __stdcall put_CanReorderItems(bool) noexcept = 0;
            virtual int32_t __stdcall get_ItemTemplate(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemTemplate(void*) noexcept = 0;
            virtual int32_t __stdcall get_ItemTemplateSelector(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemTemplateSelector(void*) noexcept = 0;
            virtual int32_t __stdcall get_ItemContainerStyle(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemContainerStyle(void*) noexcept = 0;
            virtual int32_t __stdcall get_ItemContainerStyleSelector(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemContainerStyleSelector(void*) noexcept = 0;
            virtual int32_t __stdcall get_ItemContainerTransitions(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemContainerTransitions(void*) noexcept = 0;
            virtual int32_t __stdcall get_ItemsSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemsSource(void*) noexcept = 0;
            virtual int32_t __stdcall add_DragItemsStarting(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_DragItemsStarting(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_DragItemsCompleted(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_DragItemsCompleted(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall get_SelectedNode(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedNode(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedItem(void**) noexcept = 0;
            virtual int32_t __stdcall put_SelectedItem(void*) noexcept = 0;
            virtual int32_t __stdcall get_SelectedItems(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ITreeViewCollapsedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Node(void**) noexcept = 0;
            virtual int32_t __stdcall get_Item(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ITreeViewDragItemsCompletedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_DropResult(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Items(void**) noexcept = 0;
            virtual int32_t __stdcall get_NewParentItem(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ITreeViewDragItemsStartingEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Cancel(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Cancel(bool) noexcept = 0;
            virtual int32_t __stdcall get_Data(void**) noexcept = 0;
            virtual int32_t __stdcall get_Items(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ITreeViewExpandingEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Node(void**) noexcept = 0;
            virtual int32_t __stdcall get_Item(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ITreeViewFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ITreeViewItem>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_GlyphOpacity(double*) noexcept = 0;
            virtual int32_t __stdcall put_GlyphOpacity(double) noexcept = 0;
            virtual int32_t __stdcall get_GlyphBrush(void**) noexcept = 0;
            virtual int32_t __stdcall put_GlyphBrush(void*) noexcept = 0;
            virtual int32_t __stdcall get_ExpandedGlyph(void**) noexcept = 0;
            virtual int32_t __stdcall put_ExpandedGlyph(void*) noexcept = 0;
            virtual int32_t __stdcall get_CollapsedGlyph(void**) noexcept = 0;
            virtual int32_t __stdcall put_CollapsedGlyph(void*) noexcept = 0;
            virtual int32_t __stdcall get_GlyphSize(double*) noexcept = 0;
            virtual int32_t __stdcall put_GlyphSize(double) noexcept = 0;
            virtual int32_t __stdcall get_IsExpanded(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsExpanded(bool) noexcept = 0;
            virtual int32_t __stdcall get_TreeViewItemTemplateSettings(void**) noexcept = 0;
            virtual int32_t __stdcall get_HasUnrealizedChildren(bool*) noexcept = 0;
            virtual int32_t __stdcall put_HasUnrealizedChildren(bool) noexcept = 0;
            virtual int32_t __stdcall get_ItemsSource(void**) noexcept = 0;
            virtual int32_t __stdcall put_ItemsSource(void*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ITreeViewItemFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ITreeViewItemInvokedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_InvokedItem(void**) noexcept = 0;
            virtual int32_t __stdcall put_Handled(bool) noexcept = 0;
            virtual int32_t __stdcall get_Handled(bool*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ITreeViewItemStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_GlyphOpacityProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_GlyphBrushProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ExpandedGlyphProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CollapsedGlyphProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_GlyphSizeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsExpandedProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TreeViewItemTemplateSettingsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HasUnrealizedChildrenProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemsSourceProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettings>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ExpandedGlyphVisibility(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_CollapsedGlyphVisibility(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Indentation(struct struct_Windows_UI_Xaml_Thickness*) noexcept = 0;
            virtual int32_t __stdcall get_DragItemsCount(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettingsFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettingsStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ExpandedGlyphVisibilityProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CollapsedGlyphVisibilityProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IndentationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DragItemsCountProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ITreeViewList>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ITreeViewListFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ITreeViewNode>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Content(void**) noexcept = 0;
            virtual int32_t __stdcall put_Content(void*) noexcept = 0;
            virtual int32_t __stdcall get_Parent(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsExpanded(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsExpanded(bool) noexcept = 0;
            virtual int32_t __stdcall get_HasChildren(bool*) noexcept = 0;
            virtual int32_t __stdcall get_Depth(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_HasUnrealizedChildren(bool*) noexcept = 0;
            virtual int32_t __stdcall put_HasUnrealizedChildren(bool) noexcept = 0;
            virtual int32_t __stdcall get_Children(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ITreeViewNodeFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ITreeViewNodeStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ContentProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_DepthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsExpandedProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_HasChildrenProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ITreeViewStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_SelectionModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CanDragItemsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_CanReorderItemsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemTemplateProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemTemplateSelectorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemContainerStyleProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemContainerStyleSelectorProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemContainerTransitionsProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemsSourceProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ITwoPaneView>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Pane1(void**) noexcept = 0;
            virtual int32_t __stdcall put_Pane1(void*) noexcept = 0;
            virtual int32_t __stdcall get_Pane2(void**) noexcept = 0;
            virtual int32_t __stdcall put_Pane2(void*) noexcept = 0;
            virtual int32_t __stdcall get_Pane1Length(struct struct_Windows_UI_Xaml_GridLength*) noexcept = 0;
            virtual int32_t __stdcall put_Pane1Length(struct struct_Windows_UI_Xaml_GridLength) noexcept = 0;
            virtual int32_t __stdcall get_Pane2Length(struct struct_Windows_UI_Xaml_GridLength*) noexcept = 0;
            virtual int32_t __stdcall put_Pane2Length(struct struct_Windows_UI_Xaml_GridLength) noexcept = 0;
            virtual int32_t __stdcall get_PanePriority(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_PanePriority(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_Mode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_WideModeConfiguration(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_WideModeConfiguration(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_TallModeConfiguration(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TallModeConfiguration(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_MinWideModeWidth(double*) noexcept = 0;
            virtual int32_t __stdcall put_MinWideModeWidth(double) noexcept = 0;
            virtual int32_t __stdcall get_MinTallModeHeight(double*) noexcept = 0;
            virtual int32_t __stdcall put_MinTallModeHeight(double) noexcept = 0;
            virtual int32_t __stdcall add_ModeChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ModeChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ITwoPaneViewFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::ITwoPaneViewStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Pane1Property(void**) noexcept = 0;
            virtual int32_t __stdcall get_Pane2Property(void**) noexcept = 0;
            virtual int32_t __stdcall get_Pane1LengthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_Pane2LengthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_PanePriorityProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ModeProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_WideModeConfigurationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_TallModeConfigurationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinWideModeWidthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinTallModeHeightProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IUniformGridLayout>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Orientation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Orientation(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_MinItemWidth(double*) noexcept = 0;
            virtual int32_t __stdcall put_MinItemWidth(double) noexcept = 0;
            virtual int32_t __stdcall get_MinItemHeight(double*) noexcept = 0;
            virtual int32_t __stdcall put_MinItemHeight(double) noexcept = 0;
            virtual int32_t __stdcall get_MinRowSpacing(double*) noexcept = 0;
            virtual int32_t __stdcall put_MinRowSpacing(double) noexcept = 0;
            virtual int32_t __stdcall get_MinColumnSpacing(double*) noexcept = 0;
            virtual int32_t __stdcall put_MinColumnSpacing(double) noexcept = 0;
            virtual int32_t __stdcall get_ItemsJustification(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ItemsJustification(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ItemsStretch(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ItemsStretch(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_MaximumRowsOrColumns(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MaximumRowsOrColumns(int32_t) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IUniformGridLayoutFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IUniformGridLayoutStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_OrientationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinItemWidthProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinItemHeightProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinRowSpacingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MinColumnSpacingProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemsJustificationProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_ItemsStretchProperty(void**) noexcept = 0;
            virtual int32_t __stdcall get_MaximumRowsOrColumnsProperty(void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IVirtualizingLayout>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContext>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ItemCount(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetItemAt(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall get_RealizationRect(Windows::Foundation::Rect*) noexcept = 0;
            virtual int32_t __stdcall GetOrCreateElementAt(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall GetOrCreateElementAt2(int32_t, uint32_t, void**) noexcept = 0;
            virtual int32_t __stdcall RecycleElement(void*) noexcept = 0;
            virtual int32_t __stdcall get_RecommendedAnchorIndex(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_LayoutOrigin(Windows::Foundation::Point*) noexcept = 0;
            virtual int32_t __stdcall put_LayoutOrigin(Windows::Foundation::Point) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextOverrides>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall ItemCountCore(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetItemAtCore(int32_t, void**) noexcept = 0;
            virtual int32_t __stdcall RealizationRectCore(Windows::Foundation::Rect*) noexcept = 0;
            virtual int32_t __stdcall GetOrCreateElementAtCore(int32_t, uint32_t, void**) noexcept = 0;
            virtual int32_t __stdcall RecycleElementCore(void*) noexcept = 0;
            virtual int32_t __stdcall get_RecommendedAnchorIndexCore(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_LayoutOriginCore(Windows::Foundation::Point*) noexcept = 0;
            virtual int32_t __stdcall put_LayoutOriginCore(Windows::Foundation::Point) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IVirtualizingLayoutFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IVirtualizingLayoutOverrides>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall InitializeForContextCore(void*) noexcept = 0;
            virtual int32_t __stdcall UninitializeForContextCore(void*) noexcept = 0;
            virtual int32_t __stdcall MeasureOverride(void*, Windows::Foundation::Size, Windows::Foundation::Size*) noexcept = 0;
            virtual int32_t __stdcall ArrangeOverride(void*, Windows::Foundation::Size, Windows::Foundation::Size*) noexcept = 0;
            virtual int32_t __stdcall OnItemsChangedCore(void*, void*, void*) noexcept = 0;
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IXamlControlsResources>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<Microsoft::UI::Xaml::Controls::IXamlControlsResourcesStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall EnsureRevealLights(void*) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IAnimatedVisual
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Composition::Visual) RootVisual() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::Numerics::float2) Size() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::TimeSpan) Duration() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IAnimatedVisual>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IAnimatedVisual<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualPlayer
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::IInspectable) Diagnostics() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::TimeSpan) Duration() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::IAnimatedVisualSource) Source() const;
        WINRT_IMPL_AUTO(void) Source(Microsoft::UI::Xaml::Controls::IAnimatedVisualSource const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DataTemplate) FallbackContent() const;
        WINRT_IMPL_AUTO(void) FallbackContent(Windows::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) AutoPlay() const;
        WINRT_IMPL_AUTO(void) AutoPlay(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsAnimatedVisualLoaded() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsPlaying() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) PlaybackRate() const;
        WINRT_IMPL_AUTO(void) PlaybackRate(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Composition::CompositionObject) ProgressObject() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Media::Stretch) Stretch() const;
        WINRT_IMPL_AUTO(void) Stretch(Windows::UI::Xaml::Media::Stretch const& value) const;
        WINRT_IMPL_AUTO(void) Pause() const;
        WINRT_IMPL_AUTO(Windows::Foundation::IAsyncAction) PlayAsync(double fromProgress, double toProgress, bool looped) const;
        WINRT_IMPL_AUTO(void) Resume() const;
        WINRT_IMPL_AUTO(void) SetProgress(double progress) const;
        WINRT_IMPL_AUTO(void) Stop() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayer>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualPlayer<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualPlayerFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::AnimatedVisualPlayer) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualPlayerFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualPlayerStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) AutoPlayProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) DiagnosticsProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) DurationProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) FallbackContentProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) IsAnimatedVisualLoadedProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) IsPlayingProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) PlaybackRateProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) SourceProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) StretchProperty() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IAnimatedVisualPlayerStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualPlayerStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualSource
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::IAnimatedVisual) TryCreateAnimatedVisual(Windows::UI::Composition::Compositor const& compositor, Windows::Foundation::IInspectable& diagnostics) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IAnimatedVisualSource>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IAnimatedVisualSource<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IBitmapIconSource
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::Uri) UriSource() const;
        WINRT_IMPL_AUTO(void) UriSource(Windows::Foundation::Uri const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) ShowAsMonochrome() const;
        WINRT_IMPL_AUTO(void) ShowAsMonochrome(bool value) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IBitmapIconSource>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IBitmapIconSource<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IBitmapIconSourceFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::BitmapIconSource) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IBitmapIconSourceFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IBitmapIconSourceFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IBitmapIconSourceStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) UriSourceProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) ShowAsMonochromeProperty() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IBitmapIconSourceStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IBitmapIconSourceStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IColorChangedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Color) OldColor() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Color) NewColor() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IColorChangedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IColorChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IColorPicker
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Color) Color() const;
        WINRT_IMPL_AUTO(void) Color(Windows::UI::Color const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::IReference<Windows::UI::Color>) PreviousColor() const;
        WINRT_IMPL_AUTO(void) PreviousColor(Windows::Foundation::IReference<Windows::UI::Color> const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsAlphaEnabled() const;
        WINRT_IMPL_AUTO(void) IsAlphaEnabled(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsColorSpectrumVisible() const;
        WINRT_IMPL_AUTO(void) IsColorSpectrumVisible(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsColorPreviewVisible() const;
        WINRT_IMPL_AUTO(void) IsColorPreviewVisible(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsColorSliderVisible() const;
        WINRT_IMPL_AUTO(void) IsColorSliderVisible(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsAlphaSliderVisible() const;
        WINRT_IMPL_AUTO(void) IsAlphaSliderVisible(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsMoreButtonVisible() const;
        WINRT_IMPL_AUTO(void) IsMoreButtonVisible(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsColorChannelTextInputVisible() const;
        WINRT_IMPL_AUTO(void) IsColorChannelTextInputVisible(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsAlphaTextInputVisible() const;
        WINRT_IMPL_AUTO(void) IsAlphaTextInputVisible(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsHexInputVisible() const;
        WINRT_IMPL_AUTO(void) IsHexInputVisible(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) MinHue() const;
        WINRT_IMPL_AUTO(void) MinHue(int32_t value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) MaxHue() const;
        WINRT_IMPL_AUTO(void) MaxHue(int32_t value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) MinSaturation() const;
        WINRT_IMPL_AUTO(void) MinSaturation(int32_t value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) MaxSaturation() const;
        WINRT_IMPL_AUTO(void) MaxSaturation(int32_t value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) MinValue() const;
        WINRT_IMPL_AUTO(void) MinValue(int32_t value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) MaxValue() const;
        WINRT_IMPL_AUTO(void) MaxValue(int32_t value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::ColorSpectrumShape) ColorSpectrumShape() const;
        WINRT_IMPL_AUTO(void) ColorSpectrumShape(Microsoft::UI::Xaml::Controls::ColorSpectrumShape const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::ColorSpectrumComponents) ColorSpectrumComponents() const;
        WINRT_IMPL_AUTO(void) ColorSpectrumComponents(Microsoft::UI::Xaml::Controls::ColorSpectrumComponents const& value) const;
        WINRT_IMPL_AUTO(winrt::event_token) ColorChanged(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ColorPicker, Microsoft::UI::Xaml::Controls::ColorChangedEventArgs> const& handler) const;
        using ColorChanged_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::IColorPicker, &impl::abi_t<Microsoft::UI::Xaml::Controls::IColorPicker>::remove_ColorChanged>;
        [[nodiscard]] ColorChanged_revoker ColorChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ColorPicker, Microsoft::UI::Xaml::Controls::ColorChangedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) ColorChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IColorPicker>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IColorPicker<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IColorPickerFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::ColorPicker) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IColorPickerFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IColorPickerFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IColorPickerStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) ColorProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) PreviousColorProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) IsAlphaEnabledProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) IsColorSpectrumVisibleProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) IsColorPreviewVisibleProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) IsColorSliderVisibleProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) IsAlphaSliderVisibleProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) IsMoreButtonVisibleProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) IsColorChannelTextInputVisibleProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) IsAlphaTextInputVisibleProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) IsHexInputVisibleProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) MinHueProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) MaxHueProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) MinSaturationProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) MaxSaturationProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) MinValueProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) MaxValueProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) ColorSpectrumShapeProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) ColorSpectrumComponentsProperty() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IColorPickerStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IColorPickerStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ICommandBarFlyout
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::Collections::IObservableVector<Windows::UI::Xaml::Controls::ICommandBarElement>) PrimaryCommands() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::Collections::IObservableVector<Windows::UI::Xaml::Controls::ICommandBarElement>) SecondaryCommands() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ICommandBarFlyout>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ICommandBarFlyout<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ICommandBarFlyoutFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::CommandBarFlyout) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ICommandBarFlyoutFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ICommandBarFlyoutFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IDropDownButton
    {
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IDropDownButton>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IDropDownButton<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IDropDownButtonFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::DropDownButton) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IDropDownButtonFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IDropDownButtonFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IDynamicAnimatedVisualSource
    {
        WINRT_IMPL_AUTO(winrt::event_token) AnimatedVisualInvalidated(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::IDynamicAnimatedVisualSource, Windows::Foundation::IInspectable> const& handler) const;
        using AnimatedVisualInvalidated_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::IDynamicAnimatedVisualSource, &impl::abi_t<Microsoft::UI::Xaml::Controls::IDynamicAnimatedVisualSource>::remove_AnimatedVisualInvalidated>;
        [[nodiscard]] AnimatedVisualInvalidated_revoker AnimatedVisualInvalidated(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::IDynamicAnimatedVisualSource, Windows::Foundation::IInspectable> const& handler) const;
        WINRT_IMPL_AUTO(void) AnimatedVisualInvalidated(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IDynamicAnimatedVisualSource>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IDynamicAnimatedVisualSource<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IElementFactoryGetArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::IInspectable) Data() const;
        WINRT_IMPL_AUTO(void) Data(Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::UIElement) Parent() const;
        WINRT_IMPL_AUTO(void) Parent(Windows::UI::Xaml::UIElement const& value) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IElementFactoryGetArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IElementFactoryGetArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IElementFactoryRecycleArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::UIElement) Element() const;
        WINRT_IMPL_AUTO(void) Element(Windows::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::UIElement) Parent() const;
        WINRT_IMPL_AUTO(void) Parent(Windows::UI::Xaml::UIElement const& value) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IElementFactoryRecycleArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IElementFactoryRecycleArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IFontIconSource
    {
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Glyph() const;
        WINRT_IMPL_AUTO(void) Glyph(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) FontSize() const;
        WINRT_IMPL_AUTO(void) FontSize(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Media::FontFamily) FontFamily() const;
        WINRT_IMPL_AUTO(void) FontFamily(Windows::UI::Xaml::Media::FontFamily const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Text::FontWeight) FontWeight() const;
        WINRT_IMPL_AUTO(void) FontWeight(Windows::UI::Text::FontWeight const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Text::FontStyle) FontStyle() const;
        WINRT_IMPL_AUTO(void) FontStyle(Windows::UI::Text::FontStyle const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsTextScaleFactorEnabled() const;
        WINRT_IMPL_AUTO(void) IsTextScaleFactorEnabled(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) MirroredWhenRightToLeft() const;
        WINRT_IMPL_AUTO(void) MirroredWhenRightToLeft(bool value) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IFontIconSource>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IFontIconSource<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IFontIconSourceFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::FontIconSource) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IFontIconSourceFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IFontIconSourceFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IFontIconSourceStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) GlyphProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) FontSizeProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) FontFamilyProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) FontWeightProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) FontStyleProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) IsTextScaleFactorEnabledProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) MirroredWhenRightToLeftProperty() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IFontIconSourceStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IFontIconSourceStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IIconSource
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Media::Brush) Foreground() const;
        WINRT_IMPL_AUTO(void) Foreground(Windows::UI::Xaml::Media::Brush const& value) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IIconSource>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IIconSource<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IIconSourceFactory
    {
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IIconSourceFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IIconSourceFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IIconSourceStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) ForegroundProperty() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IIconSourceStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IIconSourceStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IItemsRepeater
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::IInspectable) ItemsSource() const;
        WINRT_IMPL_AUTO(void) ItemsSource(Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::ItemsSourceView) ItemsSourceView() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::IInspectable) ItemTemplate() const;
        WINRT_IMPL_AUTO(void) ItemTemplate(Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::Layout) Layout() const;
        WINRT_IMPL_AUTO(void) Layout(Microsoft::UI::Xaml::Controls::Layout const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) HorizontalCacheLength() const;
        WINRT_IMPL_AUTO(void) HorizontalCacheLength(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) VerticalCacheLength() const;
        WINRT_IMPL_AUTO(void) VerticalCacheLength(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Media::Brush) Background() const;
        WINRT_IMPL_AUTO(void) Background(Windows::UI::Xaml::Media::Brush const& value) const;
        WINRT_IMPL_AUTO(int32_t) GetElementIndex(Windows::UI::Xaml::UIElement const& element) const;
        WINRT_IMPL_AUTO(Windows::UI::Xaml::UIElement) TryGetElement(int32_t index) const;
        WINRT_IMPL_AUTO(Windows::UI::Xaml::UIElement) GetOrCreateElement(int32_t index) const;
        WINRT_IMPL_AUTO(winrt::event_token) ElementPrepared(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ItemsRepeater, Microsoft::UI::Xaml::Controls::ItemsRepeaterElementPreparedEventArgs> const& handler) const;
        using ElementPrepared_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::IItemsRepeater, &impl::abi_t<Microsoft::UI::Xaml::Controls::IItemsRepeater>::remove_ElementPrepared>;
        [[nodiscard]] ElementPrepared_revoker ElementPrepared(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ItemsRepeater, Microsoft::UI::Xaml::Controls::ItemsRepeaterElementPreparedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) ElementPrepared(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) ElementClearing(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ItemsRepeater, Microsoft::UI::Xaml::Controls::ItemsRepeaterElementClearingEventArgs> const& handler) const;
        using ElementClearing_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::IItemsRepeater, &impl::abi_t<Microsoft::UI::Xaml::Controls::IItemsRepeater>::remove_ElementClearing>;
        [[nodiscard]] ElementClearing_revoker ElementClearing(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ItemsRepeater, Microsoft::UI::Xaml::Controls::ItemsRepeaterElementClearingEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) ElementClearing(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) ElementIndexChanged(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ItemsRepeater, Microsoft::UI::Xaml::Controls::ItemsRepeaterElementIndexChangedEventArgs> const& handler) const;
        using ElementIndexChanged_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::IItemsRepeater, &impl::abi_t<Microsoft::UI::Xaml::Controls::IItemsRepeater>::remove_ElementIndexChanged>;
        [[nodiscard]] ElementIndexChanged_revoker ElementIndexChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ItemsRepeater, Microsoft::UI::Xaml::Controls::ItemsRepeaterElementIndexChangedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) ElementIndexChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IItemsRepeater>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IItemsRepeater<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IItemsRepeaterElementClearingEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::UIElement) Element() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IItemsRepeaterElementClearingEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IItemsRepeaterElementClearingEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IItemsRepeaterElementIndexChangedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::UIElement) Element() const;
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) OldIndex() const;
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) NewIndex() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IItemsRepeaterElementIndexChangedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IItemsRepeaterElementIndexChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IItemsRepeaterElementPreparedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::UIElement) Element() const;
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) Index() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IItemsRepeaterElementPreparedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IItemsRepeaterElementPreparedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IItemsRepeaterFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::ItemsRepeater) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IItemsRepeaterFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IItemsRepeaterFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IItemsRepeaterScrollHost
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Controls::ScrollViewer) ScrollViewer() const;
        WINRT_IMPL_AUTO(void) ScrollViewer(Windows::UI::Xaml::Controls::ScrollViewer const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::UIElement) CurrentAnchor() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) HorizontalAnchorRatio() const;
        WINRT_IMPL_AUTO(void) HorizontalAnchorRatio(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) VerticalAnchorRatio() const;
        WINRT_IMPL_AUTO(void) VerticalAnchorRatio(double value) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IItemsRepeaterScrollHost>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IItemsRepeaterScrollHost<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IItemsRepeaterStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) ItemsSourceProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) ItemTemplateProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) LayoutProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) AnimatorProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) HorizontalCacheLengthProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) VerticalCacheLengthProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) BackgroundProperty() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IItemsRepeaterStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IItemsRepeaterStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IItemsSourceView
    {
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) Count() const;
        WINRT_IMPL_AUTO(Windows::Foundation::IInspectable) GetAt(int32_t index) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) HasKeyIndexMapping() const;
        WINRT_IMPL_AUTO(hstring) KeyFromIndex(int32_t index) const;
        WINRT_IMPL_AUTO(int32_t) IndexFromKey(param::hstring const& key) const;
        WINRT_IMPL_AUTO(int32_t) IndexOf(Windows::Foundation::IInspectable const& item) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IItemsSourceView>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IItemsSourceView<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IItemsSourceViewFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::ItemsSourceView) CreateInstance(Windows::Foundation::IInspectable const& source, Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IItemsSourceViewFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IItemsSourceViewFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IKeyIndexMapping
    {
        WINRT_IMPL_AUTO(hstring) KeyFromIndex(int32_t index) const;
        WINRT_IMPL_AUTO(int32_t) IndexFromKey(param::hstring const& key) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IKeyIndexMapping>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IKeyIndexMapping<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ILayout
    {
        WINRT_IMPL_AUTO(void) InitializeForContext(Microsoft::UI::Xaml::Controls::LayoutContext const& context) const;
        WINRT_IMPL_AUTO(void) UninitializeForContext(Microsoft::UI::Xaml::Controls::LayoutContext const& context) const;
        WINRT_IMPL_AUTO(Windows::Foundation::Size) Measure(Microsoft::UI::Xaml::Controls::LayoutContext const& context, Windows::Foundation::Size const& availableSize) const;
        WINRT_IMPL_AUTO(Windows::Foundation::Size) Arrange(Microsoft::UI::Xaml::Controls::LayoutContext const& context, Windows::Foundation::Size const& finalSize) const;
        WINRT_IMPL_AUTO(winrt::event_token) MeasureInvalidated(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Layout, Windows::Foundation::IInspectable> const& handler) const;
        using MeasureInvalidated_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::ILayout, &impl::abi_t<Microsoft::UI::Xaml::Controls::ILayout>::remove_MeasureInvalidated>;
        [[nodiscard]] MeasureInvalidated_revoker MeasureInvalidated(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Layout, Windows::Foundation::IInspectable> const& handler) const;
        WINRT_IMPL_AUTO(void) MeasureInvalidated(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) ArrangeInvalidated(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Layout, Windows::Foundation::IInspectable> const& handler) const;
        using ArrangeInvalidated_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::ILayout, &impl::abi_t<Microsoft::UI::Xaml::Controls::ILayout>::remove_ArrangeInvalidated>;
        [[nodiscard]] ArrangeInvalidated_revoker ArrangeInvalidated(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::Layout, Windows::Foundation::IInspectable> const& handler) const;
        WINRT_IMPL_AUTO(void) ArrangeInvalidated(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ILayout>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ILayout<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ILayoutContext
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::IInspectable) LayoutState() const;
        WINRT_IMPL_AUTO(void) LayoutState(Windows::Foundation::IInspectable const& value) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ILayoutContext>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ILayoutContext<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ILayoutContextFactory
    {
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ILayoutContextFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ILayoutContextFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ILayoutContextOverrides
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::IInspectable) LayoutStateCore() const;
        WINRT_IMPL_AUTO(void) LayoutStateCore(Windows::Foundation::IInspectable const& value) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ILayoutContextOverrides>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ILayoutContextOverrides<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ILayoutFactory
    {
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ILayoutFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ILayoutFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ILayoutProtected
    {
        WINRT_IMPL_AUTO(void) InvalidateMeasure() const;
        WINRT_IMPL_AUTO(void) InvalidateArrange() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ILayoutProtected>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ILayoutProtected<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMenuBar
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::Collections::IVector<Microsoft::UI::Xaml::Controls::MenuBarItem>) Items() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IMenuBar>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMenuBar<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMenuBarFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::MenuBar) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IMenuBarFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMenuBarFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMenuBarItem
    {
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Title() const;
        WINRT_IMPL_AUTO(void) Title(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::MenuFlyoutItemBase>) Items() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IMenuBarItem>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMenuBarItem<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMenuBarItemFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::MenuBarItem) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IMenuBarItemFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMenuBarItemFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMenuBarItemFlyout
    {
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IMenuBarItemFlyout>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMenuBarItemFlyout<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMenuBarItemFlyoutFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::MenuBarItemFlyout) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IMenuBarItemFlyoutFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMenuBarItemFlyoutFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMenuBarItemStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) TitleProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) ItemsProperty() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IMenuBarItemStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMenuBarItemStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IMenuBarStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) ItemsProperty() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IMenuBarStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IMenuBarStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationView
    {
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsPaneOpen() const;
        WINRT_IMPL_AUTO(void) IsPaneOpen(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) CompactModeThresholdWidth() const;
        WINRT_IMPL_AUTO(void) CompactModeThresholdWidth(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) ExpandedModeThresholdWidth() const;
        WINRT_IMPL_AUTO(void) ExpandedModeThresholdWidth(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::UIElement) PaneFooter() const;
        WINRT_IMPL_AUTO(void) PaneFooter(Windows::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::IInspectable) Header() const;
        WINRT_IMPL_AUTO(void) Header(Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DataTemplate) HeaderTemplate() const;
        WINRT_IMPL_AUTO(void) HeaderTemplate(Windows::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::NavigationViewDisplayMode) DisplayMode() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsSettingsVisible() const;
        WINRT_IMPL_AUTO(void) IsSettingsVisible(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsPaneToggleButtonVisible() const;
        WINRT_IMPL_AUTO(void) IsPaneToggleButtonVisible(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) AlwaysShowHeader() const;
        WINRT_IMPL_AUTO(void) AlwaysShowHeader(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) CompactPaneLength() const;
        WINRT_IMPL_AUTO(void) CompactPaneLength(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) OpenPaneLength() const;
        WINRT_IMPL_AUTO(void) OpenPaneLength(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Style) PaneToggleButtonStyle() const;
        WINRT_IMPL_AUTO(void) PaneToggleButtonStyle(Windows::UI::Xaml::Style const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::IInspectable) SelectedItem() const;
        WINRT_IMPL_AUTO(void) SelectedItem(Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable>) MenuItems() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::IInspectable) MenuItemsSource() const;
        WINRT_IMPL_AUTO(void) MenuItemsSource(Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::IInspectable) SettingsItem() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Controls::AutoSuggestBox) AutoSuggestBox() const;
        WINRT_IMPL_AUTO(void) AutoSuggestBox(Windows::UI::Xaml::Controls::AutoSuggestBox const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DataTemplate) MenuItemTemplate() const;
        WINRT_IMPL_AUTO(void) MenuItemTemplate(Windows::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Controls::DataTemplateSelector) MenuItemTemplateSelector() const;
        WINRT_IMPL_AUTO(void) MenuItemTemplateSelector(Windows::UI::Xaml::Controls::DataTemplateSelector const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Style) MenuItemContainerStyle() const;
        WINRT_IMPL_AUTO(void) MenuItemContainerStyle(Windows::UI::Xaml::Style const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Controls::StyleSelector) MenuItemContainerStyleSelector() const;
        WINRT_IMPL_AUTO(void) MenuItemContainerStyleSelector(Windows::UI::Xaml::Controls::StyleSelector const& value) const;
        WINRT_IMPL_AUTO(Windows::Foundation::IInspectable) MenuItemFromContainer(Windows::UI::Xaml::DependencyObject const& container) const;
        WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyObject) ContainerFromMenuItem(Windows::Foundation::IInspectable const& item) const;
        WINRT_IMPL_AUTO(winrt::event_token) SelectionChanged(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Microsoft::UI::Xaml::Controls::NavigationViewSelectionChangedEventArgs> const& handler) const;
        using SelectionChanged_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::INavigationView, &impl::abi_t<Microsoft::UI::Xaml::Controls::INavigationView>::remove_SelectionChanged>;
        [[nodiscard]] SelectionChanged_revoker SelectionChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Microsoft::UI::Xaml::Controls::NavigationViewSelectionChangedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) SelectionChanged(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) ItemInvoked(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Microsoft::UI::Xaml::Controls::NavigationViewItemInvokedEventArgs> const& handler) const;
        using ItemInvoked_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::INavigationView, &impl::abi_t<Microsoft::UI::Xaml::Controls::INavigationView>::remove_ItemInvoked>;
        [[nodiscard]] ItemInvoked_revoker ItemInvoked(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Microsoft::UI::Xaml::Controls::NavigationViewItemInvokedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) ItemInvoked(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) DisplayModeChanged(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Microsoft::UI::Xaml::Controls::NavigationViewDisplayModeChangedEventArgs> const& handler) const;
        using DisplayModeChanged_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::INavigationView, &impl::abi_t<Microsoft::UI::Xaml::Controls::INavigationView>::remove_DisplayModeChanged>;
        [[nodiscard]] DisplayModeChanged_revoker DisplayModeChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Microsoft::UI::Xaml::Controls::NavigationViewDisplayModeChangedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) DisplayModeChanged(winrt::event_token const& token) const noexcept;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::NavigationViewBackButtonVisible) IsBackButtonVisible() const;
        WINRT_IMPL_AUTO(void) IsBackButtonVisible(Microsoft::UI::Xaml::Controls::NavigationViewBackButtonVisible const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsBackEnabled() const;
        WINRT_IMPL_AUTO(void) IsBackEnabled(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) PaneTitle() const;
        WINRT_IMPL_AUTO(void) PaneTitle(param::hstring const& value) const;
        WINRT_IMPL_AUTO(winrt::event_token) BackRequested(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Microsoft::UI::Xaml::Controls::NavigationViewBackRequestedEventArgs> const& handler) const;
        using BackRequested_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::INavigationView, &impl::abi_t<Microsoft::UI::Xaml::Controls::INavigationView>::remove_BackRequested>;
        [[nodiscard]] BackRequested_revoker BackRequested(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Microsoft::UI::Xaml::Controls::NavigationViewBackRequestedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) BackRequested(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) PaneClosed(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Windows::Foundation::IInspectable> const& handler) const;
        using PaneClosed_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::INavigationView, &impl::abi_t<Microsoft::UI::Xaml::Controls::INavigationView>::remove_PaneClosed>;
        [[nodiscard]] PaneClosed_revoker PaneClosed(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Windows::Foundation::IInspectable> const& handler) const;
        WINRT_IMPL_AUTO(void) PaneClosed(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) PaneClosing(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Microsoft::UI::Xaml::Controls::NavigationViewPaneClosingEventArgs> const& handler) const;
        using PaneClosing_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::INavigationView, &impl::abi_t<Microsoft::UI::Xaml::Controls::INavigationView>::remove_PaneClosing>;
        [[nodiscard]] PaneClosing_revoker PaneClosing(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Microsoft::UI::Xaml::Controls::NavigationViewPaneClosingEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) PaneClosing(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) PaneOpened(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Windows::Foundation::IInspectable> const& handler) const;
        using PaneOpened_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::INavigationView, &impl::abi_t<Microsoft::UI::Xaml::Controls::INavigationView>::remove_PaneOpened>;
        [[nodiscard]] PaneOpened_revoker PaneOpened(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Windows::Foundation::IInspectable> const& handler) const;
        WINRT_IMPL_AUTO(void) PaneOpened(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) PaneOpening(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Windows::Foundation::IInspectable> const& handler) const;
        using PaneOpening_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::INavigationView, &impl::abi_t<Microsoft::UI::Xaml::Controls::INavigationView>::remove_PaneOpening>;
        [[nodiscard]] PaneOpening_revoker PaneOpening(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Windows::Foundation::IInspectable> const& handler) const;
        WINRT_IMPL_AUTO(void) PaneOpening(winrt::event_token const& token) const noexcept;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::NavigationViewPaneDisplayMode) PaneDisplayMode() const;
        WINRT_IMPL_AUTO(void) PaneDisplayMode(Microsoft::UI::Xaml::Controls::NavigationViewPaneDisplayMode const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::UIElement) PaneHeader() const;
        WINRT_IMPL_AUTO(void) PaneHeader(Windows::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::UIElement) PaneCustomContent() const;
        WINRT_IMPL_AUTO(void) PaneCustomContent(Windows::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::UIElement) ContentOverlay() const;
        WINRT_IMPL_AUTO(void) ContentOverlay(Windows::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsPaneVisible() const;
        WINRT_IMPL_AUTO(void) IsPaneVisible(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::NavigationViewSelectionFollowsFocus) SelectionFollowsFocus() const;
        WINRT_IMPL_AUTO(void) SelectionFollowsFocus(Microsoft::UI::Xaml::Controls::NavigationViewSelectionFollowsFocus const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::NavigationViewTemplateSettings) TemplateSettings() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::NavigationViewShoulderNavigationEnabled) ShoulderNavigationEnabled() const;
        WINRT_IMPL_AUTO(void) ShoulderNavigationEnabled(Microsoft::UI::Xaml::Controls::NavigationViewShoulderNavigationEnabled const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::NavigationViewOverflowLabelMode) OverflowLabelMode() const;
        WINRT_IMPL_AUTO(void) OverflowLabelMode(Microsoft::UI::Xaml::Controls::NavigationViewOverflowLabelMode const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsTitleBarAutoPaddingEnabled() const;
        WINRT_IMPL_AUTO(void) IsTitleBarAutoPaddingEnabled(bool value) const;
        WINRT_IMPL_AUTO(winrt::event_token) Expanding(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Microsoft::UI::Xaml::Controls::NavigationViewItemExpandingEventArgs> const& handler) const;
        using Expanding_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::INavigationView, &impl::abi_t<Microsoft::UI::Xaml::Controls::INavigationView>::remove_Expanding>;
        [[nodiscard]] Expanding_revoker Expanding(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Microsoft::UI::Xaml::Controls::NavigationViewItemExpandingEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) Expanding(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) Collapsed(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Microsoft::UI::Xaml::Controls::NavigationViewItemCollapsedEventArgs> const& handler) const;
        using Collapsed_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::INavigationView, &impl::abi_t<Microsoft::UI::Xaml::Controls::INavigationView>::remove_Collapsed>;
        [[nodiscard]] Collapsed_revoker Collapsed(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NavigationView, Microsoft::UI::Xaml::Controls::NavigationViewItemCollapsedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) Collapsed(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(void) Expand(Microsoft::UI::Xaml::Controls::NavigationViewItem const& item) const;
        WINRT_IMPL_AUTO(void) Collapse(Microsoft::UI::Xaml::Controls::NavigationViewItem const& item) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::INavigationView>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationView<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewBackRequestedEventArgs
    {
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::INavigationViewBackRequestedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewBackRequestedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewDisplayModeChangedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::NavigationViewDisplayMode) DisplayMode() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::INavigationViewDisplayModeChangedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewDisplayModeChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::NavigationView) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::INavigationViewFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewItem
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Controls::IconElement) Icon() const;
        WINRT_IMPL_AUTO(void) Icon(Windows::UI::Xaml::Controls::IconElement const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) CompactPaneLength() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) SelectsOnInvoked() const;
        WINRT_IMPL_AUTO(void) SelectsOnInvoked(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsExpanded() const;
        WINRT_IMPL_AUTO(void) IsExpanded(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) HasUnrealizedChildren() const;
        WINRT_IMPL_AUTO(void) HasUnrealizedChildren(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsChildSelected() const;
        WINRT_IMPL_AUTO(void) IsChildSelected(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable>) MenuItems() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::IInspectable) MenuItemsSource() const;
        WINRT_IMPL_AUTO(void) MenuItemsSource(Windows::Foundation::IInspectable const& value) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::INavigationViewItem>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewItem<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewItemBase
    {
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsSelected() const;
        WINRT_IMPL_AUTO(void) IsSelected(bool value) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::INavigationViewItemBase>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewItemBase<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewItemBaseFactory
    {
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::INavigationViewItemBaseFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewItemBaseFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewItemBaseStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) IsSelectedProperty() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::INavigationViewItemBaseStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewItemBaseStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewItemCollapsedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::NavigationViewItemBase) CollapsedItemContainer() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::IInspectable) CollapsedItem() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::INavigationViewItemCollapsedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewItemCollapsedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewItemExpandingEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::NavigationViewItemBase) ExpandingItemContainer() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::IInspectable) ExpandingItem() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::INavigationViewItemExpandingEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewItemExpandingEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewItemFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::NavigationViewItem) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::INavigationViewItemFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewItemFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewItemHeader
    {
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::INavigationViewItemHeader>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewItemHeader<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewItemHeaderFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::NavigationViewItemHeader) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::INavigationViewItemHeaderFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewItemHeaderFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewItemInvokedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::IInspectable) InvokedItem() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsSettingsInvoked() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::NavigationViewItemBase) InvokedItemContainer() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Media::Animation::NavigationTransitionInfo) RecommendedNavigationTransitionInfo() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::INavigationViewItemInvokedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewItemInvokedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewItemSeparator
    {
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::INavigationViewItemSeparator>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewItemSeparator<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewItemSeparatorFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::NavigationViewItemSeparator) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::INavigationViewItemSeparatorFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewItemSeparatorFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewItemStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) IconProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) CompactPaneLengthProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) SelectsOnInvokedProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) IsExpandedProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) HasUnrealizedChildrenProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) IsChildSelectedProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) MenuItemsProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) MenuItemsSourceProperty() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::INavigationViewItemStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewItemStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewPaneClosingEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(bool) Cancel() const;
        WINRT_IMPL_AUTO(void) Cancel(bool value) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::INavigationViewPaneClosingEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewPaneClosingEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewSelectionChangedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::IInspectable) SelectedItem() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsSettingsSelected() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::NavigationViewItemBase) SelectedItemContainer() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Media::Animation::NavigationTransitionInfo) RecommendedNavigationTransitionInfo() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::INavigationViewSelectionChangedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewSelectionChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) IsPaneOpenProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) CompactModeThresholdWidthProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) ExpandedModeThresholdWidthProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) PaneFooterProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) HeaderProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) HeaderTemplateProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) DisplayModeProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) IsSettingsVisibleProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) IsPaneToggleButtonVisibleProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) AlwaysShowHeaderProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) CompactPaneLengthProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) OpenPaneLengthProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) PaneToggleButtonStyleProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) MenuItemsProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) MenuItemsSourceProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) SelectedItemProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) SettingsItemProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) AutoSuggestBoxProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) MenuItemTemplateProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) MenuItemTemplateSelectorProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) MenuItemContainerStyleProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) MenuItemContainerStyleSelectorProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) IsBackButtonVisibleProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) IsBackEnabledProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) PaneTitleProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) PaneDisplayModeProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) PaneHeaderProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) PaneCustomContentProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) ContentOverlayProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) IsPaneVisibleProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) SelectionFollowsFocusProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) TemplateSettingsProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) ShoulderNavigationEnabledProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) OverflowLabelModeProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) IsTitleBarAutoPaddingEnabledProperty() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::INavigationViewStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewTemplateSettings
    {
        [[nodiscard]] WINRT_IMPL_AUTO(double) TopPadding() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Visibility) OverflowButtonVisibility() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Visibility) PaneToggleButtonVisibility() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Visibility) BackButtonVisibility() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Visibility) TopPaneVisibility() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Visibility) LeftPaneVisibility() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) SingleSelectionFollowsFocus() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettings>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewTemplateSettings<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewTemplateSettingsFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::NavigationViewTemplateSettings) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewTemplateSettingsFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INavigationViewTemplateSettingsStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) TopPaddingProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) OverflowButtonVisibilityProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) PaneToggleButtonVisibilityProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) BackButtonVisibilityProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) TopPaneVisibilityProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) LeftPaneVisibilityProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) SingleSelectionFollowsFocusProperty() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::INavigationViewTemplateSettingsStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INavigationViewTemplateSettingsStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INonVirtualizingLayout
    {
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::INonVirtualizingLayout>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INonVirtualizingLayout<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INonVirtualizingLayoutContext
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::Collections::IVectorView<Windows::UI::Xaml::UIElement>) Children() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContext>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INonVirtualizingLayoutContext<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INonVirtualizingLayoutContextFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::NonVirtualizingLayoutContext) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContextFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INonVirtualizingLayoutContextFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INonVirtualizingLayoutContextOverrides
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::Collections::IVectorView<Windows::UI::Xaml::UIElement>) ChildrenCore() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutContextOverrides>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INonVirtualizingLayoutContextOverrides<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INonVirtualizingLayoutFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::NonVirtualizingLayout) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INonVirtualizingLayoutFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INonVirtualizingLayoutOverrides
    {
        WINRT_IMPL_AUTO(void) InitializeForContextCore(Microsoft::UI::Xaml::Controls::NonVirtualizingLayoutContext const& context) const;
        WINRT_IMPL_AUTO(void) UninitializeForContextCore(Microsoft::UI::Xaml::Controls::NonVirtualizingLayoutContext const& context) const;
        WINRT_IMPL_AUTO(Windows::Foundation::Size) MeasureOverride(Microsoft::UI::Xaml::Controls::NonVirtualizingLayoutContext const& context, Windows::Foundation::Size const& availableSize) const;
        WINRT_IMPL_AUTO(Windows::Foundation::Size) ArrangeOverride(Microsoft::UI::Xaml::Controls::NonVirtualizingLayoutContext const& context, Windows::Foundation::Size const& finalSize) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::INonVirtualizingLayoutOverrides>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INonVirtualizingLayoutOverrides<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INumberBox
    {
        [[nodiscard]] WINRT_IMPL_AUTO(double) Minimum() const;
        WINRT_IMPL_AUTO(void) Minimum(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) Maximum() const;
        WINRT_IMPL_AUTO(void) Maximum(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) Value() const;
        WINRT_IMPL_AUTO(void) Value(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) SmallChange() const;
        WINRT_IMPL_AUTO(void) SmallChange(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) LargeChange() const;
        WINRT_IMPL_AUTO(void) LargeChange(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Text() const;
        WINRT_IMPL_AUTO(void) Text(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::IInspectable) Header() const;
        WINRT_IMPL_AUTO(void) Header(Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DataTemplate) HeaderTemplate() const;
        WINRT_IMPL_AUTO(void) HeaderTemplate(Windows::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) PlaceholderText() const;
        WINRT_IMPL_AUTO(void) PlaceholderText(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Controls::Primitives::FlyoutBase) SelectionFlyout() const;
        WINRT_IMPL_AUTO(void) SelectionFlyout(Windows::UI::Xaml::Controls::Primitives::FlyoutBase const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Media::SolidColorBrush) SelectionHighlightColor() const;
        WINRT_IMPL_AUTO(void) SelectionHighlightColor(Windows::UI::Xaml::Media::SolidColorBrush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::TextReadingOrder) TextReadingOrder() const;
        WINRT_IMPL_AUTO(void) TextReadingOrder(Windows::UI::Xaml::TextReadingOrder const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) PreventKeyboardDisplayOnProgrammaticFocus() const;
        WINRT_IMPL_AUTO(void) PreventKeyboardDisplayOnProgrammaticFocus(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::IInspectable) Description() const;
        WINRT_IMPL_AUTO(void) Description(Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::NumberBoxValidationMode) ValidationMode() const;
        WINRT_IMPL_AUTO(void) ValidationMode(Microsoft::UI::Xaml::Controls::NumberBoxValidationMode const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::NumberBoxSpinButtonPlacementMode) SpinButtonPlacementMode() const;
        WINRT_IMPL_AUTO(void) SpinButtonPlacementMode(Microsoft::UI::Xaml::Controls::NumberBoxSpinButtonPlacementMode const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsWrapEnabled() const;
        WINRT_IMPL_AUTO(void) IsWrapEnabled(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) AcceptsExpression() const;
        WINRT_IMPL_AUTO(void) AcceptsExpression(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Globalization::NumberFormatting::INumberFormatter2) NumberFormatter() const;
        WINRT_IMPL_AUTO(void) NumberFormatter(Windows::Globalization::NumberFormatting::INumberFormatter2 const& value) const;
        WINRT_IMPL_AUTO(winrt::event_token) ValueChanged(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NumberBox, Microsoft::UI::Xaml::Controls::NumberBoxValueChangedEventArgs> const& handler) const;
        using ValueChanged_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::INumberBox, &impl::abi_t<Microsoft::UI::Xaml::Controls::INumberBox>::remove_ValueChanged>;
        [[nodiscard]] ValueChanged_revoker ValueChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::NumberBox, Microsoft::UI::Xaml::Controls::NumberBoxValueChangedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) ValueChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::INumberBox>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INumberBox<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INumberBoxFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::NumberBox) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::INumberBoxFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INumberBoxFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INumberBoxStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) MinimumProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) MaximumProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) ValueProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) SmallChangeProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) LargeChangeProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) TextProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) HeaderProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) HeaderTemplateProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) PlaceholderTextProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) SelectionFlyoutProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) SelectionHighlightColorProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) TextReadingOrderProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) PreventKeyboardDisplayOnProgrammaticFocusProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) DescriptionProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) ValidationModeProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) SpinButtonPlacementModeProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) IsWrapEnabledProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) AcceptsExpressionProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) NumberFormatterProperty() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::INumberBoxStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INumberBoxStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_INumberBoxValueChangedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(double) OldValue() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) NewValue() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::INumberBoxValueChangedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_INumberBoxValueChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IParallaxView
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::UIElement) Child() const;
        WINRT_IMPL_AUTO(void) Child(Windows::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) HorizontalShift() const;
        WINRT_IMPL_AUTO(void) HorizontalShift(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) HorizontalSourceEndOffset() const;
        WINRT_IMPL_AUTO(void) HorizontalSourceEndOffset(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::ParallaxSourceOffsetKind) HorizontalSourceOffsetKind() const;
        WINRT_IMPL_AUTO(void) HorizontalSourceOffsetKind(Microsoft::UI::Xaml::Controls::ParallaxSourceOffsetKind const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) HorizontalSourceStartOffset() const;
        WINRT_IMPL_AUTO(void) HorizontalSourceStartOffset(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsHorizontalShiftClamped() const;
        WINRT_IMPL_AUTO(void) IsHorizontalShiftClamped(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsVerticalShiftClamped() const;
        WINRT_IMPL_AUTO(void) IsVerticalShiftClamped(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) MaxHorizontalShiftRatio() const;
        WINRT_IMPL_AUTO(void) MaxHorizontalShiftRatio(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) MaxVerticalShiftRatio() const;
        WINRT_IMPL_AUTO(void) MaxVerticalShiftRatio(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::UIElement) Source() const;
        WINRT_IMPL_AUTO(void) Source(Windows::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) VerticalShift() const;
        WINRT_IMPL_AUTO(void) VerticalShift(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) VerticalSourceEndOffset() const;
        WINRT_IMPL_AUTO(void) VerticalSourceEndOffset(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::ParallaxSourceOffsetKind) VerticalSourceOffsetKind() const;
        WINRT_IMPL_AUTO(void) VerticalSourceOffsetKind(Microsoft::UI::Xaml::Controls::ParallaxSourceOffsetKind const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) VerticalSourceStartOffset() const;
        WINRT_IMPL_AUTO(void) VerticalSourceStartOffset(double value) const;
        WINRT_IMPL_AUTO(void) RefreshAutomaticHorizontalOffsets() const;
        WINRT_IMPL_AUTO(void) RefreshAutomaticVerticalOffsets() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IParallaxView>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IParallaxView<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IParallaxViewFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::ParallaxView) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IParallaxViewFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IParallaxViewFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IParallaxViewStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) ChildProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) HorizontalSourceEndOffsetProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) HorizontalSourceOffsetKindProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) HorizontalSourceStartOffsetProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) MaxHorizontalShiftRatioProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) HorizontalShiftProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) IsHorizontalShiftClampedProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) IsVerticalShiftClampedProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) SourceProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) VerticalSourceEndOffsetProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) VerticalSourceOffsetKindProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) VerticalSourceStartOffsetProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) MaxVerticalShiftRatioProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) VerticalShiftProperty() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IParallaxViewStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IParallaxViewStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IPathIconSource
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Media::Geometry) Data() const;
        WINRT_IMPL_AUTO(void) Data(Windows::UI::Xaml::Media::Geometry const& value) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IPathIconSource>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IPathIconSource<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IPathIconSourceFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::PathIconSource) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IPathIconSourceFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IPathIconSourceFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IPathIconSourceStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) DataProperty() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IPathIconSourceStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IPathIconSourceStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IPersonPicture
    {
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) BadgeNumber() const;
        WINRT_IMPL_AUTO(void) BadgeNumber(int32_t value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) BadgeGlyph() const;
        WINRT_IMPL_AUTO(void) BadgeGlyph(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Media::ImageSource) BadgeImageSource() const;
        WINRT_IMPL_AUTO(void) BadgeImageSource(Windows::UI::Xaml::Media::ImageSource const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) BadgeText() const;
        WINRT_IMPL_AUTO(void) BadgeText(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsGroup() const;
        WINRT_IMPL_AUTO(void) IsGroup(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::ApplicationModel::Contacts::Contact) Contact() const;
        WINRT_IMPL_AUTO(void) Contact(Windows::ApplicationModel::Contacts::Contact const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) DisplayName() const;
        WINRT_IMPL_AUTO(void) DisplayName(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Initials() const;
        WINRT_IMPL_AUTO(void) Initials(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) PreferSmallImage() const;
        WINRT_IMPL_AUTO(void) PreferSmallImage(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Media::ImageSource) ProfilePicture() const;
        WINRT_IMPL_AUTO(void) ProfilePicture(Windows::UI::Xaml::Media::ImageSource const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::PersonPictureTemplateSettings) TemplateSettings() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IPersonPicture>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IPersonPicture<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IPersonPictureFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::PersonPicture) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IPersonPictureFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IPersonPictureFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IPersonPictureStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) BadgeNumberProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) BadgeGlyphProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) BadgeImageSourceProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) BadgeTextProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) IsGroupProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) ContactProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) DisplayNameProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) InitialsProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) PreferSmallImageProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) ProfilePictureProperty() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IPersonPictureStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IPersonPictureStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IPersonPictureTemplateSettings
    {
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) ActualInitials() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Media::ImageBrush) ActualImageBrush() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IPersonPictureTemplateSettings>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IPersonPictureTemplateSettings<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IProgressBar
    {
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsIndeterminate() const;
        WINRT_IMPL_AUTO(void) IsIndeterminate(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) ShowError() const;
        WINRT_IMPL_AUTO(void) ShowError(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) ShowPaused() const;
        WINRT_IMPL_AUTO(void) ShowPaused(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::ProgressBarTemplateSettings) TemplateSettings() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IProgressBar>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IProgressBar<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IProgressBarFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::ProgressBar) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IProgressBarFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IProgressBarFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IProgressBarStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) IsIndeterminateProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) ShowErrorProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) ShowPausedProperty() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IProgressBarStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IProgressBarStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IProgressBarTemplateSettings
    {
        [[nodiscard]] WINRT_IMPL_AUTO(double) ContainerAnimationStartPosition() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) ContainerAnimationEndPosition() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) Container2AnimationStartPosition() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) Container2AnimationEndPosition() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) ContainerAnimationMidPosition() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) IndicatorLengthDelta() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Media::RectangleGeometry) ClipRect() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) EllipseAnimationEndPosition() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) EllipseAnimationWellPosition() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) EllipseDiameter() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) EllipseOffset() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IProgressBarTemplateSettings>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IProgressBarTemplateSettings<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IProgressRing
    {
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsActive() const;
        WINRT_IMPL_AUTO(void) IsActive(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::ProgressRingTemplateSettings) TemplateSettings() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IProgressRing>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IProgressRing<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IProgressRingFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::ProgressRing) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IProgressRingFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IProgressRingFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IProgressRingStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) IsActiveProperty() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IProgressRingStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IProgressRingStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IProgressRingTemplateSettings
    {
        [[nodiscard]] WINRT_IMPL_AUTO(double) EllipseDiameter() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Thickness) EllipseOffset() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) MaxSideLength() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IProgressRingTemplateSettings>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IProgressRingTemplateSettings<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRadioButtons
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::IInspectable) ItemsSource() const;
        WINRT_IMPL_AUTO(void) ItemsSource(Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable>) Items() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::IInspectable) ItemTemplate() const;
        WINRT_IMPL_AUTO(void) ItemTemplate(Windows::Foundation::IInspectable const& value) const;
        WINRT_IMPL_AUTO(Windows::UI::Xaml::UIElement) ContainerFromIndex(int32_t index) const;
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) SelectedIndex() const;
        WINRT_IMPL_AUTO(void) SelectedIndex(int32_t value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::IInspectable) SelectedItem() const;
        WINRT_IMPL_AUTO(void) SelectedItem(Windows::Foundation::IInspectable const& value) const;
        WINRT_IMPL_AUTO(winrt::event_token) SelectionChanged(Windows::UI::Xaml::Controls::SelectionChangedEventHandler const& handler) const;
        using SelectionChanged_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::IRadioButtons, &impl::abi_t<Microsoft::UI::Xaml::Controls::IRadioButtons>::remove_SelectionChanged>;
        [[nodiscard]] SelectionChanged_revoker SelectionChanged(auto_revoke_t, Windows::UI::Xaml::Controls::SelectionChangedEventHandler const& handler) const;
        WINRT_IMPL_AUTO(void) SelectionChanged(winrt::event_token const& token) const noexcept;
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) MaxColumns() const;
        WINRT_IMPL_AUTO(void) MaxColumns(int32_t value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::IInspectable) Header() const;
        WINRT_IMPL_AUTO(void) Header(Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DataTemplate) HeaderTemplate() const;
        WINRT_IMPL_AUTO(void) HeaderTemplate(Windows::UI::Xaml::DataTemplate const& value) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IRadioButtons>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRadioButtons<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRadioButtonsFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::RadioButtons) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IRadioButtonsFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRadioButtonsFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRadioButtonsStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) ItemsSourceProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) ItemsProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) ItemTemplateProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) SelectedIndexProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) SelectedItemProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) MaxColumnsProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) HeaderProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) HeaderTemplateProperty() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IRadioButtonsStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRadioButtonsStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRadioMenuFlyoutItem
    {
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsChecked() const;
        WINRT_IMPL_AUTO(void) IsChecked(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) GroupName() const;
        WINRT_IMPL_AUTO(void) GroupName(param::hstring const& value) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItem>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRadioMenuFlyoutItem<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRadioMenuFlyoutItemFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::RadioMenuFlyoutItem) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItemFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRadioMenuFlyoutItemFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRadioMenuFlyoutItemStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) IsCheckedProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) GroupNameProperty() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IRadioMenuFlyoutItemStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRadioMenuFlyoutItemStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRatingControl
    {
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Caption() const;
        WINRT_IMPL_AUTO(void) Caption(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) InitialSetValue() const;
        WINRT_IMPL_AUTO(void) InitialSetValue(int32_t value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsClearEnabled() const;
        WINRT_IMPL_AUTO(void) IsClearEnabled(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsReadOnly() const;
        WINRT_IMPL_AUTO(void) IsReadOnly(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) MaxRating() const;
        WINRT_IMPL_AUTO(void) MaxRating(int32_t value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) PlaceholderValue() const;
        WINRT_IMPL_AUTO(void) PlaceholderValue(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::RatingItemInfo) ItemInfo() const;
        WINRT_IMPL_AUTO(void) ItemInfo(Microsoft::UI::Xaml::Controls::RatingItemInfo const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) Value() const;
        WINRT_IMPL_AUTO(void) Value(double value) const;
        WINRT_IMPL_AUTO(winrt::event_token) ValueChanged(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::RatingControl, Windows::Foundation::IInspectable> const& handler) const;
        using ValueChanged_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::IRatingControl, &impl::abi_t<Microsoft::UI::Xaml::Controls::IRatingControl>::remove_ValueChanged>;
        [[nodiscard]] ValueChanged_revoker ValueChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::RatingControl, Windows::Foundation::IInspectable> const& handler) const;
        WINRT_IMPL_AUTO(void) ValueChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IRatingControl>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRatingControl<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRatingControlFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::RatingControl) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IRatingControlFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRatingControlFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRatingControlStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) CaptionProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) InitialSetValueProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) IsClearEnabledProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) IsReadOnlyProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) MaxRatingProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) PlaceholderValueProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) ItemInfoProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) ValueProperty() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IRatingControlStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRatingControlStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRatingItemFontInfo
    {
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) DisabledGlyph() const;
        WINRT_IMPL_AUTO(void) DisabledGlyph(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Glyph() const;
        WINRT_IMPL_AUTO(void) Glyph(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) PointerOverGlyph() const;
        WINRT_IMPL_AUTO(void) PointerOverGlyph(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) PointerOverPlaceholderGlyph() const;
        WINRT_IMPL_AUTO(void) PointerOverPlaceholderGlyph(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) PlaceholderGlyph() const;
        WINRT_IMPL_AUTO(void) PlaceholderGlyph(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) UnsetGlyph() const;
        WINRT_IMPL_AUTO(void) UnsetGlyph(param::hstring const& value) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IRatingItemFontInfo>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRatingItemFontInfo<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRatingItemFontInfoFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::RatingItemFontInfo) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IRatingItemFontInfoFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRatingItemFontInfoFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRatingItemFontInfoStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) DisabledGlyphProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) GlyphProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) PlaceholderGlyphProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) PointerOverGlyphProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) PointerOverPlaceholderGlyphProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) UnsetGlyphProperty() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IRatingItemFontInfoStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRatingItemFontInfoStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRatingItemImageInfo
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Media::ImageSource) DisabledImage() const;
        WINRT_IMPL_AUTO(void) DisabledImage(Windows::UI::Xaml::Media::ImageSource const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Media::ImageSource) Image() const;
        WINRT_IMPL_AUTO(void) Image(Windows::UI::Xaml::Media::ImageSource const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Media::ImageSource) PlaceholderImage() const;
        WINRT_IMPL_AUTO(void) PlaceholderImage(Windows::UI::Xaml::Media::ImageSource const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Media::ImageSource) PointerOverImage() const;
        WINRT_IMPL_AUTO(void) PointerOverImage(Windows::UI::Xaml::Media::ImageSource const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Media::ImageSource) PointerOverPlaceholderImage() const;
        WINRT_IMPL_AUTO(void) PointerOverPlaceholderImage(Windows::UI::Xaml::Media::ImageSource const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Media::ImageSource) UnsetImage() const;
        WINRT_IMPL_AUTO(void) UnsetImage(Windows::UI::Xaml::Media::ImageSource const& value) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IRatingItemImageInfo>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRatingItemImageInfo<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRatingItemImageInfoFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::RatingItemImageInfo) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IRatingItemImageInfoFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRatingItemImageInfoFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRatingItemImageInfoStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) DisabledImageProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) ImageProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) PlaceholderImageProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) PointerOverImageProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) PointerOverPlaceholderImageProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) UnsetImageProperty() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IRatingItemImageInfoStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRatingItemImageInfoStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRatingItemInfo
    {
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IRatingItemInfo>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRatingItemInfo<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRatingItemInfoFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::RatingItemInfo) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IRatingItemInfoFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRatingItemInfoFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRefreshContainer
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::RefreshVisualizer) Visualizer() const;
        WINRT_IMPL_AUTO(void) Visualizer(Microsoft::UI::Xaml::Controls::RefreshVisualizer const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::RefreshPullDirection) PullDirection() const;
        WINRT_IMPL_AUTO(void) PullDirection(Microsoft::UI::Xaml::Controls::RefreshPullDirection const& value) const;
        WINRT_IMPL_AUTO(winrt::event_token) RefreshRequested(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::RefreshContainer, Microsoft::UI::Xaml::Controls::RefreshRequestedEventArgs> const& handler) const;
        using RefreshRequested_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::IRefreshContainer, &impl::abi_t<Microsoft::UI::Xaml::Controls::IRefreshContainer>::remove_RefreshRequested>;
        [[nodiscard]] RefreshRequested_revoker RefreshRequested(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::RefreshContainer, Microsoft::UI::Xaml::Controls::RefreshRequestedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) RefreshRequested(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(void) RequestRefresh() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IRefreshContainer>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRefreshContainer<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRefreshContainerFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::RefreshContainer) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IRefreshContainerFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRefreshContainerFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRefreshContainerStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) VisualizerProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) PullDirectionProperty() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IRefreshContainerStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRefreshContainerStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRefreshInteractionRatioChangedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(double) InteractionRatio() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IRefreshInteractionRatioChangedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRefreshInteractionRatioChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRefreshRequestedEventArgs
    {
        WINRT_IMPL_AUTO(Windows::Foundation::Deferral) GetDeferral() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IRefreshRequestedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRefreshRequestedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRefreshStateChangedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::RefreshVisualizerState) OldState() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::RefreshVisualizerState) NewState() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IRefreshStateChangedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRefreshStateChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRefreshVisualizer
    {
        WINRT_IMPL_AUTO(void) RequestRefresh() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::RefreshVisualizerOrientation) Orientation() const;
        WINRT_IMPL_AUTO(void) Orientation(Microsoft::UI::Xaml::Controls::RefreshVisualizerOrientation const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::UIElement) Content() const;
        WINRT_IMPL_AUTO(void) Content(Windows::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::RefreshVisualizerState) State() const;
        WINRT_IMPL_AUTO(winrt::event_token) RefreshRequested(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::RefreshVisualizer, Microsoft::UI::Xaml::Controls::RefreshRequestedEventArgs> const& handler) const;
        using RefreshRequested_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::IRefreshVisualizer, &impl::abi_t<Microsoft::UI::Xaml::Controls::IRefreshVisualizer>::remove_RefreshRequested>;
        [[nodiscard]] RefreshRequested_revoker RefreshRequested(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::RefreshVisualizer, Microsoft::UI::Xaml::Controls::RefreshRequestedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) RefreshRequested(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) RefreshStateChanged(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::RefreshVisualizer, Microsoft::UI::Xaml::Controls::RefreshStateChangedEventArgs> const& handler) const;
        using RefreshStateChanged_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::IRefreshVisualizer, &impl::abi_t<Microsoft::UI::Xaml::Controls::IRefreshVisualizer>::remove_RefreshStateChanged>;
        [[nodiscard]] RefreshStateChanged_revoker RefreshStateChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::RefreshVisualizer, Microsoft::UI::Xaml::Controls::RefreshStateChangedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) RefreshStateChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IRefreshVisualizer>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRefreshVisualizer<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRefreshVisualizerFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::RefreshVisualizer) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IRefreshVisualizerFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRefreshVisualizerFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRefreshVisualizerStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) InfoProviderProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) OrientationProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) ContentProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) StateProperty() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IRefreshVisualizerStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRefreshVisualizerStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRevealListViewItemPresenter
    {
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IRevealListViewItemPresenter>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRevealListViewItemPresenter<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IRevealListViewItemPresenterFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::RevealListViewItemPresenter) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IRevealListViewItemPresenterFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IRevealListViewItemPresenterFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISplitButton
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Controls::Primitives::FlyoutBase) Flyout() const;
        WINRT_IMPL_AUTO(void) Flyout(Windows::UI::Xaml::Controls::Primitives::FlyoutBase const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Input::ICommand) Command() const;
        WINRT_IMPL_AUTO(void) Command(Windows::UI::Xaml::Input::ICommand const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::IInspectable) CommandParameter() const;
        WINRT_IMPL_AUTO(void) CommandParameter(Windows::Foundation::IInspectable const& value) const;
        WINRT_IMPL_AUTO(winrt::event_token) Click(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::SplitButton, Microsoft::UI::Xaml::Controls::SplitButtonClickEventArgs> const& handler) const;
        using Click_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::ISplitButton, &impl::abi_t<Microsoft::UI::Xaml::Controls::ISplitButton>::remove_Click>;
        [[nodiscard]] Click_revoker Click(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::SplitButton, Microsoft::UI::Xaml::Controls::SplitButtonClickEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) Click(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ISplitButton>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISplitButton<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISplitButtonClickEventArgs
    {
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ISplitButtonClickEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISplitButtonClickEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISplitButtonFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::SplitButton) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ISplitButtonFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISplitButtonFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISplitButtonStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) FlyoutProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) CommandProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) CommandParameterProperty() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ISplitButtonStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISplitButtonStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IStackLayout
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Controls::Orientation) Orientation() const;
        WINRT_IMPL_AUTO(void) Orientation(Windows::UI::Xaml::Controls::Orientation const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) Spacing() const;
        WINRT_IMPL_AUTO(void) Spacing(double value) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IStackLayout>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IStackLayout<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IStackLayoutFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::StackLayout) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IStackLayoutFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IStackLayoutFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IStackLayoutStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) OrientationProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) SpacingProperty() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IStackLayoutStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IStackLayoutStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISwipeControl
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::SwipeItems) LeftItems() const;
        WINRT_IMPL_AUTO(void) LeftItems(Microsoft::UI::Xaml::Controls::SwipeItems const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::SwipeItems) RightItems() const;
        WINRT_IMPL_AUTO(void) RightItems(Microsoft::UI::Xaml::Controls::SwipeItems const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::SwipeItems) TopItems() const;
        WINRT_IMPL_AUTO(void) TopItems(Microsoft::UI::Xaml::Controls::SwipeItems const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::SwipeItems) BottomItems() const;
        WINRT_IMPL_AUTO(void) BottomItems(Microsoft::UI::Xaml::Controls::SwipeItems const& value) const;
        WINRT_IMPL_AUTO(void) Close() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ISwipeControl>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISwipeControl<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISwipeControlFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::SwipeControl) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ISwipeControlFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISwipeControlFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISwipeControlStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) LeftItemsProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) RightItemsProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) TopItemsProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) BottomItemsProperty() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ISwipeControlStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISwipeControlStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISwipeItem
    {
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Text() const;
        WINRT_IMPL_AUTO(void) Text(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::IconSource) IconSource() const;
        WINRT_IMPL_AUTO(void) IconSource(Microsoft::UI::Xaml::Controls::IconSource const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Media::Brush) Background() const;
        WINRT_IMPL_AUTO(void) Background(Windows::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Media::Brush) Foreground() const;
        WINRT_IMPL_AUTO(void) Foreground(Windows::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Input::ICommand) Command() const;
        WINRT_IMPL_AUTO(void) Command(Windows::UI::Xaml::Input::ICommand const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::IInspectable) CommandParameter() const;
        WINRT_IMPL_AUTO(void) CommandParameter(Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::SwipeBehaviorOnInvoked) BehaviorOnInvoked() const;
        WINRT_IMPL_AUTO(void) BehaviorOnInvoked(Microsoft::UI::Xaml::Controls::SwipeBehaviorOnInvoked const& value) const;
        WINRT_IMPL_AUTO(winrt::event_token) Invoked(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::SwipeItem, Microsoft::UI::Xaml::Controls::SwipeItemInvokedEventArgs> const& handler) const;
        using Invoked_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::ISwipeItem, &impl::abi_t<Microsoft::UI::Xaml::Controls::ISwipeItem>::remove_Invoked>;
        [[nodiscard]] Invoked_revoker Invoked(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::SwipeItem, Microsoft::UI::Xaml::Controls::SwipeItemInvokedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) Invoked(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ISwipeItem>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISwipeItem<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISwipeItemFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::SwipeItem) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ISwipeItemFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISwipeItemFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISwipeItemInvokedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::SwipeControl) SwipeControl() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ISwipeItemInvokedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISwipeItemInvokedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISwipeItemStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) IconSourceProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) TextProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) BackgroundProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) ForegroundProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) CommandProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) CommandParameterProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) BehaviorOnInvokedProperty() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ISwipeItemStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISwipeItemStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISwipeItems
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::SwipeMode) Mode() const;
        WINRT_IMPL_AUTO(void) Mode(Microsoft::UI::Xaml::Controls::SwipeMode const& value) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ISwipeItems>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISwipeItems<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISwipeItemsFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::SwipeItems) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ISwipeItemsFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISwipeItemsFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISwipeItemsStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) ModeProperty() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ISwipeItemsStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISwipeItemsStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISymbolIconSource
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Controls::Symbol) Symbol() const;
        WINRT_IMPL_AUTO(void) Symbol(Windows::UI::Xaml::Controls::Symbol const& value) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ISymbolIconSource>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISymbolIconSource<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISymbolIconSourceFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::SymbolIconSource) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ISymbolIconSourceFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISymbolIconSourceFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ISymbolIconSourceStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) SymbolProperty() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ISymbolIconSourceStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ISymbolIconSourceStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITabView
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::TabViewWidthMode) TabWidthMode() const;
        WINRT_IMPL_AUTO(void) TabWidthMode(Microsoft::UI::Xaml::Controls::TabViewWidthMode const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::TabViewCloseButtonOverlayMode) CloseButtonOverlayMode() const;
        WINRT_IMPL_AUTO(void) CloseButtonOverlayMode(Microsoft::UI::Xaml::Controls::TabViewCloseButtonOverlayMode const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::IInspectable) TabStripHeader() const;
        WINRT_IMPL_AUTO(void) TabStripHeader(Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DataTemplate) TabStripHeaderTemplate() const;
        WINRT_IMPL_AUTO(void) TabStripHeaderTemplate(Windows::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::IInspectable) TabStripFooter() const;
        WINRT_IMPL_AUTO(void) TabStripFooter(Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DataTemplate) TabStripFooterTemplate() const;
        WINRT_IMPL_AUTO(void) TabStripFooterTemplate(Windows::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsAddTabButtonVisible() const;
        WINRT_IMPL_AUTO(void) IsAddTabButtonVisible(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Input::ICommand) AddTabButtonCommand() const;
        WINRT_IMPL_AUTO(void) AddTabButtonCommand(Windows::UI::Xaml::Input::ICommand const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::IInspectable) AddTabButtonCommandParameter() const;
        WINRT_IMPL_AUTO(void) AddTabButtonCommandParameter(Windows::Foundation::IInspectable const& value) const;
        WINRT_IMPL_AUTO(winrt::event_token) TabCloseRequested(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TabView, Microsoft::UI::Xaml::Controls::TabViewTabCloseRequestedEventArgs> const& handler) const;
        using TabCloseRequested_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::ITabView, &impl::abi_t<Microsoft::UI::Xaml::Controls::ITabView>::remove_TabCloseRequested>;
        [[nodiscard]] TabCloseRequested_revoker TabCloseRequested(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TabView, Microsoft::UI::Xaml::Controls::TabViewTabCloseRequestedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) TabCloseRequested(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) TabDroppedOutside(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TabView, Microsoft::UI::Xaml::Controls::TabViewTabDroppedOutsideEventArgs> const& handler) const;
        using TabDroppedOutside_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::ITabView, &impl::abi_t<Microsoft::UI::Xaml::Controls::ITabView>::remove_TabDroppedOutside>;
        [[nodiscard]] TabDroppedOutside_revoker TabDroppedOutside(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TabView, Microsoft::UI::Xaml::Controls::TabViewTabDroppedOutsideEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) TabDroppedOutside(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) AddTabButtonClick(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TabView, Windows::Foundation::IInspectable> const& handler) const;
        using AddTabButtonClick_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::ITabView, &impl::abi_t<Microsoft::UI::Xaml::Controls::ITabView>::remove_AddTabButtonClick>;
        [[nodiscard]] AddTabButtonClick_revoker AddTabButtonClick(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TabView, Windows::Foundation::IInspectable> const& handler) const;
        WINRT_IMPL_AUTO(void) AddTabButtonClick(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) TabItemsChanged(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TabView, Windows::Foundation::Collections::IVectorChangedEventArgs> const& handler) const;
        using TabItemsChanged_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::ITabView, &impl::abi_t<Microsoft::UI::Xaml::Controls::ITabView>::remove_TabItemsChanged>;
        [[nodiscard]] TabItemsChanged_revoker TabItemsChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TabView, Windows::Foundation::Collections::IVectorChangedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) TabItemsChanged(winrt::event_token const& token) const noexcept;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::IInspectable) TabItemsSource() const;
        WINRT_IMPL_AUTO(void) TabItemsSource(Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable>) TabItems() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DataTemplate) TabItemTemplate() const;
        WINRT_IMPL_AUTO(void) TabItemTemplate(Windows::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Controls::DataTemplateSelector) TabItemTemplateSelector() const;
        WINRT_IMPL_AUTO(void) TabItemTemplateSelector(Windows::UI::Xaml::Controls::DataTemplateSelector const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) CanDragTabs() const;
        WINRT_IMPL_AUTO(void) CanDragTabs(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) CanReorderTabs() const;
        WINRT_IMPL_AUTO(void) CanReorderTabs(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) AllowDropTabs() const;
        WINRT_IMPL_AUTO(void) AllowDropTabs(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) SelectedIndex() const;
        WINRT_IMPL_AUTO(void) SelectedIndex(int32_t value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::IInspectable) SelectedItem() const;
        WINRT_IMPL_AUTO(void) SelectedItem(Windows::Foundation::IInspectable const& value) const;
        WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyObject) ContainerFromItem(Windows::Foundation::IInspectable const& item) const;
        WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyObject) ContainerFromIndex(int32_t index) const;
        WINRT_IMPL_AUTO(winrt::event_token) SelectionChanged(Windows::UI::Xaml::Controls::SelectionChangedEventHandler const& handler) const;
        using SelectionChanged_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::ITabView, &impl::abi_t<Microsoft::UI::Xaml::Controls::ITabView>::remove_SelectionChanged>;
        [[nodiscard]] SelectionChanged_revoker SelectionChanged(auto_revoke_t, Windows::UI::Xaml::Controls::SelectionChangedEventHandler const& handler) const;
        WINRT_IMPL_AUTO(void) SelectionChanged(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) TabDragStarting(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TabView, Microsoft::UI::Xaml::Controls::TabViewTabDragStartingEventArgs> const& handler) const;
        using TabDragStarting_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::ITabView, &impl::abi_t<Microsoft::UI::Xaml::Controls::ITabView>::remove_TabDragStarting>;
        [[nodiscard]] TabDragStarting_revoker TabDragStarting(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TabView, Microsoft::UI::Xaml::Controls::TabViewTabDragStartingEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) TabDragStarting(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) TabDragCompleted(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TabView, Microsoft::UI::Xaml::Controls::TabViewTabDragCompletedEventArgs> const& handler) const;
        using TabDragCompleted_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::ITabView, &impl::abi_t<Microsoft::UI::Xaml::Controls::ITabView>::remove_TabDragCompleted>;
        [[nodiscard]] TabDragCompleted_revoker TabDragCompleted(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TabView, Microsoft::UI::Xaml::Controls::TabViewTabDragCompletedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) TabDragCompleted(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) TabStripDragOver(Windows::UI::Xaml::DragEventHandler const& handler) const;
        using TabStripDragOver_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::ITabView, &impl::abi_t<Microsoft::UI::Xaml::Controls::ITabView>::remove_TabStripDragOver>;
        [[nodiscard]] TabStripDragOver_revoker TabStripDragOver(auto_revoke_t, Windows::UI::Xaml::DragEventHandler const& handler) const;
        WINRT_IMPL_AUTO(void) TabStripDragOver(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) TabStripDrop(Windows::UI::Xaml::DragEventHandler const& handler) const;
        using TabStripDrop_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::ITabView, &impl::abi_t<Microsoft::UI::Xaml::Controls::ITabView>::remove_TabStripDrop>;
        [[nodiscard]] TabStripDrop_revoker TabStripDrop(auto_revoke_t, Windows::UI::Xaml::DragEventHandler const& handler) const;
        WINRT_IMPL_AUTO(void) TabStripDrop(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ITabView>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITabView<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITabViewFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::TabView) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ITabViewFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITabViewFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITabViewItem
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::IInspectable) Header() const;
        WINRT_IMPL_AUTO(void) Header(Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DataTemplate) HeaderTemplate() const;
        WINRT_IMPL_AUTO(void) HeaderTemplate(Windows::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::IconSource) IconSource() const;
        WINRT_IMPL_AUTO(void) IconSource(Microsoft::UI::Xaml::Controls::IconSource const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsClosable() const;
        WINRT_IMPL_AUTO(void) IsClosable(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::TabViewItemTemplateSettings) TabViewTemplateSettings() const;
        WINRT_IMPL_AUTO(winrt::event_token) CloseRequested(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TabViewItem, Microsoft::UI::Xaml::Controls::TabViewTabCloseRequestedEventArgs> const& handler) const;
        using CloseRequested_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::ITabViewItem, &impl::abi_t<Microsoft::UI::Xaml::Controls::ITabViewItem>::remove_CloseRequested>;
        [[nodiscard]] CloseRequested_revoker CloseRequested(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TabViewItem, Microsoft::UI::Xaml::Controls::TabViewTabCloseRequestedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) CloseRequested(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ITabViewItem>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITabViewItem<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITabViewItemFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::TabViewItem) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ITabViewItemFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITabViewItemFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITabViewItemStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) HeaderProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) HeaderTemplateProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) IconSourceProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) IsClosableProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) TabViewTemplateSettingsProperty() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ITabViewItemStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITabViewItemStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITabViewItemTemplateSettings
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Controls::IconElement) IconElement() const;
        WINRT_IMPL_AUTO(void) IconElement(Windows::UI::Xaml::Controls::IconElement const& value) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ITabViewItemTemplateSettings>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITabViewItemTemplateSettings<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITabViewItemTemplateSettingsFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::TabViewItemTemplateSettings) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ITabViewItemTemplateSettingsFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITabViewItemTemplateSettingsFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITabViewItemTemplateSettingsStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) IconElementProperty() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ITabViewItemTemplateSettingsStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITabViewItemTemplateSettingsStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITabViewStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) TabWidthModeProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) TabStripHeaderProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) TabStripHeaderTemplateProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) TabStripFooterProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) TabStripFooterTemplateProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) IsAddTabButtonVisibleProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) AddTabButtonCommandProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) AddTabButtonCommandParameterProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) TabItemsSourceProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) TabItemsProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) TabItemTemplateProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) TabItemTemplateSelectorProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) CloseButtonOverlayModeProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) CanDragTabsProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) CanReorderTabsProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) AllowDropTabsProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) SelectedIndexProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) SelectedItemProperty() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ITabViewStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITabViewStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITabViewTabCloseRequestedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::IInspectable) Item() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::TabViewItem) Tab() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ITabViewTabCloseRequestedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITabViewTabCloseRequestedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITabViewTabDragCompletedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::ApplicationModel::DataTransfer::DataPackageOperation) DropResult() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::IInspectable) Item() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::TabViewItem) Tab() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ITabViewTabDragCompletedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITabViewTabDragCompletedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITabViewTabDragStartingEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(bool) Cancel() const;
        WINRT_IMPL_AUTO(void) Cancel(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::ApplicationModel::DataTransfer::DataPackage) Data() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::IInspectable) Item() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::TabViewItem) Tab() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ITabViewTabDragStartingEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITabViewTabDragStartingEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITabViewTabDroppedOutsideEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::IInspectable) Item() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::TabViewItem) Tab() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ITabViewTabDroppedOutsideEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITabViewTabDroppedOutsideEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITeachingTip
    {
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Title() const;
        WINRT_IMPL_AUTO(void) Title(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Subtitle() const;
        WINRT_IMPL_AUTO(void) Subtitle(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsOpen() const;
        WINRT_IMPL_AUTO(void) IsOpen(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::FrameworkElement) Target() const;
        WINRT_IMPL_AUTO(void) Target(Windows::UI::Xaml::FrameworkElement const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::TeachingTipTailVisibility) TailVisibility() const;
        WINRT_IMPL_AUTO(void) TailVisibility(Microsoft::UI::Xaml::Controls::TeachingTipTailVisibility const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::IInspectable) ActionButtonContent() const;
        WINRT_IMPL_AUTO(void) ActionButtonContent(Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Style) ActionButtonStyle() const;
        WINRT_IMPL_AUTO(void) ActionButtonStyle(Windows::UI::Xaml::Style const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Input::ICommand) ActionButtonCommand() const;
        WINRT_IMPL_AUTO(void) ActionButtonCommand(Windows::UI::Xaml::Input::ICommand const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::IInspectable) ActionButtonCommandParameter() const;
        WINRT_IMPL_AUTO(void) ActionButtonCommandParameter(Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::IInspectable) CloseButtonContent() const;
        WINRT_IMPL_AUTO(void) CloseButtonContent(Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Style) CloseButtonStyle() const;
        WINRT_IMPL_AUTO(void) CloseButtonStyle(Windows::UI::Xaml::Style const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Input::ICommand) CloseButtonCommand() const;
        WINRT_IMPL_AUTO(void) CloseButtonCommand(Windows::UI::Xaml::Input::ICommand const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::IInspectable) CloseButtonCommandParameter() const;
        WINRT_IMPL_AUTO(void) CloseButtonCommandParameter(Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Thickness) PlacementMargin() const;
        WINRT_IMPL_AUTO(void) PlacementMargin(Windows::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) ShouldConstrainToRootBounds() const;
        WINRT_IMPL_AUTO(void) ShouldConstrainToRootBounds(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsLightDismissEnabled() const;
        WINRT_IMPL_AUTO(void) IsLightDismissEnabled(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::TeachingTipPlacementMode) PreferredPlacement() const;
        WINRT_IMPL_AUTO(void) PreferredPlacement(Microsoft::UI::Xaml::Controls::TeachingTipPlacementMode const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::TeachingTipHeroContentPlacementMode) HeroContentPlacement() const;
        WINRT_IMPL_AUTO(void) HeroContentPlacement(Microsoft::UI::Xaml::Controls::TeachingTipHeroContentPlacementMode const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::UIElement) HeroContent() const;
        WINRT_IMPL_AUTO(void) HeroContent(Windows::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::IconSource) IconSource() const;
        WINRT_IMPL_AUTO(void) IconSource(Microsoft::UI::Xaml::Controls::IconSource const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::TeachingTipTemplateSettings) TemplateSettings() const;
        WINRT_IMPL_AUTO(winrt::event_token) ActionButtonClick(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TeachingTip, Windows::Foundation::IInspectable> const& handler) const;
        using ActionButtonClick_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::ITeachingTip, &impl::abi_t<Microsoft::UI::Xaml::Controls::ITeachingTip>::remove_ActionButtonClick>;
        [[nodiscard]] ActionButtonClick_revoker ActionButtonClick(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TeachingTip, Windows::Foundation::IInspectable> const& handler) const;
        WINRT_IMPL_AUTO(void) ActionButtonClick(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) CloseButtonClick(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TeachingTip, Windows::Foundation::IInspectable> const& handler) const;
        using CloseButtonClick_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::ITeachingTip, &impl::abi_t<Microsoft::UI::Xaml::Controls::ITeachingTip>::remove_CloseButtonClick>;
        [[nodiscard]] CloseButtonClick_revoker CloseButtonClick(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TeachingTip, Windows::Foundation::IInspectable> const& handler) const;
        WINRT_IMPL_AUTO(void) CloseButtonClick(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) Closing(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TeachingTip, Microsoft::UI::Xaml::Controls::TeachingTipClosingEventArgs> const& handler) const;
        using Closing_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::ITeachingTip, &impl::abi_t<Microsoft::UI::Xaml::Controls::ITeachingTip>::remove_Closing>;
        [[nodiscard]] Closing_revoker Closing(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TeachingTip, Microsoft::UI::Xaml::Controls::TeachingTipClosingEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) Closing(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) Closed(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TeachingTip, Microsoft::UI::Xaml::Controls::TeachingTipClosedEventArgs> const& handler) const;
        using Closed_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::ITeachingTip, &impl::abi_t<Microsoft::UI::Xaml::Controls::ITeachingTip>::remove_Closed>;
        [[nodiscard]] Closed_revoker Closed(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TeachingTip, Microsoft::UI::Xaml::Controls::TeachingTipClosedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) Closed(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ITeachingTip>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITeachingTip<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITeachingTipClosedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::TeachingTipCloseReason) Reason() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ITeachingTipClosedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITeachingTipClosedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITeachingTipClosingEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::TeachingTipCloseReason) Reason() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) Cancel() const;
        WINRT_IMPL_AUTO(void) Cancel(bool value) const;
        WINRT_IMPL_AUTO(Windows::Foundation::Deferral) GetDeferral() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ITeachingTipClosingEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITeachingTipClosingEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITeachingTipFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::TeachingTip) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ITeachingTipFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITeachingTipFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITeachingTipStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) IsOpenProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) TargetProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) TailVisibilityProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) TitleProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) SubtitleProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) ActionButtonContentProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) ActionButtonStyleProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) ActionButtonCommandProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) ActionButtonCommandParameterProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) CloseButtonContentProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) CloseButtonStyleProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) CloseButtonCommandProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) CloseButtonCommandParameterProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) PlacementMarginProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) ShouldConstrainToRootBoundsProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) IsLightDismissEnabledProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) PreferredPlacementProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) HeroContentPlacementProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) HeroContentProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) IconSourceProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) TemplateSettingsProperty() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ITeachingTipStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITeachingTipStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITeachingTipTemplateSettings
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Thickness) TopRightHighlightMargin() const;
        WINRT_IMPL_AUTO(void) TopRightHighlightMargin(Windows::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Thickness) TopLeftHighlightMargin() const;
        WINRT_IMPL_AUTO(void) TopLeftHighlightMargin(Windows::UI::Xaml::Thickness const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Controls::IconElement) IconElement() const;
        WINRT_IMPL_AUTO(void) IconElement(Windows::UI::Xaml::Controls::IconElement const& value) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettings>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITeachingTipTemplateSettings<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITeachingTipTemplateSettingsFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::TeachingTipTemplateSettings) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettingsFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITeachingTipTemplateSettingsFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITeachingTipTemplateSettingsStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) TopRightHighlightMarginProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) TopLeftHighlightMarginProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) IconElementProperty() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ITeachingTipTemplateSettingsStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITeachingTipTemplateSettingsStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITextCommandBarFlyout
    {
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ITextCommandBarFlyout>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITextCommandBarFlyout<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITextCommandBarFlyoutFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::TextCommandBarFlyout) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ITextCommandBarFlyoutFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITextCommandBarFlyoutFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IToggleSplitButton
    {
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsChecked() const;
        WINRT_IMPL_AUTO(void) IsChecked(bool value) const;
        WINRT_IMPL_AUTO(winrt::event_token) IsCheckedChanged(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ToggleSplitButton, Microsoft::UI::Xaml::Controls::ToggleSplitButtonIsCheckedChangedEventArgs> const& handler) const;
        using IsCheckedChanged_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::IToggleSplitButton, &impl::abi_t<Microsoft::UI::Xaml::Controls::IToggleSplitButton>::remove_IsCheckedChanged>;
        [[nodiscard]] IsCheckedChanged_revoker IsCheckedChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::ToggleSplitButton, Microsoft::UI::Xaml::Controls::ToggleSplitButtonIsCheckedChangedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) IsCheckedChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IToggleSplitButton>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IToggleSplitButton<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IToggleSplitButtonFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::ToggleSplitButton) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IToggleSplitButtonFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IToggleSplitButtonFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IToggleSplitButtonIsCheckedChangedEventArgs
    {
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IToggleSplitButtonIsCheckedChangedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IToggleSplitButtonIsCheckedChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IToggleSplitButtonStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) IsCheckedProperty() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IToggleSplitButtonStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IToggleSplitButtonStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITreeView
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::Collections::IVector<Microsoft::UI::Xaml::Controls::TreeViewNode>) RootNodes() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::TreeViewSelectionMode) SelectionMode() const;
        WINRT_IMPL_AUTO(void) SelectionMode(Microsoft::UI::Xaml::Controls::TreeViewSelectionMode const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::Collections::IVector<Microsoft::UI::Xaml::Controls::TreeViewNode>) SelectedNodes() const;
        WINRT_IMPL_AUTO(void) Expand(Microsoft::UI::Xaml::Controls::TreeViewNode const& value) const;
        WINRT_IMPL_AUTO(void) Collapse(Microsoft::UI::Xaml::Controls::TreeViewNode const& value) const;
        WINRT_IMPL_AUTO(void) SelectAll() const;
        WINRT_IMPL_AUTO(winrt::event_token) ItemInvoked(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TreeView, Microsoft::UI::Xaml::Controls::TreeViewItemInvokedEventArgs> const& handler) const;
        using ItemInvoked_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::ITreeView, &impl::abi_t<Microsoft::UI::Xaml::Controls::ITreeView>::remove_ItemInvoked>;
        [[nodiscard]] ItemInvoked_revoker ItemInvoked(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TreeView, Microsoft::UI::Xaml::Controls::TreeViewItemInvokedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) ItemInvoked(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) Expanding(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TreeView, Microsoft::UI::Xaml::Controls::TreeViewExpandingEventArgs> const& handler) const;
        using Expanding_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::ITreeView, &impl::abi_t<Microsoft::UI::Xaml::Controls::ITreeView>::remove_Expanding>;
        [[nodiscard]] Expanding_revoker Expanding(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TreeView, Microsoft::UI::Xaml::Controls::TreeViewExpandingEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) Expanding(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) Collapsed(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TreeView, Microsoft::UI::Xaml::Controls::TreeViewCollapsedEventArgs> const& handler) const;
        using Collapsed_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::ITreeView, &impl::abi_t<Microsoft::UI::Xaml::Controls::ITreeView>::remove_Collapsed>;
        [[nodiscard]] Collapsed_revoker Collapsed(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TreeView, Microsoft::UI::Xaml::Controls::TreeViewCollapsedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) Collapsed(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::TreeViewNode) NodeFromContainer(Windows::UI::Xaml::DependencyObject const& container) const;
        WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyObject) ContainerFromNode(Microsoft::UI::Xaml::Controls::TreeViewNode const& node) const;
        WINRT_IMPL_AUTO(Windows::Foundation::IInspectable) ItemFromContainer(Windows::UI::Xaml::DependencyObject const& container) const;
        WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyObject) ContainerFromItem(Windows::Foundation::IInspectable const& item) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) CanDragItems() const;
        WINRT_IMPL_AUTO(void) CanDragItems(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) CanReorderItems() const;
        WINRT_IMPL_AUTO(void) CanReorderItems(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DataTemplate) ItemTemplate() const;
        WINRT_IMPL_AUTO(void) ItemTemplate(Windows::UI::Xaml::DataTemplate const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Controls::DataTemplateSelector) ItemTemplateSelector() const;
        WINRT_IMPL_AUTO(void) ItemTemplateSelector(Windows::UI::Xaml::Controls::DataTemplateSelector const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Style) ItemContainerStyle() const;
        WINRT_IMPL_AUTO(void) ItemContainerStyle(Windows::UI::Xaml::Style const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Controls::StyleSelector) ItemContainerStyleSelector() const;
        WINRT_IMPL_AUTO(void) ItemContainerStyleSelector(Windows::UI::Xaml::Controls::StyleSelector const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Media::Animation::TransitionCollection) ItemContainerTransitions() const;
        WINRT_IMPL_AUTO(void) ItemContainerTransitions(Windows::UI::Xaml::Media::Animation::TransitionCollection const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::IInspectable) ItemsSource() const;
        WINRT_IMPL_AUTO(void) ItemsSource(Windows::Foundation::IInspectable const& value) const;
        WINRT_IMPL_AUTO(winrt::event_token) DragItemsStarting(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TreeView, Microsoft::UI::Xaml::Controls::TreeViewDragItemsStartingEventArgs> const& handler) const;
        using DragItemsStarting_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::ITreeView, &impl::abi_t<Microsoft::UI::Xaml::Controls::ITreeView>::remove_DragItemsStarting>;
        [[nodiscard]] DragItemsStarting_revoker DragItemsStarting(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TreeView, Microsoft::UI::Xaml::Controls::TreeViewDragItemsStartingEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) DragItemsStarting(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) DragItemsCompleted(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TreeView, Microsoft::UI::Xaml::Controls::TreeViewDragItemsCompletedEventArgs> const& handler) const;
        using DragItemsCompleted_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::ITreeView, &impl::abi_t<Microsoft::UI::Xaml::Controls::ITreeView>::remove_DragItemsCompleted>;
        [[nodiscard]] DragItemsCompleted_revoker DragItemsCompleted(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TreeView, Microsoft::UI::Xaml::Controls::TreeViewDragItemsCompletedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) DragItemsCompleted(winrt::event_token const& token) const noexcept;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::TreeViewNode) SelectedNode() const;
        WINRT_IMPL_AUTO(void) SelectedNode(Microsoft::UI::Xaml::Controls::TreeViewNode const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::IInspectable) SelectedItem() const;
        WINRT_IMPL_AUTO(void) SelectedItem(Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable>) SelectedItems() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ITreeView>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeView<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITreeViewCollapsedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::TreeViewNode) Node() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::IInspectable) Item() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ITreeViewCollapsedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewCollapsedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITreeViewDragItemsCompletedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::ApplicationModel::DataTransfer::DataPackageOperation) DropResult() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::Collections::IVectorView<Windows::Foundation::IInspectable>) Items() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::IInspectable) NewParentItem() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ITreeViewDragItemsCompletedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewDragItemsCompletedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITreeViewDragItemsStartingEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(bool) Cancel() const;
        WINRT_IMPL_AUTO(void) Cancel(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::ApplicationModel::DataTransfer::DataPackage) Data() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::Collections::IVector<Windows::Foundation::IInspectable>) Items() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ITreeViewDragItemsStartingEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewDragItemsStartingEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITreeViewExpandingEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::TreeViewNode) Node() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::IInspectable) Item() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ITreeViewExpandingEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewExpandingEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITreeViewFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::TreeView) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ITreeViewFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITreeViewItem
    {
        [[nodiscard]] WINRT_IMPL_AUTO(double) GlyphOpacity() const;
        WINRT_IMPL_AUTO(void) GlyphOpacity(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Media::Brush) GlyphBrush() const;
        WINRT_IMPL_AUTO(void) GlyphBrush(Windows::UI::Xaml::Media::Brush const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) ExpandedGlyph() const;
        WINRT_IMPL_AUTO(void) ExpandedGlyph(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) CollapsedGlyph() const;
        WINRT_IMPL_AUTO(void) CollapsedGlyph(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) GlyphSize() const;
        WINRT_IMPL_AUTO(void) GlyphSize(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsExpanded() const;
        WINRT_IMPL_AUTO(void) IsExpanded(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::TreeViewItemTemplateSettings) TreeViewItemTemplateSettings() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) HasUnrealizedChildren() const;
        WINRT_IMPL_AUTO(void) HasUnrealizedChildren(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::IInspectable) ItemsSource() const;
        WINRT_IMPL_AUTO(void) ItemsSource(Windows::Foundation::IInspectable const& value) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ITreeViewItem>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewItem<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITreeViewItemFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::TreeViewItem) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ITreeViewItemFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewItemFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITreeViewItemInvokedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::IInspectable) InvokedItem() const;
        WINRT_IMPL_AUTO(void) Handled(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) Handled() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ITreeViewItemInvokedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewItemInvokedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITreeViewItemStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) GlyphOpacityProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) GlyphBrushProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) ExpandedGlyphProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) CollapsedGlyphProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) GlyphSizeProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) IsExpandedProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) TreeViewItemTemplateSettingsProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) HasUnrealizedChildrenProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) ItemsSourceProperty() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ITreeViewItemStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewItemStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITreeViewItemTemplateSettings
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Visibility) ExpandedGlyphVisibility() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Visibility) CollapsedGlyphVisibility() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Thickness) Indentation() const;
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) DragItemsCount() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettings>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewItemTemplateSettings<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITreeViewItemTemplateSettingsFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::TreeViewItemTemplateSettings) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettingsFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewItemTemplateSettingsFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITreeViewItemTemplateSettingsStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) ExpandedGlyphVisibilityProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) CollapsedGlyphVisibilityProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) IndentationProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) DragItemsCountProperty() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ITreeViewItemTemplateSettingsStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewItemTemplateSettingsStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITreeViewList
    {
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ITreeViewList>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewList<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITreeViewListFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::TreeViewList) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ITreeViewListFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewListFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITreeViewNode
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::IInspectable) Content() const;
        WINRT_IMPL_AUTO(void) Content(Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::TreeViewNode) Parent() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsExpanded() const;
        WINRT_IMPL_AUTO(void) IsExpanded(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) HasChildren() const;
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) Depth() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) HasUnrealizedChildren() const;
        WINRT_IMPL_AUTO(void) HasUnrealizedChildren(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::Collections::IVector<Microsoft::UI::Xaml::Controls::TreeViewNode>) Children() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ITreeViewNode>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewNode<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITreeViewNodeFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::TreeViewNode) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ITreeViewNodeFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewNodeFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITreeViewNodeStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) ContentProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) DepthProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) IsExpandedProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) HasChildrenProperty() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ITreeViewNodeStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewNodeStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITreeViewStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) SelectionModeProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) CanDragItemsProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) CanReorderItemsProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) ItemTemplateProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) ItemTemplateSelectorProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) ItemContainerStyleProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) ItemContainerStyleSelectorProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) ItemContainerTransitionsProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) ItemsSourceProperty() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ITreeViewStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITreeViewStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITwoPaneView
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::UIElement) Pane1() const;
        WINRT_IMPL_AUTO(void) Pane1(Windows::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::UIElement) Pane2() const;
        WINRT_IMPL_AUTO(void) Pane2(Windows::UI::Xaml::UIElement const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::GridLength) Pane1Length() const;
        WINRT_IMPL_AUTO(void) Pane1Length(Windows::UI::Xaml::GridLength const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::GridLength) Pane2Length() const;
        WINRT_IMPL_AUTO(void) Pane2Length(Windows::UI::Xaml::GridLength const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::TwoPaneViewPriority) PanePriority() const;
        WINRT_IMPL_AUTO(void) PanePriority(Microsoft::UI::Xaml::Controls::TwoPaneViewPriority const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::TwoPaneViewMode) Mode() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::TwoPaneViewWideModeConfiguration) WideModeConfiguration() const;
        WINRT_IMPL_AUTO(void) WideModeConfiguration(Microsoft::UI::Xaml::Controls::TwoPaneViewWideModeConfiguration const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::TwoPaneViewTallModeConfiguration) TallModeConfiguration() const;
        WINRT_IMPL_AUTO(void) TallModeConfiguration(Microsoft::UI::Xaml::Controls::TwoPaneViewTallModeConfiguration const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) MinWideModeWidth() const;
        WINRT_IMPL_AUTO(void) MinWideModeWidth(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) MinTallModeHeight() const;
        WINRT_IMPL_AUTO(void) MinTallModeHeight(double value) const;
        WINRT_IMPL_AUTO(winrt::event_token) ModeChanged(Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TwoPaneView, Windows::Foundation::IInspectable> const& handler) const;
        using ModeChanged_revoker = impl::event_revoker<Microsoft::UI::Xaml::Controls::ITwoPaneView, &impl::abi_t<Microsoft::UI::Xaml::Controls::ITwoPaneView>::remove_ModeChanged>;
        [[nodiscard]] ModeChanged_revoker ModeChanged(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::UI::Xaml::Controls::TwoPaneView, Windows::Foundation::IInspectable> const& handler) const;
        WINRT_IMPL_AUTO(void) ModeChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ITwoPaneView>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITwoPaneView<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITwoPaneViewFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::TwoPaneView) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ITwoPaneViewFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITwoPaneViewFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_ITwoPaneViewStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) Pane1Property() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) Pane2Property() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) Pane1LengthProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) Pane2LengthProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) PanePriorityProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) ModeProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) WideModeConfigurationProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) TallModeConfigurationProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) MinWideModeWidthProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) MinTallModeHeightProperty() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::ITwoPaneViewStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_ITwoPaneViewStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IUniformGridLayout
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::Controls::Orientation) Orientation() const;
        WINRT_IMPL_AUTO(void) Orientation(Windows::UI::Xaml::Controls::Orientation const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) MinItemWidth() const;
        WINRT_IMPL_AUTO(void) MinItemWidth(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) MinItemHeight() const;
        WINRT_IMPL_AUTO(void) MinItemHeight(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) MinRowSpacing() const;
        WINRT_IMPL_AUTO(void) MinRowSpacing(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) MinColumnSpacing() const;
        WINRT_IMPL_AUTO(void) MinColumnSpacing(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::UniformGridLayoutItemsJustification) ItemsJustification() const;
        WINRT_IMPL_AUTO(void) ItemsJustification(Microsoft::UI::Xaml::Controls::UniformGridLayoutItemsJustification const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::UniformGridLayoutItemsStretch) ItemsStretch() const;
        WINRT_IMPL_AUTO(void) ItemsStretch(Microsoft::UI::Xaml::Controls::UniformGridLayoutItemsStretch const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) MaximumRowsOrColumns() const;
        WINRT_IMPL_AUTO(void) MaximumRowsOrColumns(int32_t value) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IUniformGridLayout>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IUniformGridLayout<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IUniformGridLayoutFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::UniformGridLayout) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IUniformGridLayoutFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IUniformGridLayoutFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IUniformGridLayoutStatics
    {
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) OrientationProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) MinItemWidthProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) MinItemHeightProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) MinRowSpacingProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) MinColumnSpacingProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) ItemsJustificationProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) ItemsStretchProperty() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::UI::Xaml::DependencyProperty) MaximumRowsOrColumnsProperty() const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IUniformGridLayoutStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IUniformGridLayoutStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayout
    {
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IVirtualizingLayout>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayout<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayoutContext
    {
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) ItemCount() const;
        WINRT_IMPL_AUTO(Windows::Foundation::IInspectable) GetItemAt(int32_t index) const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::Rect) RealizationRect() const;
        WINRT_IMPL_AUTO(Windows::UI::Xaml::UIElement) GetOrCreateElementAt(int32_t index) const;
        WINRT_IMPL_AUTO(Windows::UI::Xaml::UIElement) GetOrCreateElementAt(int32_t index, Microsoft::UI::Xaml::Controls::ElementRealizationOptions const& options) const;
        WINRT_IMPL_AUTO(void) RecycleElement(Windows::UI::Xaml::UIElement const& element) const;
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) RecommendedAnchorIndex() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::Point) LayoutOrigin() const;
        WINRT_IMPL_AUTO(void) LayoutOrigin(Windows::Foundation::Point const& value) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContext>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayoutContext<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayoutContextFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayoutContextFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayoutContextOverrides
    {
        WINRT_IMPL_AUTO(int32_t) ItemCountCore() const;
        WINRT_IMPL_AUTO(Windows::Foundation::IInspectable) GetItemAtCore(int32_t index) const;
        WINRT_IMPL_AUTO(Windows::Foundation::Rect) RealizationRectCore() const;
        WINRT_IMPL_AUTO(Windows::UI::Xaml::UIElement) GetOrCreateElementAtCore(int32_t index, Microsoft::UI::Xaml::Controls::ElementRealizationOptions const& options) const;
        WINRT_IMPL_AUTO(void) RecycleElementCore(Windows::UI::Xaml::UIElement const& element) const;
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) RecommendedAnchorIndexCore() const;
        [[nodiscard]] WINRT_IMPL_AUTO(Windows::Foundation::Point) LayoutOriginCore() const;
        WINRT_IMPL_AUTO(void) LayoutOriginCore(Windows::Foundation::Point const& value) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IVirtualizingLayoutContextOverrides>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayoutContextOverrides<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayoutFactory
    {
        WINRT_IMPL_AUTO(Microsoft::UI::Xaml::Controls::VirtualizingLayout) CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IVirtualizingLayoutFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayoutFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayoutOverrides
    {
        WINRT_IMPL_AUTO(void) InitializeForContextCore(Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const& context) const;
        WINRT_IMPL_AUTO(void) UninitializeForContextCore(Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const& context) const;
        WINRT_IMPL_AUTO(Windows::Foundation::Size) MeasureOverride(Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const& context, Windows::Foundation::Size const& availableSize) const;
        WINRT_IMPL_AUTO(Windows::Foundation::Size) ArrangeOverride(Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const& context, Windows::Foundation::Size const& finalSize) const;
        WINRT_IMPL_AUTO(void) OnItemsChangedCore(Microsoft::UI::Xaml::Controls::VirtualizingLayoutContext const& context, Windows::Foundation::IInspectable const& source, Windows::UI::Xaml::Interop::NotifyCollectionChangedEventArgs const& args) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IVirtualizingLayoutOverrides>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IVirtualizingLayoutOverrides<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IXamlControlsResources
    {
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IXamlControlsResources>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IXamlControlsResources<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Xaml_Controls_IXamlControlsResourcesStatics
    {
        WINRT_IMPL_AUTO(void) EnsureRevealLights(Windows::UI::Xaml::UIElement const& element) const;
    };
    template <> struct consume<Microsoft::UI::Xaml::Controls::IXamlControlsResourcesStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Xaml_Controls_IXamlControlsResourcesStatics<D>;
    };
}
#endif
